{"file_contents":{"README.md":{"content":"# agiletracker\nThis app is created for Cybaem for Project Management\n","size_bytes":69},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"mysql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":320},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AgileTracker - Project Management System\n\n## Overview\n\nAgileTracker is a comprehensive project management application created for Cybaem, designed to manage projects, teams, and work items in an agile development environment. The system supports hierarchical work item management (Epics, Features, Stories, Tasks, and Bugs) with robust project and team collaboration features.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **UI Components**: Radix UI primitives with custom styling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: Session-based authentication with bcrypt password hashing\n- **Database Provider**: Neon serverless PostgreSQL\n\n### Project Structure\n```\n├── client/                 # Frontend application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── hooks/          # Custom React hooks\n│   │   ├── lib/            # Utility functions\n│   │   └── pages/          # Route components\n├── server/                 # Backend application\n│   ├── auth-middleware.ts  # Authentication middleware\n│   ├── auth-routes.ts      # Authentication endpoints\n│   ├── routes.ts           # API route definitions\n│   └── db.ts              # Database configuration\n├── shared/                 # Shared types and schemas\n│   └── schema.ts          # Database schema and Zod validation\n└── migrations/            # Database migration files\n```\n\n## Key Components\n\n### Data Models\n- **Users**: System users with role-based permissions (ADMIN, SCRUM_MASTER, USER)\n- **Teams**: Organizational units for collaboration\n- **Projects**: Main containers for work with unique keys and team assignments\n- **Work Items**: Hierarchical task management (Epic → Feature → Story/Task/Bug)\n- **Comments & Attachments**: Supporting content for work items\n\n### Authentication & Authorization\n- Session-based authentication with role-based access control\n- Middleware protection for admin and scrum master operations\n- Secure password hashing with bcrypt\n\n### UI Features\n- **Kanban Board**: Drag-and-drop task management with status columns\n- **Timeline View**: Gantt-chart style project visualization\n- **Calendar View**: Date-based work item scheduling\n- **Deadlines View**: Risk assessment and deadline tracking\n- **Reports**: Analytics and progress visualization\n\n### Core Functionality\n- Project and team creation/management\n- Hierarchical work item organization\n- Real-time collaboration features\n- Advanced filtering and search capabilities\n- Progress tracking and reporting\n\n## Data Flow\n\n1. **User Authentication**: Login flow establishes user session\n2. **Data Fetching**: React Query manages server state with automatic caching\n3. **CRUD Operations**: RESTful API endpoints handle data mutations\n4. **Real-time Updates**: Query invalidation ensures UI consistency\n5. **Form Validation**: Client and server-side validation using Zod schemas\n\n## External Dependencies\n\n### Production Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver\n- **@tanstack/react-query**: Server state management\n- **@radix-ui/***: Headless UI component primitives\n- **drizzle-orm**: Type-safe database ORM\n- **bcryptjs**: Password hashing\n- **express-session**: Session management\n- **react-hook-form**: Form state management\n- **zod**: Runtime type validation\n\n### Development Dependencies\n- **Vite**: Build tool and dev server\n- **TypeScript**: Type safety\n- **Tailwind CSS**: Utility-first styling\n- **ESBuild**: Fast bundling for production\n\n## Deployment Strategy\n\n### Development\n- Vite dev server with HMR for frontend\n- tsx for running TypeScript server with hot reload\n- Environment variables for database configuration\n\n### Production Build\n- Frontend: Vite build outputs to `dist/public`\n- Backend: ESBuild bundles server to `dist/index.js`\n- Database: Drizzle migrations applied via `db:push` command\n\n### Environment Configuration\n- `DATABASE_URL`: Required PostgreSQL connection string\n- `SESSION_SECRET`: Session encryption key\n- `NODE_ENV`: Environment mode (development/production)\n\n## Changelog\n\n- June 27, 2025. Initial setup\n- June 27, 2025. Enhanced Reports functionality with comprehensive analytics, charts, and statistical insights\n- June 27, 2025. Redesigned sidebar with horizontal scrolling cards for projects and teams to solve scalability issues with 10-15+ items\n- June 27, 2025. Removed PROJECTS and TEAMS sections from sidebar completely for cleaner interface design\n- July 2, 2025. Implemented database-synced invitation system without email sending - invited users are created in database and appear in team management dropdowns\n- July 2, 2025. Fixed \"Back to teams\" navigation issue using programmatic navigation instead of Link components to prevent authentication redirects\n- July 2, 2025. Removed \"Add Member\" button from team details page as requested by user to streamline the interface\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nUI/UX Priority: Scalable design that works well with 10-15+ projects and teams without crowding the interface.\nSidebar Design: Clean, minimal sidebar without project/team sections - user prefers accessing these through main navigation only.","size_bytes":5751},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  base: \"/saas/TeamTrackPro/\",\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":925},"api/auth.php":{"content":"<?php\nrequire_once 'config/cors.php';\nrequire_once 'config/database.php';\n\nsession_start();\n\n$database = new Database();\n$conn = $database->getConnection();\n\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path = str_replace('/api/php/auth', '', $path);\n$path = str_replace('/api/auth', '', $path);\n\nswitch ($method . ':' . $path) {\n    case 'POST:/login':\n        login($conn);\n        break;\n    \n    case 'POST:/logout':\n        logout();\n        break;\n    \n    case 'GET:/status':\n        getAuthStatus();\n        break;\n    \n    case 'GET:/user':\n        getCurrentUser($conn);\n        break;\n    \n    default:\n        http_response_code(404);\n        echo json_encode(['message' => 'Endpoint not found']);\n        break;\n}\n\nfunction login($conn) {\n    // Read from stdin since data is piped from Node.js proxy\n    $inputData = '';\n    if (!feof(STDIN)) {\n        $inputData = stream_get_contents(STDIN);\n    }\n    \n    // Also try php://input as fallback\n    if (empty($inputData)) {\n        $inputData = file_get_contents('php://input');\n    }\n    \n    $input = json_decode($inputData, true);\n    \n    if (!$input || !isset($input['email']) || !isset($input['password'])) {\n        http_response_code(400);\n        echo json_encode(['message' => 'Email and password are required']);\n        return;\n    }\n    \n    // If database connection failed, return error\n    if (!$conn) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Database connection failed']);\n        return;\n    }\n    \n    try {\n        // Determine the correct column name based on database type\n        $roleColumn = 'user_role'; // Default for PostgreSQL and updated MySQL schema\n        \n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = ?\");\n        $stmt->execute([$input['email']]);\n        $user = $stmt->fetch();\n        \n        if (!$user) {\n            http_response_code(401);\n            echo json_encode(['message' => 'User not found', 'email' => $input['email']]);\n            return;\n        }\n        \n        $passwordMatch = password_verify($input['password'], $user['password']);\n        if (!$passwordMatch) {\n            http_response_code(401);\n            echo json_encode(['message' => 'Invalid credentials']);\n            return;\n        }\n        \n        // Update last login\n        $updateStmt = $conn->prepare(\"UPDATE users SET last_login = ? WHERE id = ?\");\n        $updateStmt->execute([date('Y-m-d H:i:s'), $user['id']]);\n        \n        // Set session\n        $_SESSION['user_id'] = $user['id'];\n        $_SESSION['user_role'] = $user[$roleColumn];\n        \n        echo json_encode([\n            'success' => true,\n            'user' => [\n                'id' => $user['id'],\n                'username' => $user['username'],\n                'email' => $user['email'],\n                'fullName' => $user['full_name'],\n                'role' => $user[$roleColumn],\n                'avatarUrl' => $user['avatar_url']\n            ]\n        ]);\n        \n    } catch (PDOException $e) {\n        error_log(\"Login error: \" . $e->getMessage());\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction logout() {\n    session_destroy();\n    echo json_encode(['message' => 'Logged out successfully']);\n}\n\nfunction getAuthStatus() {\n    if (isset($_SESSION['user_id'])) {\n        echo json_encode([\n            'authenticated' => true,\n            'userRole' => $_SESSION['user_role']\n        ]);\n    } else {\n        echo json_encode(['authenticated' => false]);\n    }\n}\n\nfunction getCurrentUser($conn) {\n    if (!isset($_SESSION['user_id'])) {\n        http_response_code(401);\n        echo json_encode(['message' => 'Not authenticated']);\n        return;\n    }\n    \n    if (!$conn) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Database connection failed']);\n        return;\n    }\n    \n    try {\n        $roleColumn = 'user_role'; // Consistent with login function\n        \n        $stmt = $conn->prepare(\"SELECT id, username, email, full_name, user_role, avatar_url FROM users WHERE id = ?\");\n        $stmt->execute([$_SESSION['user_id']]);\n        $user = $stmt->fetch();\n        \n        if (!$user) {\n            http_response_code(404);\n            echo json_encode(['message' => 'User not found']);\n            return;\n        }\n        \n        echo json_encode([\n            'id' => $user['id'],\n            'username' => $user['username'],\n            'email' => $user['email'],\n            'fullName' => $user['full_name'],\n            'role' => $user[$roleColumn],\n            'avatarUrl' => $user['avatar_url']\n        ]);\n        \n    } catch (PDOException $e) {\n        error_log(\"Get user error: \" . $e->getMessage());\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n?>","size_bytes":4925},"api/projects.php":{"content":"<?php\nrequire_once 'config/cors.php';\nrequire_once 'config/database.php';\n\nsession_start();\n\n$database = new Database();\n$conn = $database->getConnection();\n\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path = str_replace('/api/php/projects', '', $path);\n$path = str_replace('/api/projects', '', $path);\n\nswitch ($method . ':' . $path) {\n    case 'GET:':\n    case 'GET:/':\n        getProjects($conn);\n        break;\n    \n    case 'POST:':\n    case 'POST:/':\n        createProject($conn);\n        break;\n    \n    default:\n        if (preg_match('/^\\/(\\d+)$/', $path, $matches)) {\n            $projectId = $matches[1];\n            switch ($method) {\n                case 'GET':\n                    getProject($conn, $projectId);\n                    break;\n                case 'PATCH':\n                    updateProject($conn, $projectId);\n                    break;\n                case 'DELETE':\n                    deleteProject($conn, $projectId);\n                    break;\n            }\n        } elseif (preg_match('/^\\/(\\d+)\\/work-items$/', $path, $matches)) {\n            $projectId = $matches[1];\n            if ($method === 'GET') {\n                getWorkItems($conn, $projectId);\n            }\n        } else {\n            http_response_code(404);\n            echo json_encode(['message' => 'Endpoint not found']);\n        }\n        break;\n}\n\nfunction getProjects($conn) {\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM projects ORDER BY created_at DESC\");\n        $stmt->execute();\n        $projects = $stmt->fetchAll();\n        \n        // Convert dates and format data\n        $projects = array_map(function($project) {\n            return [\n                'id' => (int)$project['id'],\n                'key' => $project['project_key'],\n                'name' => $project['name'],\n                'description' => $project['description'],\n                'status' => $project['status'],\n                'createdBy' => (int)$project['created_by'],\n                'teamId' => $project['team_id'] ? (int)$project['team_id'] : null,\n                'startDate' => $project['start_date'],\n                'targetDate' => $project['target_date'],\n                'createdAt' => $project['created_at'],\n                'updatedAt' => $project['updated_at']\n            ];\n        }, $projects);\n        \n        echo json_encode($projects);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction getProject($conn, $projectId) {\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM projects WHERE id = ?\");\n        $stmt->execute([$projectId]);\n        $project = $stmt->fetch();\n        \n        if (!$project) {\n            http_response_code(404);\n            echo json_encode(['message' => 'Project not found']);\n            return;\n        }\n        \n        $project = [\n            'id' => (int)$project['id'],\n            'key' => $project['project_key'],\n            'name' => $project['name'],\n            'description' => $project['description'],\n            'status' => $project['status'],\n            'createdBy' => (int)$project['created_by'],\n            'teamId' => $project['team_id'] ? (int)$project['team_id'] : null,\n            'startDate' => $project['start_date'],\n            'targetDate' => $project['target_date'],\n            'createdAt' => $project['created_at'],\n            'updatedAt' => $project['updated_at']\n        ];\n        \n        echo json_encode($project);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction createProject($conn) {\n    // Check authentication\n    if (!isset($_SESSION['user_id'])) {\n        http_response_code(401);\n        echo json_encode(['message' => 'Not authenticated']);\n        return;\n    }\n    \n    $input = json_decode(file_get_contents('php://input'), true);\n    \n    if (!isset($input['name']) || !isset($input['key'])) {\n        http_response_code(400);\n        echo json_encode(['message' => 'Project name and key are required']);\n        return;\n    }\n    \n    try {\n        $stmt = $conn->prepare(\"\n            INSERT INTO projects (project_key, name, description, created_by, team_id, start_date, target_date) \n            VALUES (?, ?, ?, ?, ?, ?, ?)\n        \");\n        \n        $stmt->execute([\n            $input['key'],\n            $input['name'],\n            $input['description'] ?? null,\n            $input['createdBy'] ?? $_SESSION['user_id'],\n            $input['teamId'] ?? null,\n            $input['startDate'] ?? null,\n            $input['targetDate'] ?? null\n        ]);\n        \n        $projectId = $conn->lastInsertId();\n        \n        // Fetch the created project\n        $getStmt = $conn->prepare(\"SELECT * FROM projects WHERE id = ?\");\n        $getStmt->execute([$projectId]);\n        $project = $getStmt->fetch();\n        \n        echo json_encode([\n            'id' => (int)$project['id'],\n            'key' => $project['project_key'],\n            'name' => $project['name'],\n            'description' => $project['description'],\n            'status' => $project['status'],\n            'createdBy' => (int)$project['created_by'],\n            'teamId' => $project['team_id'] ? (int)$project['team_id'] : null,\n            'startDate' => $project['start_date'],\n            'targetDate' => $project['target_date'],\n            'createdAt' => $project['created_at'],\n            'updatedAt' => $project['updated_at']\n        ]);\n        \n    } catch (PDOException $e) {\n        if ($e->getCode() == 23000) { // Unique constraint violation\n            http_response_code(409);\n            echo json_encode(['message' => 'Project key already exists']);\n        } else {\n            http_response_code(500);\n            echo json_encode(['message' => 'Internal server error']);\n        }\n    }\n}\n\nfunction getWorkItems($conn, $projectId) {\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM work_items WHERE project_id = ? ORDER BY created_at DESC\");\n        $stmt->execute([$projectId]);\n        $workItems = $stmt->fetchAll();\n        \n        $workItems = array_map(function($item) {\n            return [\n                'id' => (int)$item['id'],\n                'externalId' => $item['external_id'],\n                'title' => $item['title'],\n                'description' => $item['description'],\n                'type' => $item['type'],\n                'status' => $item['status'],\n                'priority' => $item['priority'],\n                'projectId' => (int)$item['project_id'],\n                'parentId' => $item['parent_id'] ? (int)$item['parent_id'] : null,\n                'assigneeId' => $item['assignee_id'] ? (int)$item['assignee_id'] : null,\n                'reporterId' => $item['reporter_id'] ? (int)$item['reporter_id'] : null,\n                'estimate' => $item['estimate'],\n                'startDate' => $item['start_date'],\n                'endDate' => $item['end_date'],\n                'completedAt' => $item['completed_at'],\n                'createdAt' => $item['created_at'],\n                'updatedAt' => $item['updated_at']\n            ];\n        }, $workItems);\n        \n        echo json_encode($workItems);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction updateProject($conn, $projectId) {\n    // Check authentication\n    if (!isset($_SESSION['user_id'])) {\n        http_response_code(401);\n        echo json_encode(['message' => 'Not authenticated']);\n        return;\n    }\n    \n    $input = json_decode(file_get_contents('php://input'), true);\n    \n    try {\n        // Check if project exists\n        $checkStmt = $conn->prepare(\"SELECT id FROM projects WHERE id = ?\");\n        $checkStmt->execute([$projectId]);\n        if (!$checkStmt->fetch()) {\n            http_response_code(404);\n            echo json_encode(['message' => 'Project not found']);\n            return;\n        }\n        \n        // Build update query dynamically\n        $updateFields = [];\n        $params = [];\n        \n        if (isset($input['name'])) {\n            $updateFields[] = \"name = ?\";\n            $params[] = $input['name'];\n        }\n        if (isset($input['description'])) {\n            $updateFields[] = \"description = ?\";\n            $params[] = $input['description'];\n        }\n        if (isset($input['status'])) {\n            $updateFields[] = \"status = ?\";\n            $params[] = $input['status'];\n        }\n        \n        if (empty($updateFields)) {\n            http_response_code(400);\n            echo json_encode(['message' => 'No fields to update']);\n            return;\n        }\n        \n        $updateFields[] = \"updated_at = ?\";\n        $params[] = date('Y-m-d H:i:s');\n        $params[] = $projectId;\n        \n        $sql = \"UPDATE projects SET \" . implode(', ', $updateFields) . \" WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->execute($params);\n        \n        // Return updated project\n        getProject($conn, $projectId);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction deleteProject($conn, $projectId) {\n    // Check authentication and admin role\n    if (!isset($_SESSION['user_id']) || $_SESSION['user_role'] !== 'ADMIN') {\n        http_response_code(403);\n        echo json_encode(['message' => 'Access denied']);\n        return;\n    }\n    \n    try {\n        $stmt = $conn->prepare(\"DELETE FROM projects WHERE id = ?\");\n        $stmt->execute([$projectId]);\n        \n        if ($stmt->rowCount() === 0) {\n            http_response_code(404);\n            echo json_encode(['message' => 'Project not found']);\n            return;\n        }\n        \n        http_response_code(204);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n?>","size_bytes":10117},"api/teams.php":{"content":"<?php\nrequire_once 'config/cors.php';\nrequire_once 'config/database.php';\n\nsession_start();\n\n$database = new Database();\n$conn = $database->getConnection();\n\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path = str_replace('/api/php/teams', '', $path);\n$path = str_replace('/api/teams', '', $path);\n\nswitch ($method . ':' . $path) {\n    case 'GET:':\n    case 'GET:/':\n        getTeams($conn);\n        break;\n    \n    case 'POST:':\n    case 'POST:/':\n        createTeam($conn);\n        break;\n    \n    default:\n        if (preg_match('/^\\/(\\d+)$/', $path, $matches)) {\n            $teamId = $matches[1];\n            if ($method === 'GET') {\n                getTeam($conn, $teamId);\n            }\n        } elseif (preg_match('/^\\/(\\d+)\\/members$/', $path, $matches)) {\n            $teamId = $matches[1];\n            if ($method === 'GET') {\n                getTeamMembers($conn, $teamId);\n            } elseif ($method === 'POST') {\n                addTeamMember($conn, $teamId);\n            }\n        } else {\n            http_response_code(404);\n            echo json_encode(['message' => 'Endpoint not found']);\n        }\n        break;\n}\n\nfunction getTeams($conn) {\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM teams ORDER BY created_at DESC\");\n        $stmt->execute();\n        $teams = $stmt->fetchAll();\n        \n        $teams = array_map(function($team) {\n            return [\n                'id' => (int)$team['id'],\n                'name' => $team['name'],\n                'description' => $team['description'],\n                'createdBy' => (int)$team['created_by'],\n                'isActive' => (bool)$team['is_active'],\n                'createdAt' => $team['created_at'],\n                'updatedAt' => $team['updated_at']\n            ];\n        }, $teams);\n        \n        echo json_encode($teams);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction getTeam($conn, $teamId) {\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM teams WHERE id = ?\");\n        $stmt->execute([$teamId]);\n        $team = $stmt->fetch();\n        \n        if (!$team) {\n            http_response_code(404);\n            echo json_encode(['message' => 'Team not found']);\n            return;\n        }\n        \n        $team = [\n            'id' => (int)$team['id'],\n            'name' => $team['name'],\n            'description' => $team['description'],\n            'createdBy' => (int)$team['created_by'],\n            'isActive' => (bool)$team['is_active'],\n            'createdAt' => $team['created_at'],\n            'updatedAt' => $team['updated_at']\n        ];\n        \n        echo json_encode($team);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction createTeam($conn) {\n    if (!isset($_SESSION['user_id'])) {\n        http_response_code(401);\n        echo json_encode(['message' => 'Not authenticated']);\n        return;\n    }\n    \n    $input = json_decode(file_get_contents('php://input'), true);\n    \n    if (!isset($input['name'])) {\n        http_response_code(400);\n        echo json_encode(['message' => 'Team name is required']);\n        return;\n    }\n    \n    try {\n        $stmt = $conn->prepare(\"\n            INSERT INTO teams (name, description, created_by) \n            VALUES (?, ?, ?)\n        \");\n        \n        $stmt->execute([\n            $input['name'],\n            $input['description'] ?? null,\n            $_SESSION['user_id']\n        ]);\n        \n        $teamId = $conn->lastInsertId();\n        \n        // Return created team\n        getTeam($conn, $teamId);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction getTeamMembers($conn, $teamId) {\n    try {\n        $stmt = $conn->prepare(\"\n            SELECT tm.*, u.username, u.email, u.full_name, u.avatar_url \n            FROM team_members tm \n            JOIN users u ON tm.user_id = u.id \n            WHERE tm.team_id = ?\n        \");\n        $stmt->execute([$teamId]);\n        $members = $stmt->fetchAll();\n        \n        $members = array_map(function($member) {\n            return [\n                'id' => (int)$member['id'],\n                'teamId' => (int)$member['team_id'],\n                'userId' => (int)$member['user_id'],\n                'role' => $member['role'],\n                'joinedAt' => $member['joined_at'],\n                'updatedAt' => $member['updated_at'],\n                'user' => [\n                    'id' => (int)$member['user_id'],\n                    'username' => $member['username'],\n                    'email' => $member['email'],\n                    'fullName' => $member['full_name'],\n                    'avatarUrl' => $member['avatar_url']\n                ]\n            ];\n        }, $members);\n        \n        echo json_encode($members);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction addTeamMember($conn, $teamId) {\n    if (!isset($_SESSION['user_id'])) {\n        http_response_code(401);\n        echo json_encode(['message' => 'Not authenticated']);\n        return;\n    }\n    \n    $input = json_decode(file_get_contents('php://input'), true);\n    \n    if (!isset($input['userId'])) {\n        http_response_code(400);\n        echo json_encode(['message' => 'User ID is required']);\n        return;\n    }\n    \n    try {\n        $stmt = $conn->prepare(\"\n            INSERT INTO team_members (team_id, user_id, role) \n            VALUES (?, ?, ?)\n        \");\n        \n        $stmt->execute([\n            $teamId,\n            $input['userId'],\n            $input['role'] ?? 'MEMBER'\n        ]);\n        \n        $memberId = $conn->lastInsertId();\n        \n        // Return the new member with user details\n        $getStmt = $conn->prepare(\"\n            SELECT tm.*, u.username, u.email, u.full_name, u.avatar_url \n            FROM team_members tm \n            JOIN users u ON tm.user_id = u.id \n            WHERE tm.id = ?\n        \");\n        $getStmt->execute([$memberId]);\n        $member = $getStmt->fetch();\n        \n        echo json_encode([\n            'id' => (int)$member['id'],\n            'teamId' => (int)$member['team_id'],\n            'userId' => (int)$member['user_id'],\n            'role' => $member['role'],\n            'joinedAt' => $member['joined_at'],\n            'updatedAt' => $member['updated_at'],\n            'user' => [\n                'id' => (int)$member['user_id'],\n                'username' => $member['username'],\n                'email' => $member['email'],\n                'fullName' => $member['full_name'],\n                'avatarUrl' => $member['avatar_url']\n            ]\n        ]);\n        \n    } catch (PDOException $e) {\n        if ($e->getCode() == 23000) {\n            http_response_code(409);\n            echo json_encode(['message' => 'User is already a member of this team']);\n        } else {\n            http_response_code(500);\n            echo json_encode(['message' => 'Internal server error']);\n        }\n    }\n}\n?>","size_bytes":7290},"api/users.php":{"content":"<?php\nrequire_once 'config/cors.php';\nrequire_once 'config/database.php';\n\nsession_start();\n\n$database = new Database();\n$conn = $database->getConnection();\n\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path = str_replace('/api/php/users', '', $path);\n$path = str_replace('/api/users', '', $path);\n\nswitch ($method . ':' . $path) {\n    case 'GET:':\n    case 'GET:/':\n        getUsers($conn);\n        break;\n    \n    case 'POST:':\n    case 'POST:/':\n        createUser($conn);\n        break;\n    \n    default:\n        if (preg_match('/^\\/(\\d+)$/', $path, $matches)) {\n            $userId = $matches[1];\n            if ($method === 'GET') {\n                getUser($conn, $userId);\n            }\n        } else {\n            http_response_code(404);\n            echo json_encode(['message' => 'Endpoint not found']);\n        }\n        break;\n}\n\nfunction getUsers($conn) {\n    try {\n        $stmt = $conn->prepare(\"SELECT id, username, email, full_name, avatar_url, is_active, role, last_login, created_at, updated_at FROM users\");\n        $stmt->execute();\n        $users = $stmt->fetchAll();\n        \n        $users = array_map(function($user) {\n            return [\n                'id' => (int)$user['id'],\n                'username' => $user['username'],\n                'email' => $user['email'],\n                'fullName' => $user['full_name'],\n                'avatarUrl' => $user['avatar_url'],\n                'isActive' => (bool)$user['is_active'],\n                'role' => $user['role'],\n                'lastLogin' => $user['last_login'],\n                'createdAt' => $user['created_at'],\n                'updatedAt' => $user['updated_at']\n            ];\n        }, $users);\n        \n        echo json_encode($users);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction getUser($conn, $userId) {\n    try {\n        $stmt = $conn->prepare(\"SELECT id, username, email, full_name, avatar_url, is_active, role, last_login, created_at, updated_at FROM users WHERE id = ?\");\n        $stmt->execute([$userId]);\n        $user = $stmt->fetch();\n        \n        if (!$user) {\n            http_response_code(404);\n            echo json_encode(['message' => 'User not found']);\n            return;\n        }\n        \n        $user = [\n            'id' => (int)$user['id'],\n            'username' => $user['username'],\n            'email' => $user['email'],\n            'fullName' => $user['full_name'],\n            'avatarUrl' => $user['avatar_url'],\n            'isActive' => (bool)$user['is_active'],\n            'role' => $user['role'],\n            'lastLogin' => $user['last_login'],\n            'createdAt' => $user['created_at'],\n            'updatedAt' => $user['updated_at']\n        ];\n        \n        echo json_encode($user);\n        \n    } catch (PDOException $e) {\n        http_response_code(500);\n        echo json_encode(['message' => 'Internal server error']);\n    }\n}\n\nfunction createUser($conn) {\n    $input = json_decode(file_get_contents('php://input'), true);\n    \n    if (!isset($input['username']) || !isset($input['email']) || !isset($input['password'])) {\n        http_response_code(400);\n        echo json_encode(['message' => 'Username, email and password are required']);\n        return;\n    }\n    \n    try {\n        $hashedPassword = password_hash($input['password'], PASSWORD_BCRYPT);\n        \n        $stmt = $conn->prepare(\"\n            INSERT INTO users (username, email, full_name, password, role) \n            VALUES (?, ?, ?, ?, ?)\n        \");\n        \n        $stmt->execute([\n            $input['username'],\n            $input['email'],\n            $input['fullName'] ?? $input['username'],\n            $hashedPassword,\n            $input['role'] ?? 'USER'\n        ]);\n        \n        $userId = $conn->lastInsertId();\n        \n        // Return created user without password\n        getUser($conn, $userId);\n        \n    } catch (PDOException $e) {\n        if ($e->getCode() == 23000) {\n            http_response_code(409);\n            echo json_encode(['message' => 'User with this email or username already exists']);\n        } else {\n            http_response_code(500);\n            echo json_encode(['message' => 'Internal server error']);\n        }\n    }\n}\n?>","size_bytes":4362},"server/DatabaseStorage.ts":{"content":"import { eq, and, desc, asc, isNull, sql } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport { IStorage } from \"./storage\";\nimport {\n  users,\n  teams,\n  teamMembers,\n  projects,\n  workItems,\n  comments,\n  attachments,\n  workItemHistory,\n  type User,\n  type InsertUser,\n  type Team,\n  type InsertTeam,\n  type TeamMember,\n  type InsertTeamMember,\n  type Project,\n  type InsertProject,\n  type WorkItem,\n  type InsertWorkItem,\n  type Comment,\n  type InsertComment,\n  type Attachment,\n  type InsertAttachment,\n} from \"@shared/schema\";\n\n/**\n * Generate external ID for work items using project key and an incremented counter\n */\nasync function generateExternalId(type: string, projectId: number): Promise<string> {\n  // First, get the project key\n  const [project] = await db\n    .select({ key: projects.key })\n    .from(projects)\n    .where(eq(projects.id, projectId));\n  \n  if (!project) {\n    throw new Error(`Project with ID ${projectId} not found`);\n  }\n  \n  // Count existing work items for this project to generate the next sequence number\n  const countResult = await db\n    .select({ count: sql<number>`count(*)` })\n    .from(workItems)\n    .where(eq(workItems.projectId, projectId));\n  \n  const count = countResult[0]?.count || 0;\n  const nextNumber = count + 1;\n  \n  // Format to ensure at least 3 digits, e.g., PROJ-001\n  return `${project.key}-${nextNumber.toString().padStart(3, '0')}`;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User management methods\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values({\n      ...insertUser,\n      isActive: true,\n      updatedAt: new Date(),\n    }).returning();\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.isActive, true));\n  }\n\n  // Team management methods\n  async createTeam(insertTeam: InsertTeam): Promise<Team> {\n    const [team] = await db.insert(teams).values({\n      ...insertTeam,\n      isActive: true,\n      updatedAt: new Date(),\n    }).returning();\n    return team;\n  }\n\n  async getTeam(id: number): Promise<Team | undefined> {\n    const [team] = await db.select().from(teams).where(eq(teams.id, id));\n    return team;\n  }\n\n  async getTeams(): Promise<Team[]> {\n    return await db.select().from(teams).where(eq(teams.isActive, true));\n  }\n\n  async getTeamsByUser(userId: number): Promise<Team[]> {\n    // Find all teams where the user is a member\n    return await db\n      .select({\n        id: teams.id,\n        name: teams.name,\n        description: teams.description,\n        createdBy: teams.createdBy,\n        isActive: teams.isActive,\n        createdAt: teams.createdAt,\n        updatedAt: teams.updatedAt,\n      })\n      .from(teams)\n      .innerJoin(teamMembers, eq(teams.id, teamMembers.teamId))\n      .where(and(\n        eq(teamMembers.userId, userId),\n        eq(teams.isActive, true)\n      ));\n  }\n\n  // Team members methods\n  async addTeamMember(insertTeamMember: InsertTeamMember): Promise<TeamMember> {\n    const [teamMember] = await db.insert(teamMembers).values({\n      ...insertTeamMember,\n      updatedAt: new Date(),\n    }).returning();\n    return teamMember;\n  }\n\n  async getTeamMembers(teamId: number): Promise<TeamMember[]> {\n    return await db\n      .select()\n      .from(teamMembers)\n      .where(eq(teamMembers.teamId, teamId));\n  }\n\n  async removeTeamMember(teamId: number, userId: number): Promise<boolean> {\n    const result = await db\n      .delete(teamMembers)\n      .where(\n        and(\n          eq(teamMembers.teamId, teamId),\n          eq(teamMembers.userId, userId)\n        )\n      );\n    \n    return result.rowCount > 0;\n  }\n\n  // Project management methods\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const [project] = await db.insert(projects).values({\n      ...insertProject,\n      updatedAt: new Date(),\n    }).returning();\n    return project;\n  }\n\n  async getProject(id: number): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async getProjects(): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects);\n  }\n\n  async getProjectsByTeam(teamId: number): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .where(eq(projects.teamId, teamId));\n  }\n  \n  async updateProject(id: number, updates: Partial<Project>): Promise<Project | undefined> {\n    try {\n      const [updatedProject] = await db\n        .update(projects)\n        .set({\n          ...updates,\n          updatedAt: new Date()\n        })\n        .where(eq(projects.id, id))\n        .returning();\n      \n      return updatedProject;\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      return undefined;\n    }\n  }\n  \n  async deleteProject(id: number): Promise<boolean> {\n    try {\n      // In a real application, we might want to implement soft delete\n      // or check for dependencies before deleting\n      const result = await db\n        .delete(projects)\n        .where(eq(projects.id, id));\n      \n      return result.rowCount > 0;\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      return false;\n    }\n  }\n\n  // Work items methods (Epics, Features, Stories, Tasks, Bugs)\n  async createWorkItem(insertWorkItem: InsertWorkItem): Promise<WorkItem> {\n    // Generate external ID if not provided\n    const externalId = insertWorkItem.externalId || \n                      await generateExternalId(insertWorkItem.type, insertWorkItem.projectId);\n    \n    const [workItem] = await db.insert(workItems).values({\n      ...insertWorkItem,\n      externalId,\n      updatedAt: new Date(),\n    }).returning();\n    \n    return workItem;\n  }\n\n  async getWorkItem(id: number): Promise<WorkItem | undefined> {\n    const [workItem] = await db.select().from(workItems).where(eq(workItems.id, id));\n    return workItem;\n  }\n\n  async getWorkItemsByProject(projectId: number): Promise<WorkItem[]> {\n    return await db\n      .select()\n      .from(workItems)\n      .where(eq(workItems.projectId, projectId))\n      .orderBy(desc(workItems.updatedAt));\n  }\n\n  async getWorkItemsByParent(parentId: number): Promise<WorkItem[]> {\n    return await db\n      .select()\n      .from(workItems)\n      .where(eq(workItems.parentId, parentId))\n      .orderBy(desc(workItems.updatedAt));\n  }\n\n  async updateWorkItemStatus(id: number, status: string): Promise<WorkItem | undefined> {\n    const now = new Date();\n    const values: Record<string, any> = {\n      status,\n      updatedAt: now,\n    };\n    \n    // If status is DONE, set completedAt\n    if (status === \"DONE\") {\n      values.completedAt = now;\n    }\n    \n    const [workItem] = await db\n      .update(workItems)\n      .set(values)\n      .where(eq(workItems.id, id))\n      .returning();\n    \n    return workItem;\n  }\n\n  async updateWorkItem(id: number, updates: Partial<WorkItem>): Promise<WorkItem | undefined> {\n    // Process date fields to ensure they're proper Date objects\n    const processedUpdates: Partial<WorkItem> = { ...updates };\n    \n    // Handle startDate and endDate specifically\n    if (updates.startDate && !(updates.startDate instanceof Date)) {\n      try {\n        processedUpdates.startDate = new Date(updates.startDate);\n      } catch (error) {\n        processedUpdates.startDate = null;\n      }\n    }\n    \n    if (updates.endDate && !(updates.endDate instanceof Date)) {\n      try {\n        processedUpdates.endDate = new Date(updates.endDate);\n      } catch (error) {\n        processedUpdates.endDate = null;\n      }\n    }\n    \n    // Remove dueDate handling as it doesn't exist in the schema\n    \n    const [workItem] = await db\n      .update(workItems)\n      .set({\n        ...processedUpdates,\n        updatedAt: new Date(),\n      })\n      .where(eq(workItems.id, id))\n      .returning();\n    \n    return workItem;\n  }\n\n  async deleteWorkItem(id: number): Promise<boolean> {\n    // Check if there are any child items first\n    const childItems = await this.getWorkItemsByParent(id);\n    if (childItems.length > 0) {\n      return false; // Cannot delete if there are child items\n    }\n    \n    const result = await db\n      .delete(workItems)\n      .where(eq(workItems.id, id));\n    \n    return result.rowCount > 0;\n  }\n  \n  // Comments methods\n  async createComment(workItemId: number, userId: number, content: string): Promise<Comment> {\n    const [comment] = await db.insert(comments).values({\n      workItemId,\n      userId,\n      content,\n      updatedAt: new Date(),\n    }).returning();\n    \n    return comment;\n  }\n  \n  async getCommentsByWorkItem(workItemId: number): Promise<Comment[]> {\n    return await db\n      .select()\n      .from(comments)\n      .where(eq(comments.workItemId, workItemId))\n      .orderBy(asc(comments.createdAt));\n  }\n\n  // Work item history methods\n  async addWorkItemHistoryEntry(\n    workItemId: number, \n    userId: number, \n    field: string, \n    oldValue: string | null, \n    newValue: string | null\n  ): Promise<void> {\n    await db.insert(workItemHistory).values({\n      workItemId,\n      userId,\n      field,\n      oldValue,\n      newValue,\n    });\n  }\n  \n  async getWorkItemHistory(workItemId: number): Promise<any[]> {\n    return await db\n      .select({\n        id: workItemHistory.id,\n        field: workItemHistory.field,\n        oldValue: workItemHistory.oldValue,\n        newValue: workItemHistory.newValue,\n        changedAt: workItemHistory.changedAt,\n        userId: workItemHistory.userId,\n        username: users.username,\n        fullName: users.fullName,\n      })\n      .from(workItemHistory)\n      .innerJoin(users, eq(workItemHistory.userId, users.id))\n      .where(eq(workItemHistory.workItemId, workItemId))\n      .orderBy(desc(workItemHistory.changedAt));\n  }\n  \n  // File attachments methods\n  async addAttachment(attachment: InsertAttachment): Promise<Attachment> {\n    const [result] = await db.insert(attachments).values(attachment).returning();\n    return result;\n  }\n  \n  async getAttachmentsByWorkItem(workItemId: number): Promise<Attachment[]> {\n    return await db\n      .select()\n      .from(attachments)\n      .where(eq(attachments.workItemId, workItemId))\n      .orderBy(desc(attachments.uploadedAt));\n  }\n  \n  // Advanced queries\n  async getWorkItemsWithFilters(filters: {\n    projectId?: number;\n    types?: string[];\n    statuses?: string[];\n    priorities?: string[];\n    assigneeId?: number | null; // null means unassigned\n  }): Promise<WorkItem[]> {\n    let query = db.select().from(workItems);\n    \n    if (filters.projectId !== undefined) {\n      query = query.where(eq(workItems.projectId, filters.projectId));\n    }\n    \n    if (filters.types && filters.types.length > 0) {\n      query = query.where(sql`${workItems.type} IN ${filters.types}`);\n    }\n    \n    if (filters.statuses && filters.statuses.length > 0) {\n      query = query.where(sql`${workItems.status} IN ${filters.statuses}`);\n    }\n    \n    if (filters.priorities && filters.priorities.length > 0) {\n      query = query.where(sql`${workItems.priority} IN ${filters.priorities}`);\n    }\n    \n    if (filters.assigneeId !== undefined) {\n      if (filters.assigneeId === null) {\n        query = query.where(isNull(workItems.assigneeId));\n      } else {\n        query = query.where(eq(workItems.assigneeId, filters.assigneeId));\n      }\n    }\n    \n    return await query.orderBy(desc(workItems.updatedAt));\n  }\n  \n  // Dashboard/reporting methods\n  async getWorkItemsCountByStatus(projectId: number): Promise<Record<string, number>> {\n    const results = await db\n      .select({\n        status: workItems.status,\n        count: sql<number>`count(*)`,\n      })\n      .from(workItems)\n      .where(eq(workItems.projectId, projectId))\n      .groupBy(workItems.status);\n    \n    return results.reduce((acc: Record<string, number>, curr: any) => {\n      acc[curr.status] = curr.count;\n      return acc;\n    }, {} as Record<string, number>);\n  }\n  \n  async getWorkItemsCountByType(projectId: number): Promise<Record<string, number>> {\n    const results = await db\n      .select({\n        type: workItems.type,\n        count: sql<number>`count(*)`,\n      })\n      .from(workItems)\n      .where(eq(workItems.projectId, projectId))\n      .groupBy(workItems.type);\n    \n    return results.reduce((acc: Record<string, number>, curr: any) => {\n      acc[curr.type] = curr.count;\n      return acc;\n    }, {} as Record<string, number>);\n  }\n\n  async getWorkItemsCountByPriority(projectId: number): Promise<Record<string, number>> {\n    const results = await db\n      .select({\n        priority: workItems.priority,\n        count: sql<number>`count(*)`,\n      })\n      .from(workItems)\n      .where(eq(workItems.projectId, projectId))\n      .groupBy(workItems.priority);\n    \n    return results.reduce((acc: Record<string, number>, curr: any) => {\n      acc[curr.priority] = curr.count;\n      return acc;\n    }, {} as Record<string, number>);\n  }\n}","size_bytes":13489},"server/auth-middleware.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { db } from \"./db\";\nimport { users, workItems } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\n/**\n * Middleware to check if the current user has admin role\n */\nexport const isAdmin = async (req: Request, res: Response, next: NextFunction) => {\n  // Get the user ID from the session\n  const userId = (req as any).session?.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized: Not logged in\" });\n  }\n  \n  try {\n    // Get the user record to check role\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    \n    if (!user) {\n      return res.status(401).json({ message: \"Unauthorized: User not found\" });\n    }\n    \n    if (user.role !== \"ADMIN\") {\n      return res.status(403).json({ message: \"Forbidden: Admin access required\" });\n    }\n    \n    // User is an admin, proceed\n    next();\n  } catch (error) {\n    console.error(\"Error in admin middleware:\", error);\n    return res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\n/**\n * Middleware to check if the current user has Scrum Master role (or higher)\n */\nexport const isScrumMasterOrAdmin = async (req: Request, res: Response, next: NextFunction) => {\n  // Get the user ID from the session\n  const userId = (req as any).session?.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized: Not logged in\" });\n  }\n  \n  try {\n    // Get the user record to check role\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    \n    if (!user) {\n      return res.status(401).json({ message: \"Unauthorized: User not found\" });\n    }\n    \n    if (user.role !== \"ADMIN\" && user.role !== \"SCRUM_MASTER\") {\n      return res.status(403).json({ message: \"Forbidden: Scrum Master or Admin access required\" });\n    }\n    \n    // User is a Scrum Master or Admin, proceed\n    next();\n  } catch (error) {\n    console.error(\"Error in scrum master middleware:\", error);\n    return res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\n/**\n * Middleware to check if a user can manage work items of specific types\n * Used to restrict regular users from creating/editing Epics and Features\n */\nexport const canManageWorkItemType = (allowedTypes: string[]) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    // Get the requested work item type from the request\n    const workItemType = req.body.type;\n    \n    if (!workItemType) {\n      return res.status(400).json({ message: \"Work item type is required\" });\n    }\n    \n    // Get the user ID from the session\n    const userId = (req as any).session?.userId;\n    \n    if (!userId) {\n      return res.status(401).json({ message: \"Unauthorized: Not logged in\" });\n    }\n    \n    try {\n      // Get the user record to check role\n      const [user] = await db.select().from(users).where(eq(users.id, userId));\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized: User not found\" });\n      }\n      \n      // Admins and Scrum Masters can manage all work item types\n      if (user.role === \"ADMIN\" || user.role === \"SCRUM_MASTER\") {\n        return next();\n      }\n      \n      // Regular users can only manage allowed types\n      if (!allowedTypes.includes(workItemType)) {\n        return res.status(403).json({ \n          message: `Regular users can only create/edit ${allowedTypes.join(\", \")}` \n        });\n      }\n      \n      // User can manage this work item type, proceed\n      next();\n    } catch (error) {\n      console.error(\"Error in work item type middleware:\", error);\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  };\n};\n\n/**\n * Middleware to check if a user can delete a work item\n * Regular users cannot delete any work items\n * Scrum Masters can delete Story, Task, Bug\n * Admins can delete any work item\n */\nexport const canDeleteWorkItem = async (req: Request, res: Response, next: NextFunction) => {\n  // Get the user ID from the session\n  const userId = (req as any).session?.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized: Not logged in\" });\n  }\n  \n  try {\n    // Get the user record to check role\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    \n    if (!user) {\n      return res.status(401).json({ message: \"Unauthorized: User not found\" });\n    }\n    \n    // If admin, allow deletion\n    if (user.role === \"ADMIN\") {\n      return next();\n    }\n    \n    // For Scrum Master, we need to check the work item type\n    if (user.role === \"SCRUM_MASTER\") {\n      // Get the ID of the work item to be deleted\n      const workItemId = parseInt(req.params.id);\n      \n      if (isNaN(workItemId)) {\n        return res.status(400).json({ message: \"Invalid work item ID\" });\n      }\n      \n      // Get the work item to check its type\n      const [workItem] = await db\n        .select()\n        .from(workItems)\n        .where(eq(workItems.id, workItemId));\n      \n      if (!workItem) {\n        return res.status(404).json({ message: \"Work item not found\" });\n      }\n      \n      // Scrum Masters can only delete STORY, TASK, BUG\n      if ([\"STORY\", \"TASK\", \"BUG\"].includes(workItem.type)) {\n        return next();\n      } else {\n        return res.status(403).json({ \n          message: \"Scrum Masters can only delete Stories, Tasks, and Bugs\" \n        });\n      }\n    }\n    \n    // Regular users cannot delete any work items\n    return res.status(403).json({ message: \"Regular users cannot delete work items\" });\n    \n  } catch (error) {\n    console.error(\"Error in delete work item middleware:\", error);\n    return res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\n/**\n * Middleware to check if a user can delete a project or team\n * Only Admins can delete projects and teams\n */\nexport const canDeleteEntity = async (req: Request, res: Response, next: NextFunction) => {\n  // Get the user ID from the session\n  const userId = (req as any).session?.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized: Not logged in\" });\n  }\n  \n  try {\n    // Get the user record to check role\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    \n    if (!user) {\n      return res.status(401).json({ message: \"Unauthorized: User not found\" });\n    }\n    \n    // Only admins can delete projects and teams\n    if (user.role !== \"ADMIN\") {\n      return res.status(403).json({ message: \"Only administrators can delete projects and teams\" });\n    }\n    \n    // User is an admin, proceed\n    next();\n  } catch (error) {\n    console.error(\"Error in delete entity middleware:\", error);\n    return res.status(500).json({ message: \"Internal server error\" });\n  }\n};","size_bytes":6797},"server/auth-routes.ts":{"content":"import { Router, Request, Response } from 'express';\nimport { db } from './db';\nimport { users } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\n\nconst authRouter = Router();\n\n// Login route\nauthRouter.post('/login', async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ message: 'Email and password are required' });\n    }\n\n    // Find user by email\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Check password\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordValid) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Set user in session\n    (req.session as any).userId = user.id;\n    (req.session as any).userRole = user.role;\n\n    // Update last login time\n    await db.update(users)\n      .set({ lastLogin: new Date() })\n      .where(eq(users.id, user.id));\n\n    return res.status(200).json({\n      success: true,\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        fullName: user.fullName,\n        role: user.role,\n        avatarUrl: user.avatarUrl\n      }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    return res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// Logout route\nauthRouter.post('/logout', (req: Request, res: Response) => {\n  req.session.destroy((err) => {\n    if (err) {\n      return res.status(500).json({ message: 'Error logging out' });\n    }\n    res.clearCookie('connect.sid');\n    return res.status(200).json({ message: 'Logged out successfully' });\n  });\n});\n\n// Check authentication status\nauthRouter.get('/status', (req: Request, res: Response) => {\n  if ((req.session as any).userId) {\n    return res.status(200).json({ \n      authenticated: true,\n      userRole: (req.session as any).userRole\n    });\n  }\n  \n  return res.status(200).json({ authenticated: false });\n});\n\n// Get current user\nauthRouter.get('/user', async (req: Request, res: Response) => {\n  const userId = (req.session as any).userId;\n  \n  if (!userId) {\n    return res.status(401).json({ message: 'Not authenticated' });\n  }\n  \n  try {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    \n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    return res.status(200).json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      fullName: user.fullName,\n      role: user.role,\n      avatarUrl: user.avatarUrl\n    });\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    return res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// Create sample users for each role\nauthRouter.post('/setup-sample-users', async (req: Request, res: Response) => {\n  try {\n    // Check if sample users already exist\n    const existingUsers = await db.select().from(users);\n    const adminExists = existingUsers.some(user => user.role === 'ADMIN');\n    const scrumMasterExists = existingUsers.some(user => user.role === 'SCRUM_MASTER');\n    const regularUserExists = existingUsers.some(user => user.role === 'USER');\n    \n    if (adminExists && scrumMasterExists && regularUserExists) {\n      return res.status(200).json({ message: 'Sample users already exist', users: existingUsers });\n    }\n    \n    const salt = await bcrypt.genSalt(10);\n    \n    // Hash different passwords for each user type\n    const adminHashedPassword = await bcrypt.hash('admin123', salt);\n    const scrumHashedPassword = await bcrypt.hash('scrum123', salt);\n    const userHashedPassword = await bcrypt.hash('user123', salt);\n    \n    const sampleUsers = [];\n    \n    // Create admin user if not exists\n    if (!adminExists) {\n      const [adminUser] = await db.insert(users).values({\n        username: 'admin',\n        email: 'admin@example.com',\n        password: adminHashedPassword,\n        fullName: 'Admin User',\n        role: 'ADMIN',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }).returning();\n      \n      sampleUsers.push(adminUser);\n    }\n    \n    // Create scrum master user if not exists\n    if (!scrumMasterExists) {\n      const [scrumUser] = await db.insert(users).values({\n        username: 'scrummaster',\n        email: 'scrum@example.com',\n        password: scrumHashedPassword,\n        fullName: 'Scrum Master',\n        role: 'SCRUM_MASTER',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }).returning();\n      \n      sampleUsers.push(scrumUser);\n    }\n    \n    // Create regular user if not exists\n    if (!regularUserExists) {\n      const [regularUser] = await db.insert(users).values({\n        username: 'user',\n        email: 'user@example.com',\n        password: userHashedPassword,\n        fullName: 'Regular User',\n        role: 'USER',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }).returning();\n      \n      sampleUsers.push(regularUser);\n    }\n    \n    return res.status(200).json({ \n      message: 'Sample users created successfully',\n      users: sampleUsers\n    });\n  } catch (error) {\n    console.error('Error creating sample users:', error);\n    return res.status(500).json({ message: 'Error creating sample users' });\n  }\n});\n\nexport default authRouter;","size_bytes":5578},"server/data-generator.ts":{"content":"import { storage } from \"./storage\";\nimport { InsertUser, InsertTeam, InsertTeamMember, InsertProject, InsertWorkItem } from \"@shared/schema\";\nimport { log } from \"./vite\";\n\n// Team names with realistic departments\nconst teamNames = [\n  { name: \"Engineering Team\", description: \"Core engineering and development team\" },\n  { name: \"Design Team\", description: \"UI/UX and product design team\" },\n  { name: \"Marketing Team\", description: \"Marketing, communications, and brand management\" },\n  { name: \"Operations Team\", description: \"Internal operations and infrastructure\" },\n  { name: \"Product Team\", description: \"Product management and strategy\" }\n];\n\n// Project data\nconst projectData = [\n  { \n    name: \"Enterprise Resource Planning System\", \n    key: \"ERP\", \n    description: \"Comprehensive ERP solution with integrated modules for all departments\" \n  },\n  { \n    name: \"Customer Experience Platform\", \n    key: \"CXP\", \n    description: \"Unified platform for managing all customer interactions and experiences\" \n  },\n  { \n    name: \"Data Analytics Dashboard\", \n    key: \"DAD\", \n    description: \"Business intelligence dashboard with advanced analytics capabilities\" \n  },\n  { \n    name: \"Cloud Migration Initiative\", \n    key: \"CMI\", \n    description: \"Strategic migration of on-premises systems to cloud infrastructure\" \n  },\n  { \n    name: \"Mobile Workforce Solution\", \n    key: \"MWS\", \n    description: \"Cross-platform mobile application for remote workforce management\" \n  }\n];\n\n// User data - using corporate domains\nconst userData: InsertUser[] = [\n  { username: \"jsmith\", password: \"password123\", fullName: \"John Smith\", email: \"jsmith@company.com\", isActive: true },\n  { username: \"mjohnson\", password: \"password123\", fullName: \"Maria Johnson\", email: \"mjohnson@company.com\", isActive: true },\n  { username: \"alee\", password: \"password123\", fullName: \"Alex Lee\", email: \"alee@company.com\", isActive: true },\n  { username: \"schang\", password: \"password123\", fullName: \"Sarah Chang\", email: \"schang@company.com\", isActive: true },\n  { username: \"rthomas\", password: \"password123\", fullName: \"Ryan Thomas\", email: \"rthomas@company.com\", isActive: true },\n  { username: \"jpatel\", password: \"password123\", fullName: \"Jessica Patel\", email: \"jpatel@company.com\", isActive: true },\n  { username: \"mwilson\", password: \"password123\", fullName: \"Marcus Wilson\", email: \"mwilson@company.com\", isActive: true },\n  { username: \"dgarcia\", password: \"password123\", fullName: \"Diana Garcia\", email: \"dgarcia@company.com\", isActive: true },\n  { username: \"tkim\", password: \"password123\", fullName: \"Tyler Kim\", email: \"tkim@company.com\", isActive: true },\n  { username: \"landerson\", password: \"password123\", fullName: \"Lisa Anderson\", email: \"landerson@company.com\", isActive: true },\n  { username: \"emartinez\", password: \"password123\", fullName: \"Eduardo Martinez\", email: \"emartinez@company.com\", isActive: true },\n  { username: \"nbrown\", password: \"password123\", fullName: \"Nina Brown\", email: \"nbrown@company.com\", isActive: true },\n  { username: \"kpark\", password: \"password123\", fullName: \"Kevin Park\", email: \"kpark@company.com\", isActive: true },\n  { username: \"lrobinson\", password: \"password123\", fullName: \"Laura Robinson\", email: \"lrobinson@company.com\", isActive: true },\n  { username: \"dcarter\", password: \"password123\", fullName: \"David Carter\", email: \"dcarter@company.com\", isActive: true },\n  { username: \"mrodriguez\", password: \"password123\", fullName: \"Maria Rodriguez\", email: \"mrodriguez@company.com\", isActive: true },\n  { username: \"atravers\", password: \"password123\", fullName: \"Aiden Travers\", email: \"atravers@company.com\", isActive: true },\n  { username: \"jgillespie\", password: \"password123\", fullName: \"Jordan Gillespie\", email: \"jgillespie@company.com\", isActive: true },\n  { username: \"slopez\", password: \"password123\", fullName: \"Sofia Lopez\", email: \"slopez@company.com\", isActive: true },\n  { username: \"jnguyen\", password: \"password123\", fullName: \"Jason Nguyen\", email: \"jnguyen@company.com\", isActive: true }\n];\n\n// Epic templates for each project\nconst epicTemplates = [\n  // Enterprise Resource Planning System epics\n  [\n    { title: \"Finance Module\", description: \"Complete financial management system with accounting features\" },\n    { title: \"Human Resources Module\", description: \"Employee management, payroll, and benefits administration\" },\n    { title: \"Inventory Management\", description: \"Real-time inventory tracking and management\" }\n  ],\n  // Customer Experience Platform epics\n  [\n    { title: \"Customer Portal\", description: \"Self-service customer portal with account management\" },\n    { title: \"Support Ticketing System\", description: \"Comprehensive support ticket management workflow\" },\n    { title: \"Customer Analytics\", description: \"Advanced analytics and reporting on customer behavior\" }\n  ],\n  // Data Analytics Dashboard epics\n  [\n    { title: \"Data Visualization\", description: \"Interactive charts and visual data representations\" },\n    { title: \"Predictive Analytics\", description: \"Machine learning models for business forecasting\" },\n    { title: \"Reporting System\", description: \"Customizable report generation and scheduling\" }\n  ],\n  // Cloud Migration Initiative epics\n  [\n    { title: \"Infrastructure Assessment\", description: \"Evaluate existing systems for migration readiness\" },\n    { title: \"Migration Strategy\", description: \"Develop comprehensive cloud migration roadmap\" },\n    { title: \"Cloud Implementation\", description: \"Execute phased migration to cloud infrastructure\" }\n  ],\n  // Mobile Workforce Solution epics\n  [\n    { title: \"Field Operations\", description: \"Mobile tools for field service management\" },\n    { title: \"Team Collaboration\", description: \"Real-time communication and collaboration features\" },\n    { title: \"Offline Capabilities\", description: \"Robust offline functionality with data synchronization\" }\n  ]\n];\n\n// Feature templates for each epic\nconst featureTemplates = [\n  // Finance Module features\n  [\n    { title: \"General Ledger\", description: \"Core accounting system with multi-currency support\" },\n    { title: \"Accounts Payable\", description: \"Vendor management and payment processing\" },\n    { title: \"Accounts Receivable\", description: \"Customer invoicing and payment collection\" },\n    { title: \"Financial Reporting\", description: \"Comprehensive financial statements and reports\" }\n  ],\n  // Human Resources Module features\n  [\n    { title: \"Employee Records\", description: \"Centralized employee information management\" },\n    { title: \"Payroll Processing\", description: \"Automated payroll calculations and tax handling\" },\n    { title: \"Benefits Administration\", description: \"Health, retirement, and other benefits management\" },\n    { title: \"Time & Attendance\", description: \"Time tracking and absence management\" }\n  ],\n  // Inventory Management features\n  [\n    { title: \"Item Tracking\", description: \"Real-time inventory tracking with barcode support\" },\n    { title: \"Warehouse Management\", description: \"Multiple location inventory control\" },\n    { title: \"Order Processing\", description: \"Purchase and sales order management\" },\n    { title: \"Inventory Analytics\", description: \"Inventory forecasting and optimization\" }\n  ],\n  // Customer Portal features\n  [\n    { title: \"Account Management\", description: \"Self-service account management capabilities\" },\n    { title: \"Order History\", description: \"Complete order history and tracking\" },\n    { title: \"Preference Center\", description: \"Customer preference and communication settings\" },\n    { title: \"Document Access\", description: \"Secure access to statements and documents\" }\n  ],\n  // Support Ticketing features\n  [\n    { title: \"Ticket Creation\", description: \"Multi-channel ticket submission\" },\n    { title: \"Ticket Routing\", description: \"Intelligent routing based on issue type\" },\n    { title: \"Knowledge Base\", description: \"Self-service knowledge base integration\" },\n    { title: \"SLA Management\", description: \"Service level agreement tracking and alerts\" }\n  ],\n  // Customer Analytics features\n  [\n    { title: \"Behavior Tracking\", description: \"Customer behavior and interaction analysis\" },\n    { title: \"Segmentation Tools\", description: \"Advanced customer segmentation capabilities\" },\n    { title: \"Predictive Models\", description: \"Churn prediction and lifetime value modeling\" },\n    { title: \"Reporting Dashboard\", description: \"Interactive customer analytics dashboard\" }\n  ],\n  // Data Visualization features\n  [\n    { title: \"Interactive Charts\", description: \"Dynamic, interactive data visualization\" },\n    { title: \"Custom Dashboards\", description: \"User-configurable dashboard layouts\" },\n    { title: \"Export Capabilities\", description: \"Multiple export formats for visualizations\" },\n    { title: \"Real-time Updates\", description: \"Live data feeds and visualization updates\" }\n  ],\n  // Predictive Analytics features\n  [\n    { title: \"Forecasting Models\", description: \"Time-series forecasting for business metrics\" },\n    { title: \"Anomaly Detection\", description: \"Automated detection of data anomalies\" },\n    { title: \"Recommendation Engine\", description: \"Personalized recommendations based on ML\" },\n    { title: \"Model Management\", description: \"Model training and version management\" }\n  ],\n  // Reporting System features\n  [\n    { title: \"Report Builder\", description: \"Drag-and-drop custom report builder\" },\n    { title: \"Scheduled Reports\", description: \"Automated report generation and distribution\" },\n    { title: \"Data Integration\", description: \"Multi-source data integration for reporting\" },\n    { title: \"Compliance Reports\", description: \"Pre-built compliance and regulatory reports\" }\n  ],\n  // Infrastructure Assessment features\n  [\n    { title: \"System Inventory\", description: \"Comprehensive system and application inventory\" },\n    { title: \"Dependency Mapping\", description: \"Application dependency visualization\" },\n    { title: \"Performance Analysis\", description: \"System performance and capacity analysis\" },\n    { title: \"Risk Assessment\", description: \"Migration risk identification and mitigation\" }\n  ],\n  // Migration Strategy features\n  [\n    { title: \"Phasing Plan\", description: \"Multi-phase migration strategy development\" },\n    { title: \"Cost Analysis\", description: \"Detailed cost-benefit analysis for migration\" },\n    { title: \"Resource Allocation\", description: \"Team and resource planning for migration\" },\n    { title: \"Rollback Planning\", description: \"Contingency and rollback plan development\" }\n  ],\n  // Cloud Implementation features\n  [\n    { title: \"Environment Setup\", description: \"Cloud environment configuration and security\" },\n    { title: \"Data Migration\", description: \"Secure data transfer to cloud platforms\" },\n    { title: \"Application Refactoring\", description: \"Application modifications for cloud optimization\" },\n    { title: \"Monitoring Implementation\", description: \"Cloud-native monitoring and alerting setup\" }\n  ],\n  // Field Operations features\n  [\n    { title: \"Job Assignment\", description: \"Dynamic assignment and scheduling of field work\" },\n    { title: \"Location Tracking\", description: \"GPS-based location tracking and routing\" },\n    { title: \"Digital Forms\", description: \"Mobile forms for field data collection\" },\n    { title: \"Photo Documentation\", description: \"Photo capture and annotation in the field\" }\n  ],\n  // Team Collaboration features\n  [\n    { title: \"Group Messaging\", description: \"Team and project-based messaging\" },\n    { title: \"File Sharing\", description: \"Secure document sharing and collaboration\" },\n    { title: \"Video Conferencing\", description: \"Integrated video calls and meetings\" },\n    { title: \"Task Management\", description: \"Collaborative task assignment and tracking\" }\n  ],\n  // Offline Capabilities features\n  [\n    { title: \"Offline Data Access\", description: \"Access to critical data without connectivity\" },\n    { title: \"Form Submission\", description: \"Offline form completion and queued submission\" },\n    { title: \"Conflict Resolution\", description: \"Smart handling of data conflicts after sync\" },\n    { title: \"Selective Sync\", description: \"Bandwidth-efficient selective data synchronization\" }\n  ]\n];\n\n// Story templates for features\nconst storyTemplates = [\n  { title: \"Design Implementation\", description: \"Implement the approved design for this feature\" },\n  { title: \"API Integration\", description: \"Integrate with backend APIs for data exchange\" },\n  { title: \"Unit Test Coverage\", description: \"Ensure complete unit test coverage for the feature\" },\n  { title: \"Performance Optimization\", description: \"Optimize performance for the feature\" },\n  { title: \"Documentation\", description: \"Create user and technical documentation\" }\n];\n\n// Task templates\nconst taskTemplates = [\n  { title: \"Create wireframes\", description: \"Create wireframes for design review\" },\n  { title: \"Implement frontend components\", description: \"Create and style the necessary UI components\" },\n  { title: \"Write API endpoints\", description: \"Create API endpoints for data operations\" },\n  { title: \"Write unit tests\", description: \"Create comprehensive unit tests\" },\n  { title: \"Perform code review\", description: \"Review code for quality and standards\" },\n  { title: \"Integration testing\", description: \"Test integration points between components\" },\n  { title: \"Accessibility testing\", description: \"Test for accessibility compliance\" },\n  { title: \"Performance testing\", description: \"Benchmark and optimize performance\" },\n  { title: \"Documentation\", description: \"Write technical documentation\" },\n  { title: \"Final QA\", description: \"Perform final quality assurance checks\" }\n];\n\n// Bug templates\nconst bugTemplates = [\n  { title: \"Layout issues in mobile view\", description: \"UI layout breaks on smaller mobile screens\" },\n  { title: \"Authentication fails with special characters\", description: \"Users with special characters in credentials can't log in\" },\n  { title: \"Performance degradation with large datasets\", description: \"System slows down with datasets over certain size\" },\n  { title: \"Cross-browser compatibility issue\", description: \"Feature doesn't work correctly in specific browsers\" },\n  { title: \"Memory leak in component\", description: \"Component doesn't clean up resources properly\" }\n];\n\n/**\n * Clear all existing data from the database\n */\nexport async function clearAllData() {\n  try {\n    log(\"Clearing all existing data...\");\n    // Import necessary modules\n    const db = await import(\"./db\").then(module => module.db);\n    const { sql } = await import(\"drizzle-orm\");\n    const {\n      workItemHistory,\n      comments,\n      attachments,\n      workItems,\n      teamMembers,\n      projects,\n      teams,\n      users\n    } = await import(\"@shared/schema\");\n    \n    // Delete all work items first (due to foreign key constraints)\n    await db.delete(workItemHistory);\n    await db.delete(comments);\n    await db.delete(attachments);\n    await db.delete(workItems);\n    \n    // Delete team members and projects\n    await db.delete(teamMembers);\n    await db.delete(projects);\n    \n    // Delete teams\n    await db.delete(teams);\n    \n    // Delete users (except admin)\n    await db.delete(users).where(sql`id > 1`);\n    \n    log(\"All data cleared successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error clearing data:\", error);\n    return false;\n  }\n}\n\n/**\n * Generate sample data for demonstration purposes\n */\nexport async function generateSampleData() {\n  try {\n    // Check if we already have more than our test user\n    const users = await storage.getUsers();\n    if (users.length > 1) {\n      log(\"Sample data already exists, skipping generation\");\n      return;\n    }\n\n    log(\"Generating sample data...\");\n    \n    // Get existing test user or create a new admin user if none exists\n    let adminUser = users[0];\n    if (!adminUser) {\n      adminUser = await storage.createUser({\n        username: \"admin\",\n        password: \"admin123\",\n        fullName: \"Admin User\",\n        email: \"admin@company.com\",\n        isActive: true,\n      });\n      log(`Created admin user with ID ${adminUser.id}`);\n    }\n\n    // Create users\n    const createdUsers = [adminUser];\n    for (const user of userData) {\n      try {\n        const createdUser = await storage.createUser(user);\n        createdUsers.push(createdUser);\n        log(`Created user: ${createdUser.fullName}`);\n      } catch (error) {\n        console.error(`Error creating user ${user.username}:`, error);\n      }\n    }\n\n    // Create teams\n    const createdTeams = [];\n    for (const teamData of teamNames) {\n      try {\n        const team = await storage.createTeam({\n          name: teamData.name,\n          description: teamData.description,\n          createdBy: adminUser.id,\n          isActive: true,\n        });\n        createdTeams.push(team);\n        log(`Created team: ${team.name}`);\n\n        // Add team members (4 per team)\n        const availableUsers = [...createdUsers];\n        // Always add admin to each team\n        await storage.addTeamMember({\n          teamId: team.id,\n          userId: adminUser.id,\n          role: \"ADMIN\",\n        });\n        \n        // Add 3 more random members\n        for (let i = 0; i < 3; i++) {\n          // Remove admin and get a random user\n          const randomIndex = Math.floor(Math.random() * (availableUsers.length - 1)) + 1;\n          const user = availableUsers[randomIndex];\n          // Remove this user from available pool\n          availableUsers.splice(randomIndex, 1);\n          \n          await storage.addTeamMember({\n            teamId: team.id,\n            userId: user.id,\n            role: \"MEMBER\",\n          });\n          log(`Added ${user.fullName} to ${team.name}`);\n        }\n      } catch (error) {\n        console.error(`Error creating team ${teamData.name}:`, error);\n      }\n    }\n\n    // Create projects (assign to random teams)\n    const createdProjects = [];\n    for (let i = 0; i < projectData.length; i++) {\n      try {\n        const projectInfo = projectData[i];\n        const randomTeam = createdTeams[Math.floor(Math.random() * createdTeams.length)];\n        \n        const project = await storage.createProject({\n          name: projectInfo.name,\n          key: projectInfo.key,\n          description: projectInfo.description,\n          status: \"ACTIVE\",\n          createdBy: adminUser.id,\n          teamId: randomTeam.id,\n          startDate: new Date(),\n          targetDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days from now\n        });\n        \n        createdProjects.push(project);\n        log(`Created project: ${project.name}`);\n\n        // Create epics for this project\n        const epicTemplatesForProject = epicTemplates[i];\n        for (const epicTemplate of epicTemplatesForProject) {\n          const randomAssignee = createdUsers[Math.floor(Math.random() * createdUsers.length)];\n          \n          const epic = await storage.createWorkItem({\n            title: epicTemplate.title,\n            description: epicTemplate.description,\n            type: \"EPIC\",\n            status: \"IN_PROGRESS\",\n            priority: \"HIGH\",\n            projectId: project.id,\n            parentId: null,\n            assigneeId: randomAssignee.id,\n            reporterId: adminUser.id,\n            estimate: 40,\n            startDate: new Date(),\n            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n            externalId: `${project.key}-E${i + 1}${epicTemplatesForProject.indexOf(epicTemplate) + 1}`\n          });\n          \n          log(`Created epic: ${epic.title}`);\n          \n          // Create features for this epic\n          const featureIndex = epicTemplatesForProject.indexOf(epicTemplate) % featureTemplates.length;\n          const featureTemplatesForEpic = featureTemplates[featureIndex];\n          \n          for (const featureTemplate of featureTemplatesForEpic) {\n            const randomAssignee = createdUsers[Math.floor(Math.random() * createdUsers.length)];\n            \n            const feature = await storage.createWorkItem({\n              title: featureTemplate.title,\n              description: featureTemplate.description,\n              type: \"FEATURE\",\n              status: \"TODO\",\n              priority: \"MEDIUM\",\n              projectId: project.id,\n              parentId: epic.id,\n              assigneeId: randomAssignee.id,\n              reporterId: adminUser.id,\n              estimate: 20,\n              externalId: `${project.key}-F${i + 1}${featureTemplatesForEpic.indexOf(featureTemplate) + 1}`\n            });\n            \n            log(`Created feature: ${feature.title}`);\n            \n            // Create stories for each feature\n            for (let j = 0; j < 3; j++) {\n              const storyTemplate = storyTemplates[j % storyTemplates.length];\n              const randomAssignee = createdUsers[Math.floor(Math.random() * createdUsers.length)];\n              \n              const story = await storage.createWorkItem({\n                title: `${featureTemplate.title} ${storyTemplate.title}`,\n                description: storyTemplate.description,\n                type: \"STORY\",\n                status: \"TODO\",\n                priority: \"MEDIUM\",\n                projectId: project.id,\n                parentId: feature.id,\n                assigneeId: randomAssignee.id,\n                reporterId: adminUser.id,\n                estimate: 8,\n                externalId: `${project.key}-S${i + 1}${j + 1}`\n              });\n              \n              // Create tasks for this story (3-4 tasks per story)\n              const numTasks = Math.floor(Math.random() * 2) + 3; // 3-4 tasks\n              for (let k = 0; k < numTasks; k++) {\n                const taskTemplate = taskTemplates[k % taskTemplates.length];\n                const randomAssignee = createdUsers[Math.floor(Math.random() * createdUsers.length)];\n                \n                await storage.createWorkItem({\n                  title: `${taskTemplate.title} for ${storyTemplate.title}`,\n                  description: taskTemplate.description,\n                  type: \"TASK\",\n                  status: \"TODO\",\n                  priority: \"MEDIUM\",\n                  projectId: project.id,\n                  parentId: story.id,\n                  assigneeId: randomAssignee.id,\n                  reporterId: adminUser.id,\n                  estimate: 4,\n                  externalId: `${project.key}-T${i + 1}${j + 1}${k + 1}`\n                });\n              }\n              \n              // Create 1-2 bugs for some stories (30% chance)\n              if (Math.random() < 0.3) {\n                const numBugs = Math.floor(Math.random() * 2) + 1; // 1-2 bugs\n                for (let k = 0; k < numBugs; k++) {\n                  const bugTemplate = bugTemplates[Math.floor(Math.random() * bugTemplates.length)];\n                  const randomAssignee = createdUsers[Math.floor(Math.random() * createdUsers.length)];\n                  \n                  await storage.createWorkItem({\n                    title: bugTemplate.title,\n                    description: bugTemplate.description,\n                    type: \"BUG\",\n                    status: \"TODO\",\n                    priority: \"HIGH\",\n                    projectId: project.id,\n                    parentId: story.id,\n                    assigneeId: randomAssignee.id,\n                    reporterId: adminUser.id,\n                    estimate: 3,\n                    externalId: `${project.key}-B${i + 1}${j + 1}${k + 1}`\n                  });\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error(`Error creating project ${projectData[i].name}:`, error);\n      }\n    }\n\n    log(\"Sample data generation completed successfully\");\n    \n  } catch (error) {\n    console.error(\"Error generating sample data:\", error);\n  }\n}\n\n/**\n * Additional realistic work item templates for different projects\n */\nconst additionalWorkItemTemplates = {\n  epics: [\n    // Project Management Tool epics\n    { title: \"Reporting and Analytics\", description: \"Comprehensive reporting and analytics capabilities\" },\n    { title: \"Integration Framework\", description: \"Framework for integration with external systems and tools\" },\n    { title: \"Resource Management\", description: \"Tools and features for effective resource management\" },\n    \n    // Customer Portal epics\n    { title: \"Customer Support Module\", description: \"Integrated customer support and ticketing functionality\" },\n    { title: \"User Profile Enhancement\", description: \"Enhanced user profiles with preferences and history\" },\n    { title: \"Document Management\", description: \"Document upload, management, and sharing capabilities\" },\n    \n    // Mobile App epics\n    { title: \"Media Sharing\", description: \"Rich media sharing and processing features\" },\n    { title: \"Social Features\", description: \"Social networking capabilities and friend connections\" },\n    { title: \"Location Services\", description: \"GPS and location-based services integration\" },\n    \n    // Infrastructure epics\n    { title: \"Disaster Recovery\", description: \"Comprehensive disaster recovery and business continuity\" },\n    { title: \"Security Infrastructure\", description: \"Enhanced security measures and compliance capabilities\" },\n    { title: \"Performance Optimization\", description: \"System-wide performance enhancements and optimizations\" }\n  ],\n  \n  features: [\n    // Reporting features\n    { title: \"Custom Report Builder\", description: \"Interface for creating custom reports with data visualization\" },\n    { title: \"Scheduled Reports\", description: \"Capability to schedule automated report generation and delivery\" },\n    { title: \"Data Export Options\", description: \"Multiple export formats for reports and raw data\" },\n    \n    // Integration features\n    { title: \"REST API Framework\", description: \"Comprehensive REST API for external integrations\" },\n    { title: \"Webhook Support\", description: \"Webhook system for real-time event notifications\" },\n    { title: \"Third-party OAuth\", description: \"Integration with third-party OAuth providers\" },\n    \n    // Resource Management features\n    { title: \"Resource Allocation\", description: \"Tools for allocating and tracking resources across projects\" },\n    { title: \"Capacity Planning\", description: \"Capacity planning and forecasting tools\" },\n    { title: \"Time Tracking\", description: \"Time tracking and reporting capabilities\" },\n    \n    // Customer Support features\n    { title: \"Ticket System\", description: \"Support ticket creation and management\" },\n    { title: \"Knowledge Base\", description: \"Searchable knowledge base for customer self-service\" },\n    { title: \"Live Chat\", description: \"Integrated live chat support capabilities\" },\n    \n    // User Profile features\n    { title: \"Activity History\", description: \"Comprehensive user activity history and timeline\" },\n    { title: \"Preference Management\", description: \"User preference and settings management\" },\n    { title: \"Subscription Management\", description: \"User subscription and notification preferences\" },\n    \n    // Document Management features\n    { title: \"Document Upload\", description: \"Secure document upload with metadata\" },\n    { title: \"Version Control\", description: \"Document version control and history\" },\n    { title: \"Document Sharing\", description: \"Secure document sharing with permission control\" },\n    \n    // Media Sharing features\n    { title: \"Photo Library\", description: \"Photo management with albums and tagging\" },\n    { title: \"Video Processing\", description: \"Video upload and streaming capabilities\" },\n    { title: \"Media Comments\", description: \"Commenting and interaction features for media items\" },\n    \n    // Social features\n    { title: \"User Connections\", description: \"Friend/connection management system\" },\n    { title: \"Activity Feed\", description: \"Social activity feed with customization options\" },\n    { title: \"Messaging System\", description: \"Private messaging between users\" },\n    \n    // Location features\n    { title: \"Location Tracking\", description: \"Real-time location tracking and history\" },\n    { title: \"Geofencing\", description: \"Geofence creation and event triggering\" },\n    { title: \"Location Sharing\", description: \"Temporary location sharing with other users\" },\n    \n    // Disaster Recovery features\n    { title: \"Backup System\", description: \"Automated backup system with multiple storage options\" },\n    { title: \"Recovery Procedures\", description: \"Streamlined recovery procedures and testing\" },\n    { title: \"High Availability\", description: \"High availability infrastructure setup\" },\n    \n    // Security features\n    { title: \"Advanced Authentication\", description: \"Multi-factor and biometric authentication options\" },\n    { title: \"Audit Logging\", description: \"Comprehensive audit logging system\" },\n    { title: \"Compliance Reports\", description: \"Automated compliance reporting and certification\" },\n    \n    // Performance features\n    { title: \"Caching System\", description: \"Intelligent caching for performance optimization\" },\n    { title: \"Load Balancing\", description: \"Advanced load balancing for high traffic scenarios\" },\n    { title: \"Database Optimization\", description: \"Database query optimization and index management\" }\n  ],\n  \n  stories: [\n    { title: \"User Interface Implementation\", description: \"Implement the user interface design for this feature\" },\n    { title: \"Backend Service Development\", description: \"Develop backend services to support this feature\" },\n    { title: \"API Documentation\", description: \"Create detailed API documentation for developers\" },\n    { title: \"Database Schema Enhancement\", description: \"Enhance database schema to support this feature\" },\n    { title: \"Security Review\", description: \"Complete security review and implement recommendations\" },\n    { title: \"Mobile Responsiveness\", description: \"Ensure feature works well on all mobile devices\" },\n    { title: \"Performance Testing\", description: \"Conduct performance testing and optimization\" },\n    { title: \"User Acceptance Testing\", description: \"Coordinate user acceptance testing process\" },\n    { title: \"Cross-browser Compatibility\", description: \"Ensure compatibility across major browsers\" },\n    { title: \"Integration Testing\", description: \"Test integration with other system components\" },\n    { title: \"Automated Test Development\", description: \"Develop automated tests for this feature\" },\n    { title: \"Documentation Update\", description: \"Update user and technical documentation\" }\n  ],\n  \n  tasks: [\n    { title: \"Design wireframes\", description: \"Create detailed wireframes for UI components\" },\n    { title: \"Implement frontend components\", description: \"Develop and style necessary UI components\" },\n    { title: \"Create database migrations\", description: \"Write and test database migration scripts\" },\n    { title: \"Write API endpoints\", description: \"Implement API endpoints following REST best practices\" },\n    { title: \"Implement authentication logic\", description: \"Add proper authentication and authorization\" },\n    { title: \"Create validation logic\", description: \"Implement input validation and error handling\" },\n    { title: \"Write unit tests\", description: \"Create comprehensive unit tests for code coverage\" },\n    { title: \"Implement integration tests\", description: \"Write end-to-end and integration tests\" },\n    { title: \"Optimize database queries\", description: \"Review and optimize database queries for performance\" },\n    { title: \"Add error handling\", description: \"Implement proper error handling and logging\" },\n    { title: \"Perform code review\", description: \"Complete code review and address feedback\" },\n    { title: \"Set up monitoring\", description: \"Configure monitoring and alerting for new feature\" },\n    { title: \"Create user documentation\", description: \"Write user-facing documentation and help content\" },\n    { title: \"Implement logging\", description: \"Add appropriate logging for tracking and debugging\" },\n    { title: \"Review accessibility\", description: \"Ensure UI meets accessibility standards\" },\n    { title: \"Setup feature flags\", description: \"Implement feature flags for controlled rollout\" },\n    { title: \"Create demo script\", description: \"Prepare demonstration script for stakeholders\" },\n    { title: \"Performance profiling\", description: \"Identify and fix performance bottlenecks\" },\n    { title: \"Security testing\", description: \"Perform security testing and vulnerability assessment\" },\n    { title: \"Cross-browser testing\", description: \"Test functionality across different browsers\" }\n  ],\n  \n  bugs: [\n    { title: \"Form submission fails with special characters\", description: \"Users cannot submit forms containing special characters in text fields\" },\n    { title: \"Session timeout occurs too quickly\", description: \"Users are being logged out after only a few minutes of inactivity\" },\n    { title: \"Data not refreshing automatically\", description: \"Updated data doesn't appear until page refresh\" },\n    { title: \"Error when uploading large files\", description: \"System errors when uploading files larger than 10MB\" },\n    { title: \"Mobile menu not working on iOS\", description: \"Navigation menu doesn't open correctly on iOS devices\" },\n    { title: \"Export feature generates corrupted files\", description: \"PDF exports are sometimes corrupted with certain data\" },\n    { title: \"Search results missing recent items\", description: \"Recently added items do not appear in search results\" },\n    { title: \"Date filters not respecting timezone\", description: \"Date filtering shows incorrect results due to timezone issues\" },\n    { title: \"Password reset emails not received\", description: \"Some users report not receiving password reset emails\" },\n    { title: \"High CPU usage during PDF generation\", description: \"Server experiences high CPU spikes during PDF exports\" },\n    { title: \"UI breaks at specific viewport widths\", description: \"Layout issues appear between 768px and 992px screen widths\" },\n    { title: \"Permission denied error for valid users\", description: \"Some users with correct permissions see access denied\" },\n    { title: \"Drag and drop not working in Firefox\", description: \"Drag and drop functionality fails specifically in Firefox\" },\n    { title: \"Notifications show incorrect counts\", description: \"Notification badge shows wrong number of unread items\" },\n    { title: \"Report totals calculating incorrectly\", description: \"Summary totals in reports don't match detailed line items\" }\n  ]\n};\n\n/**\n * Generate additional 150 realistic work items across all projects\n */\nexport async function generateAdditionalData() {\n  try {\n    // Get existing projects\n    const projects = await storage.getProjects();\n    if (projects.length === 0) {\n      log(\"No projects found for adding additional data\");\n      return;\n    }\n\n    // Get existing users for assignments\n    const users = await storage.getUsers();\n    if (users.length === 0) {\n      log(\"No users found for assignments\");\n      return;\n    }\n    \n    // Admin user for reporting\n    const adminUser = users[0];\n    \n    log(\"Generating additional 150 work items across projects...\");\n    \n    // We'll distribute the 150 items across all projects\n    // with a mix of epics, features, stories, tasks, and bugs\n    const itemsPerProject = Math.floor(150 / projects.length);\n    let totalItemsCreated = 0;\n    \n    // Status options for variety\n    const statusOptions = [\"TODO\", \"IN_PROGRESS\", \"DONE\"];\n    const priorityOptions = [\"LOW\", \"MEDIUM\", \"HIGH\", \"CRITICAL\"];\n    \n    // Distribution percentages (rough guidelines)\n    // 5% Epics, 15% Features, 30% Stories, 35% Tasks, 15% Bugs\n    \n    for (const project of projects) {\n      // Track items created for this project\n      let projectItemsCreated = 0;\n      \n      // Create 1-2 new epics per project\n      const numEpics = Math.min(2, Math.ceil(itemsPerProject * 0.05));\n      \n      for (let e = 0; e < numEpics && totalItemsCreated < 150; e++) {\n        // Get a random epic template\n        const epicTemplate = additionalWorkItemTemplates.epics[Math.floor(Math.random() * additionalWorkItemTemplates.epics.length)];\n        const randomAssignee = users[Math.floor(Math.random() * users.length)];\n        const epicStatus = statusOptions[Math.floor(Math.random() * statusOptions.length)];\n        \n        // Create a unique external ID\n        const epicExternalId = `${project.key}-E${Date.now().toString().slice(-4)}-${e + 1}`;\n        \n        // Create the epic\n        const epic = await storage.createWorkItem({\n          title: epicTemplate.title,\n          description: epicTemplate.description,\n          type: \"EPIC\",\n          status: epicStatus,\n          priority: priorityOptions[Math.floor(Math.random() * priorityOptions.length)],\n          projectId: project.id,\n          parentId: null,\n          assigneeId: randomAssignee.id,\n          reporterId: adminUser.id,\n          estimate: 30 + Math.floor(Math.random() * 30), // 30-60 hours\n          startDate: new Date(),\n          endDate: new Date(Date.now() + (30 + Math.floor(Math.random() * 60)) * 24 * 60 * 60 * 1000), // 30-90 days\n          externalId: epicExternalId\n        });\n        \n        totalItemsCreated++;\n        projectItemsCreated++;\n        \n        // Create 3-5 features per epic (15% of total items)\n        const numFeatures = Math.min(5, Math.ceil((itemsPerProject * 0.15) / numEpics));\n        \n        for (let f = 0; f < numFeatures && totalItemsCreated < 150; f++) {\n          // Get a random feature template\n          const featureTemplate = additionalWorkItemTemplates.features[Math.floor(Math.random() * additionalWorkItemTemplates.features.length)];\n          const randomAssignee = users[Math.floor(Math.random() * users.length)];\n          const featureStatus = statusOptions[Math.floor(Math.random() * statusOptions.length)];\n          \n          // Create a unique external ID\n          const featureExternalId = `${project.key}-F${Date.now().toString().slice(-4)}-${f + 1}`;\n          \n          // Create the feature\n          const feature = await storage.createWorkItem({\n            title: featureTemplate.title,\n            description: featureTemplate.description,\n            type: \"FEATURE\",\n            status: featureStatus,\n            priority: priorityOptions[Math.floor(Math.random() * priorityOptions.length)],\n            projectId: project.id,\n            parentId: epic.id,\n            assigneeId: randomAssignee.id,\n            reporterId: adminUser.id,\n            estimate: 15 + Math.floor(Math.random() * 16), // 15-30 hours\n            startDate: epicStatus === \"TODO\" ? null : new Date(),\n            endDate: epicStatus === \"DONE\" ? new Date() : null,\n            externalId: featureExternalId\n          });\n          \n          totalItemsCreated++;\n          projectItemsCreated++;\n          \n          // Create 4-6 stories per feature (30% of total items)\n          const numStories = Math.min(6, Math.ceil((itemsPerProject * 0.3) / (numEpics * numFeatures)));\n          \n          for (let s = 0; s < numStories && totalItemsCreated < 150; s++) {\n            // Get a random story template\n            const storyTemplate = additionalWorkItemTemplates.stories[Math.floor(Math.random() * additionalWorkItemTemplates.stories.length)];\n            const randomAssignee = users[Math.floor(Math.random() * users.length)];\n            const storyStatus = featureStatus === \"TODO\" ? \"TODO\" : \n                               featureStatus === \"DONE\" ? \"DONE\" : \n                               statusOptions[Math.floor(Math.random() * statusOptions.length)];\n            \n            // Create a unique external ID\n            const storyExternalId = `${project.key}-S${Date.now().toString().slice(-4)}-${s + 1}`;\n            \n            // Create the story\n            const story = await storage.createWorkItem({\n              title: `${featureTemplate.title} - ${storyTemplate.title}`,\n              description: storyTemplate.description,\n              type: \"STORY\",\n              status: storyStatus,\n              priority: priorityOptions[Math.floor(Math.random() * priorityOptions.length)],\n              projectId: project.id,\n              parentId: feature.id,\n              assigneeId: randomAssignee.id,\n              reporterId: adminUser.id,\n              estimate: 5 + Math.floor(Math.random() * 6), // 5-10 hours\n              externalId: storyExternalId\n            });\n            \n            totalItemsCreated++;\n            projectItemsCreated++;\n            \n            // Create 2-4 tasks per story (35% of total items)\n            const numTasks = Math.min(4, Math.ceil((itemsPerProject * 0.35) / (numEpics * numFeatures * numStories)));\n            \n            for (let t = 0; t < numTasks && totalItemsCreated < 150; t++) {\n              // Get a random task template\n              const taskTemplate = additionalWorkItemTemplates.tasks[Math.floor(Math.random() * additionalWorkItemTemplates.tasks.length)];\n              const randomAssignee = users[Math.floor(Math.random() * users.length)];\n              const taskStatus = storyStatus === \"TODO\" ? \"TODO\" : \n                               storyStatus === \"DONE\" ? \"DONE\" : \n                               statusOptions[Math.floor(Math.random() * statusOptions.length)];\n              \n              // Create a unique external ID\n              const taskExternalId = `${project.key}-T${Date.now().toString().slice(-4)}-${t + 1}`;\n              \n              // Create the task\n              await storage.createWorkItem({\n                title: `${taskTemplate.title} for ${storyTemplate.title}`,\n                description: taskTemplate.description,\n                type: \"TASK\",\n                status: taskStatus,\n                priority: priorityOptions[Math.floor(Math.random() * priorityOptions.length)],\n                projectId: project.id,\n                parentId: story.id,\n                assigneeId: randomAssignee.id,\n                reporterId: adminUser.id,\n                estimate: 1 + Math.floor(Math.random() * 5), // 1-5 hours\n                externalId: taskExternalId\n              });\n              \n              totalItemsCreated++;\n              projectItemsCreated++;\n            }\n            \n            // Maybe create 1-2 bugs per story (15% of total items, 50% chance per story)\n            if (Math.random() < 0.5) {\n              const numBugs = Math.min(2, Math.ceil((itemsPerProject * 0.15) / (numEpics * numFeatures * numStories * 0.5)));\n              \n              for (let b = 0; b < numBugs && totalItemsCreated < 150; b++) {\n                // Get a random bug template\n                const bugTemplate = additionalWorkItemTemplates.bugs[Math.floor(Math.random() * additionalWorkItemTemplates.bugs.length)];\n                const randomAssignee = users[Math.floor(Math.random() * users.length)];\n                \n                // Bugs can be in various states regardless of parent\n                const bugStatus = statusOptions[Math.floor(Math.random() * statusOptions.length)];\n                \n                // Create a unique external ID\n                const bugExternalId = `${project.key}-B${Date.now().toString().slice(-4)}-${b + 1}`;\n                \n                // Create the bug\n                await storage.createWorkItem({\n                  title: bugTemplate.title,\n                  description: bugTemplate.description,\n                  type: \"BUG\",\n                  status: bugStatus,\n                  priority: priorityOptions[Math.floor(Math.random() * 3) + 1], // Bugs tend to be MEDIUM-CRITICAL\n                  projectId: project.id,\n                  parentId: story.id,\n                  assigneeId: randomAssignee.id,\n                  reporterId: adminUser.id,\n                  estimate: 1 + Math.floor(Math.random() * 4), // 1-4 hours\n                  externalId: bugExternalId\n                });\n                \n                totalItemsCreated++;\n                projectItemsCreated++;\n              }\n            }\n            \n            // Break if we've reached our target\n            if (totalItemsCreated >= 150) break;\n          }\n          \n          // Break if we've reached our target\n          if (totalItemsCreated >= 150) break;\n        }\n        \n        // Break if we've reached our target\n        if (totalItemsCreated >= 150) break;\n      }\n      \n      log(`Created ${projectItemsCreated} items for project: ${project.name}`);\n      \n      // Break if we've reached our target\n      if (totalItemsCreated >= 150) break;\n    }\n    \n    log(`Successfully generated ${totalItemsCreated} additional work items across ${projects.length} projects`);\n    \n  } catch (error) {\n    console.error(\"Error generating additional data:\", error);\n  }\n}","size_bytes":44985},"server/db.ts":{"content":"import dotenv from 'dotenv';\ndotenv.config(); // ✅ Make sure .env is loaded\n\nimport mysql from 'mysql2/promise';\nimport { drizzle } from 'drizzle-orm/mysql2';\nimport * as schema from '@shared/schema';\n\n// Check if DATABASE_URL is available and valid for MySQL\nlet db: any;\n\nif (process.env.DATABASE_URL && process.env.DATABASE_URL.startsWith('mysql://')) {\n  const connection = mysql.createPool(process.env.DATABASE_URL);\n  db = drizzle(connection, { schema, mode: \"default\" });\n} else {\n  console.log('MySQL DATABASE_URL not found or invalid. Using in-memory storage.');\n  // Create a mock db object for in-memory storage\n  db = null;\n}\n\nexport { db };\n","size_bytes":656},"server/fixed-data-generator.ts":{"content":"import { log } from \"./vite\";\nimport { InsertWorkItem } from \"@shared/schema\";\nimport { storage } from \"./storage\";\n\n/**\n * Generate random work items with unique IDs\n */\nexport async function generateRandomWorkItems(count: number = 150) {\n  try {\n    log(`Generating ${count} random work items...`);\n    \n    // Get existing projects and users\n    const projects = await storage.getProjects();\n    if (projects.length === 0) {\n      log(\"No projects found. Please run data generation first.\");\n      return false;\n    }\n    \n    const users = await storage.getUsers();\n    if (users.length === 0) {\n      log(\"No users found. Please run data generation first.\");\n      return false;\n    }\n    \n    const adminUser = users.find(u => u.username === \"admin\") || users[0];\n    \n    // Create a timestamp-based unique suffix for IDs\n    const uniqueTimestamp = Date.now().toString().slice(-8);\n    \n    // Templates for various item types\n    const workItemTemplates = {\n      epics: [\n        { title: \"Platform Integration\", description: \"Comprehensive integration with third-party platforms\" },\n        { title: \"Performance Optimization\", description: \"System-wide performance improvements\" },\n        { title: \"Mobile Experience\", description: \"Enhanced mobile user experience and capabilities\" },\n        { title: \"Analytics Dashboard\", description: \"Advanced analytics and reporting dashboard\" },\n        { title: \"Compliance Framework\", description: \"Regulatory compliance and audit framework\" }\n      ],\n      features: [\n        { title: \"OAuth Integration\", description: \"Single sign-on with popular OAuth providers\" },\n        { title: \"Real-time Notifications\", description: \"Push notification system for instant updates\" },\n        { title: \"Data Visualization\", description: \"Interactive charts and graphs for data visualization\" },\n        { title: \"Offline Mode\", description: \"Offline capability with data synchronization\" },\n        { title: \"Bulk Operations\", description: \"Efficient bulk data processing capabilities\" },\n        { title: \"Export Functionality\", description: \"Data export in multiple formats\" },\n        { title: \"Advanced Filtering\", description: \"Complex data filtering and search capabilities\" },\n        { title: \"User Permissions\", description: \"Granular user permission system\" }\n      ],\n      stories: [\n        { title: \"User Registration Flow\", description: \"Streamlined user registration process\" },\n        { title: \"Dashboard Widgets\", description: \"Customizable dashboard widget implementation\" },\n        { title: \"Email Templates\", description: \"Configurable email notification templates\" },\n        { title: \"Search Autocomplete\", description: \"Intelligent search with autocomplete suggestions\" },\n        { title: \"Data Import Wizard\", description: \"Step-by-step data import assistant\" },\n        { title: \"Profile Management\", description: \"User profile settings and management\" },\n        { title: \"Notification Preferences\", description: \"User notification preference controls\" }\n      ],\n      tasks: [\n        { title: \"Implement API Endpoint\", description: \"Create RESTful API endpoint for data access\" },\n        { title: \"Create Database Schema\", description: \"Design and implement database schema\" },\n        { title: \"Write Unit Tests\", description: \"Develop comprehensive unit test suite\" },\n        { title: \"Design UI Components\", description: \"Create reusable UI component library\" },\n        { title: \"Setup Authentication\", description: \"Implement secure authentication flow\" },\n        { title: \"Optimize Query Performance\", description: \"Improve database query performance\" },\n        { title: \"Add Validation Rules\", description: \"Implement data validation logic\" },\n        { title: \"Create Documentation\", description: \"Produce user and technical documentation\" }\n      ],\n      bugs: [\n        { title: \"UI Rendering Issue\", description: \"Interface elements not rendering correctly\" },\n        { title: \"Data Loading Error\", description: \"Error when loading data from API\" },\n        { title: \"Validation Failure\", description: \"Form validation not working as expected\" },\n        { title: \"Performance Degradation\", description: \"System performance issues under load\" },\n        { title: \"Authentication Error\", description: \"Users unable to authenticate properly\" },\n        { title: \"Calculation Error\", description: \"Incorrect calculation results\" },\n        { title: \"Mobile Layout Issue\", description: \"Layout problems on mobile devices\" }\n      ]\n    };\n    \n    // Status and priority options for variation\n    const statuses = [\"TODO\", \"IN_PROGRESS\", \"DONE\"];\n    const priorities = [\"LOW\", \"MEDIUM\", \"HIGH\", \"CRITICAL\"];\n    \n    // Track total created items\n    let createdCount = 0;\n    \n    // Process each project\n    for (const project of projects) {\n      // Limit items per project\n      const itemsForProject = Math.floor(count / projects.length);\n      let projectItemCount = 0;\n      \n      log(`Creating items for project: ${project.name}`);\n      \n      // Get existing epics for this project\n      const projectItems = await storage.getWorkItemsByProject(project.id);\n      const epics = projectItems.filter(item => item.type === \"EPIC\");\n      \n      // If no epics exist, create some\n      if (epics.length === 0) {\n        // Create 1-2 epics\n        const epicCount = Math.min(2, itemsForProject);\n        for (let i = 0; i < epicCount && projectItemCount < itemsForProject; i++) {\n          const template = workItemTemplates.epics[Math.floor(Math.random() * workItemTemplates.epics.length)];\n          const assignee = users[Math.floor(Math.random() * users.length)];\n          \n          const uniqueId = `${uniqueTimestamp}-${project.id}-${createdCount}`;\n          \n          const epic = await storage.createWorkItem({\n            title: template.title,\n            description: template.description,\n            type: \"EPIC\",\n            status: statuses[Math.floor(Math.random() * statuses.length)],\n            priority: priorities[Math.floor(Math.random() * priorities.length)],\n            projectId: project.id,\n            parentId: null,\n            assigneeId: assignee.id,\n            reporterId: adminUser.id,\n            estimate: 40,\n            externalId: `${project.key}-E${uniqueId}`\n          });\n          \n          projectItemCount++;\n          createdCount++;\n          \n          // Create a reference object for projectItemCount to pass by reference\n          const projectItemCountRef = { count: projectItemCount };\n          \n          // Add features to this epic\n          await createChildItems(project, epic, \"FEATURE\", 2, 4, projectItemCountRef, itemsForProject);\n          \n          // Update the actual projectItemCount from the reference\n          projectItemCount = projectItemCountRef.count;\n        }\n      } else {\n        // Use existing epics to add more items\n        for (const epic of epics) {\n          if (projectItemCount >= itemsForProject) break;\n          \n          // Get features under this epic\n          const features = projectItems.filter(item => \n            item.type === \"FEATURE\" && item.parentId === epic.id\n          );\n          \n          if (features.length === 0) {\n            // Add new features\n            const projectItemCountRef = { count: projectItemCount };\n            await createChildItems(project, epic, \"FEATURE\", 2, 3, projectItemCountRef, itemsForProject);\n            projectItemCount = projectItemCountRef.count;\n          } else {\n            // Add items to existing features\n            for (const feature of features) {\n              if (projectItemCount >= itemsForProject) break;\n              \n              // Get stories under this feature\n              const stories = projectItems.filter(item => \n                item.type === \"STORY\" && item.parentId === feature.id\n              );\n              \n              if (stories.length === 0) {\n                // Add new stories\n                const projectItemCountRef = { count: projectItemCount };\n                await createChildItems(project, feature, \"STORY\", 2, 3, projectItemCountRef, itemsForProject);\n                projectItemCount = projectItemCountRef.count;\n              } else {\n                // Add tasks and bugs to existing stories\n                for (const story of stories) {\n                  if (projectItemCount >= itemsForProject) break;\n                  \n                  if (Math.random() < 0.7) {\n                    // Add tasks\n                    const projectItemCountRef = { count: projectItemCount };\n                    await createChildItems(project, story, \"TASK\", 1, 2, projectItemCountRef, itemsForProject);\n                    projectItemCount = projectItemCountRef.count;\n                  } else {\n                    // Add bugs\n                    const projectItemCountRef = { count: projectItemCount };\n                    await createChildItems(project, story, \"BUG\", 1, 1, projectItemCountRef, itemsForProject);\n                    projectItemCount = projectItemCountRef.count;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      log(`Created ${projectItemCount} items for project ${project.name}`);\n    }\n    \n    log(`Successfully generated ${createdCount} random work items`);\n    return true;\n    \n    // Helper function to create child items\n    async function createChildItems(\n      projectObj: any, \n      parent: any, \n      type: string, \n      min: number, \n      max: number,\n      projectItemCountRef: { count: number },\n      maxItemsForProject: number\n    ) {\n      const itemCount = Math.floor(Math.random() * (max - min + 1)) + min;\n      let templates;\n      let estimateValue;\n      \n      switch (type) {\n        case \"FEATURE\":\n          templates = workItemTemplates.features;\n          estimateValue = 20;\n          break;\n        case \"STORY\":\n          templates = workItemTemplates.stories;\n          estimateValue = 8;\n          break;\n        case \"TASK\":\n          templates = workItemTemplates.tasks;\n          estimateValue = 4;\n          break;\n        case \"BUG\":\n          templates = workItemTemplates.bugs;\n          estimateValue = 3;\n          break;\n        default:\n          templates = workItemTemplates.tasks;\n          estimateValue = 4;\n      }\n      \n      for (let i = 0; i < itemCount && projectItemCountRef.count < maxItemsForProject; i++) {\n        const template = templates[Math.floor(Math.random() * templates.length)];\n        const assignee = users[Math.floor(Math.random() * users.length)];\n        \n        const typePrefix = type.charAt(0) + (type === \"FEATURE\" ? \"F\" : \"\");\n        \n        // Generate a shorter unique ID to stay within the varchar(20) limit\n        const shortTimestamp = uniqueTimestamp.toString().slice(-4);\n        const uniqueId = `${shortTimestamp}${projectObj.id}${createdCount}${i}`;\n        \n        const item = await storage.createWorkItem({\n          title: template.title,\n          description: template.description,\n          type,\n          status: statuses[Math.floor(Math.random() * statuses.length)],\n          priority: priorities[Math.floor(Math.random() * priorities.length)],\n          projectId: parent.projectId,\n          parentId: parent.id,\n          assigneeId: assignee.id,\n          reporterId: adminUser.id,\n          estimate: estimateValue,\n          externalId: `${projectObj.key}-${typePrefix}${uniqueId}`\n        });\n        \n        projectItemCountRef.count++;\n        createdCount++;\n        \n        // If this is a feature or story, potentially add children\n        if (type === \"FEATURE\" && Math.random() < 0.8) {\n          await createChildItems(projectObj, item, \"STORY\", 1, 2, projectItemCountRef, maxItemsForProject);\n        } else if (type === \"STORY\" && Math.random() < 0.7) {\n          await createChildItems(projectObj, item, \"TASK\", 1, 2, projectItemCountRef, maxItemsForProject);\n        }\n      }\n    }\n    \n  } catch (error) {\n    log(`Error generating random work items: ${error}`);\n    console.error(error);\n    return false;\n  }\n}","size_bytes":12130},"server/index.ts":{"content":"import dotenv from 'dotenv';\ndotenv.config(); // ✅ Loads environment variables from .env\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { registerPhpApiRoutes } from \"./php-api-routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage } from \"./storage\";\n\nconst app = express();\n\nimport cors from 'cors';\napp.use(cors({\n  origin: true, // Allow all origins for Replit proxy environment\n  credentials: true,\n}));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Function to initialize test data\nasync function initializeTestData() {\n  try {\n    // Check if data already exists\n    const users = await storage.getUsers();\n    if (users.length > 0) {\n      log(\"Test data already exists.\");\n      return;\n    }\n\n    log(\"Initializing test data...\");\n\n    // Create a test user\n    const user = await storage.createUser({\n      username: \"testuser\",\n      password: \"password123\",\n      fullName: \"Test User\",\n      email: \"test.user@company.com\",\n      avatarUrl: null,\n      isActive: true\n    });\n\n    // Create a test team\n    const team = await storage.createTeam({\n      name: \"Engineering Team\",\n      description: \"Core engineering team\",\n      createdBy: user.id,\n      isActive: true\n    });\n\n    // Add the user to the team\n    await storage.addTeamMember({\n      teamId: team.id,\n      userId: user.id,\n      role: \"ADMIN\"\n    });\n\n    // Create a test project\n    const project = await storage.createProject({\n      name: \"Project Management App\",\n      description: \"A comprehensive project management application\",\n      status: \"ACTIVE\",\n      createdBy: user.id,\n      teamId: team.id,\n      key: \"PROJ\", // Project key for work item references\n      startDate: new Date(),\n      targetDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000) // 90 days from now\n    });\n\n    log(\"Sample project created successfully!\");\n\n    log(\"Test data initialized successfully!\");\n  } catch (error) {\n    console.error(\"Error initializing test data:\", error);\n  }\n}\n\n// Import the data generators\nimport { generateSampleData } from \"./data-generator\";\nimport { generateRandomWorkItems } from \"./fixed-data-generator\";\nimport bcrypt from 'bcryptjs';\nimport { db } from './db';\nimport { users } from '@shared/schema';\n\n// Function to create sample users with different role types\nasync function initializeSampleUsers() {\n  try {\n    log(\"Creating sample role-based users if they don't exist...\");\n    \n    // Check if sample users already exist\n    const existingUsers = await storage.getUsers();\n    const adminExists = existingUsers.some(user => user.role === 'ADMIN');\n    const scrumMasterExists = existingUsers.some(user => user.role === 'SCRUM_MASTER');\n    const regularUserExists = existingUsers.some(user => user.role === 'USER');\n    \n    if (adminExists && scrumMasterExists && regularUserExists) {\n      log(\"Sample role-based users already exist.\");\n      return;\n    }\n    \n    const salt = await bcrypt.genSalt(10);\n    \n    // Hash different passwords for each user type\n    const adminHashedPassword = await bcrypt.hash('admin123', salt);\n    const scrumHashedPassword = await bcrypt.hash('scrum123', salt);\n    const userHashedPassword = await bcrypt.hash('user123', salt);\n    \n    const sampleUsers = [];\n    \n    // Create admin user if not exists\n    if (!adminExists) {\n      const adminUser = await storage.createUser({\n        username: 'admin',\n        email: 'admin@example.com',\n        password: adminHashedPassword,\n        fullName: 'Admin User',\n        role: 'ADMIN',\n        isActive: true\n      });\n      \n      sampleUsers.push(adminUser);\n      log(\"Created ADMIN user - admin@example.com\");\n    }\n    \n    // Create scrum master user if not exists\n    if (!scrumMasterExists) {\n      const scrumUser = await storage.createUser({\n        username: 'scrummaster',\n        email: 'scrum@example.com',\n        password: scrumHashedPassword,\n        fullName: 'Scrum Master',\n        role: 'SCRUM_MASTER',\n        isActive: true\n      });\n      \n      sampleUsers.push(scrumUser);\n      log(\"Created SCRUM_MASTER user - scrum@example.com\");\n    }\n    \n    // Create regular user if not exists\n    if (!regularUserExists) {\n      const regularUser = await storage.createUser({\n        username: 'user',\n        email: 'user@example.com',\n        password: userHashedPassword,\n        fullName: 'Regular User',\n        role: 'USER',\n        isActive: true\n      });\n      \n      sampleUsers.push(regularUser);\n      log(\"Created USER user - user@example.com\");\n    }\n    \n    log(`Created ${sampleUsers.length} sample role-based users successfully.`);\n  } catch (error) {\n    console.error(\"Error creating sample users:\", error);\n  }\n}\n\n(async () => {\n  // Initialize test data before starting the server\n  await initializeTestData();\n  \n  // Generate sample data first (will be skipped if data already exists)\n  await generateSampleData();\n  \n  // Use the improved generator with guaranteed unique IDs\n  try {\n    // Get existing data count\n    const users = await storage.getUsers();\n    if (users.length > 0) {\n      log(\"Sample data already exists, generating additional items with fixed generator...\");\n      await generateRandomWorkItems(150);\n    }\n  } catch (error) {\n    console.error(\"Error generating additional data:\", error);\n  }\n  \n  const server = await registerRoutes(app);\n  \n  // Register PHP API routes\n  registerPhpApiRoutes(app);\n  \n  // Create sample users for different roles after server is ready\n  await initializeSampleUsers();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = process.env.PORT || 5000;\n  server.listen(Number(port), '0.0.0.0', () => {\n    log(`✅ Server is running on port ${port}`);\n  });\n\n\n})();\n","size_bytes":7207},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { \n  insertUserSchema, \n  insertTeamSchema, \n  insertTeamMemberSchema, \n  insertProjectSchema, \n  insertWorkItemSchema,\n  emailSchema,\n  users,\n  teams,\n  teamMembers,\n  projects,\n  workItems,\n  workItemHistory,\n  comments,\n  attachments\n} from \"@shared/schema\";\nimport { ZodError, z } from \"zod\";\nimport { \n  isAdmin, \n  isScrumMasterOrAdmin, \n  canManageWorkItemType, \n  canDeleteWorkItem, \n  canDeleteEntity \n} from \"./auth-middleware\";\nimport session from \"express-session\";\nimport authRouter from \"./auth-routes\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Set up session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'project-management-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Always false for local dev; set true for production with HTTPS\n      sameSite: 'lax', // Allows cookies for local dev and most cross-origin setups\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n    }\n  }));\n\n  // Register auth routes\n  app.use('/api/auth', authRouter);\n  // DEV ONLY: Route to clear all data\n  app.delete('/api/dev/clear-database', async (req, res) => {\n    try {\n      if (process.env.NODE_ENV !== 'development') {\n        return res.status(403).json({ message: 'Forbidden in production environment' });\n      }\n      \n      // Clear all tables in the correct order (respecting foreign key constraints)\n      await db.delete(comments);\n      await db.delete(workItemHistory);\n      await db.delete(attachments);\n      await db.delete(workItems);\n      await db.delete(projects);\n      await db.delete(teamMembers);\n      await db.delete(teams);\n      await db.delete(users);\n      \n      return res.json({ message: 'All database tables cleared successfully' });\n    } catch (error) {\n      console.error('Error clearing database:', error);\n      return res.status(500).json({ message: 'Error clearing database', error: String(error) });\n    }\n  });\n  // Error handling middleware for Zod validation errors\n  const handleZodError = (error: unknown, res: Response) => {\n    if (error instanceof ZodError) {\n      const formattedErrors = error.errors.map(err => ({\n        path: err.path.join('.'),\n        message: err.message\n      }));\n      return res.status(400).json({ message: \"Validation error\", errors: formattedErrors });\n    }\n    \n    console.error(\"Unexpected error:\", error);\n    return res.status(500).json({ message: \"Internal server error\" });\n  };\n\n  // User routes\n  app.post('/api/users', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Validate email is corporate\n      try {\n        emailSchema.parse(userData.email);\n      } catch (error) {\n        return res.status(400).json({ message: \"Only corporate email addresses are allowed\" });\n      }\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User with this email already exists\" });\n      }\n      \n      const user = await storage.createUser(userData);\n      \n      // Don't return password in response\n      const { password, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      handleZodError(error, res);\n    }\n  });\n\n  app.get('/api/users', async (_req, res) => {\n    try {\n      const users = await storage.getUsers();\n      // Remove passwords from response\n      const usersWithoutPasswords = users.map(user => {\n        const { password, ...userWithoutPassword } = user;\n        return userWithoutPassword;\n      });\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get user by email\n  app.get('/api/users/by-email/:email', async (req, res) => {\n    try {\n      const email = decodeURIComponent(req.params.email);\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Don't return password in response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user by email:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n  \n  app.get('/api/users/:id', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Don't return password in response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user by email:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // User invitation endpoint - creates user if not exists\n  app.post('/api/users/invite', async (req, res) => {\n    try {\n      const { email, username, role } = req.body;\n      \n      // Validate email is corporate\n      try {\n        emailSchema.parse(email);\n      } catch (error) {\n        return res.status(400).json({ message: \"Only corporate email addresses are allowed\" });\n      }\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        // Return existing user without password\n        const { password, ...userWithoutPassword } = existingUser;\n        return res.json(userWithoutPassword);\n      }\n      \n      // Create new user with default password\n      const userData = {\n        email,\n        username,\n        fullName: username || email.split('@')[0], // Use username as default full name\n        password: 'defaultPassword123', // Default password for invited users\n        role: role || 'USER'\n      };\n      \n      const user = await storage.createUser(userData);\n      \n      // Don't return password in response\n      const { password, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error inviting user:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Team routes\n  // Create team (Admin only)\n  app.post('/api/teams', isAdmin, async (req, res) => {\n    try {\n      const teamData = insertTeamSchema.parse(req.body);\n      const team = await storage.createTeam(teamData);\n      res.status(201).json(team);\n    } catch (error) {\n      handleZodError(error, res);\n    }\n  });\n\n  app.get('/api/teams', async (_req, res) => {\n    try {\n      const teams = await storage.getTeams();\n      res.json(teams);\n    } catch (error) {\n      console.error(\"Error fetching teams:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/teams/:id', async (req, res) => {\n    try {\n      const teamId = parseInt(req.params.id);\n      const team = await storage.getTeam(teamId);\n      \n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      \n      res.json(team);\n    } catch (error) {\n      console.error(\"Error fetching team:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/users/:userId/teams', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const teams = await storage.getTeamsByUser(userId);\n      res.json(teams);\n    } catch (error) {\n      console.error(\"Error fetching user teams:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Team members routes\n  // Add team member (Admin and Scrum Master)\n  app.post('/api/teams/:teamId/members', async (req, res) => {\n    try {\n      const teamId = parseInt(req.params.teamId);\n      \n      // Check if team exists\n      const team = await storage.getTeam(teamId);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      \n      const memberData = insertTeamMemberSchema.parse({\n        ...req.body,\n        teamId\n      });\n      \n      // Validate if user exists\n      const user = await storage.getUser(memberData.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const teamMember = await storage.addTeamMember(memberData);\n      res.status(201).json(teamMember);\n    } catch (error) {\n      handleZodError(error, res);\n    }\n  });\n\n  app.get('/api/teams/:teamId/members', async (req, res) => {\n    try {\n      const teamId = parseInt(req.params.teamId);\n      \n      // Check if team exists\n      const team = await storage.getTeam(teamId);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      \n      const members = await storage.getTeamMembers(teamId);\n      \n      // Get full user data for each member\n      const memberDetails = await Promise.all(\n        members.map(async (member) => {\n          const user = await storage.getUser(member.userId);\n          if (!user) return { ...member, user: null };\n          \n          // Remove password from user data\n          const { password, ...userWithoutPassword } = user;\n          return { ...member, user: userWithoutPassword };\n        })\n      );\n      \n      res.json(memberDetails);\n    } catch (error) {\n      console.error(\"Error fetching team members:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Remove team member (Admin and Scrum Master)\n  app.delete('/api/teams/:teamId/members/:userId', isScrumMasterOrAdmin, async (req, res) => {\n    try {\n      const teamId = parseInt(req.params.teamId);\n      const userId = parseInt(req.params.userId);\n      \n      const removed = await storage.removeTeamMember(teamId, userId);\n      \n      if (!removed) {\n        return res.status(404).json({ message: \"Team member not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing team member:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Project routes\n  // Create project (Admin and Scrum Master only)\n  app.post('/api/projects', isScrumMasterOrAdmin, async (req, res) => {\n    try {\n      console.log(\"[DEBUG] Project creation request body:\", req.body);\n      console.log(\"[DEBUG] User session exists:\", !!req.session);\n      \n      const projectData = insertProjectSchema.parse(req.body);\n      console.log(\"[DEBUG] Parsed project data:\", projectData);\n      \n      // Validate if team exists (if teamId is provided)\n      if (projectData.teamId) {\n        const team = await storage.getTeam(projectData.teamId);\n        if (!team) {\n          console.log(\"[DEBUG] Team not found:\", projectData.teamId);\n          return res.status(404).json({ message: \"Team not found\" });\n        }\n      }\n      \n      // Validate if user exists\n      const user = await storage.getUser(projectData.createdBy);\n      if (!user) {\n        console.log(\"[DEBUG] User not found:\", projectData.createdBy);\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      console.log(\"[DEBUG] Found user:\", { id: user.id, username: user.username });\n      \n      const project = await storage.createProject(projectData);\n      console.log(\"[DEBUG] Project created successfully:\", project);\n      res.status(201).json(project);\n    } catch (error) {\n      // Check for specific database errors\n      if (error && typeof error === 'object' && 'code' in error) {\n        // Handle unique constraint violation\n        if (error.code === '23505') {\n          // Extract the duplicate field from the error detail\n          const errorDetail = 'detail' in error ? String(error.detail) : '';\n          const duplicateMatch = /Key \\((\\w+)\\)=\\(([^)]+)\\) already exists/.exec(errorDetail);\n          if (duplicateMatch) {\n            const [, field, value] = duplicateMatch;\n            return res.status(409).json({ \n              message: `Conflict error`, \n              errors: [{ path: field, message: `The ${field} \"${value}\" is already taken` }]\n            });\n          }\n        }\n      }\n      \n      // Otherwise handle as standard validation error\n      console.log(\"[DEBUG] Project creation error:\", error);\n      console.log(\"[DEBUG] Error type:\", typeof error);\n      if (error && typeof error === 'object') {\n        console.log(\"[DEBUG] Error properties:\", Object.keys(error));\n      }\n      handleZodError(error, res);\n    }\n  });\n\n  app.get('/api/projects', async (_req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      console.log(`[DEBUG] Fetched ${projects.length} projects:`, projects.map(p => ({ id: p.id, name: p.name, status: p.status })));\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/projects/:id', async (req, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      const project = await storage.getProject(projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/teams/:teamId/projects', async (req, res) => {\n    try {\n      const teamId = parseInt(req.params.teamId);\n      \n      // Check if team exists\n      const team = await storage.getTeam(teamId);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      \n      const projects = await storage.getProjectsByTeam(teamId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching team projects:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n  \n  // Update a project (for archiving or other updates)\n  // Update project (Admin and Scrum Master only)\n  app.patch('/api/projects/:id', isScrumMasterOrAdmin, async (req, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      \n      // Check if project exists\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      // Update the project with the provided fields\n      const updatedProject = await storage.updateProject(projectId, req.body);\n      \n      if (!updatedProject) {\n        return res.status(400).json({ message: \"Failed to update project\" });\n      }\n      \n      res.json(updatedProject);\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n  \n  // Delete a project (Admin only)\n  app.delete('/api/projects/:id', canDeleteEntity, async (req, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      \n      // Check if project exists\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      // Delete the project\n      const success = await storage.deleteProject(projectId);\n      \n      if (!success) {\n        return res.status(400).json({ message: \"Failed to delete project\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Work items routes (Epics, Features, Stories, Tasks, Bugs)\n  // Create work item (restricted by user role)\n  app.post('/api/work-items', canManageWorkItemType(['STORY', 'TASK', 'BUG']), async (req, res) => {\n    try {\n      // Create a modified schema that makes externalId optional\n      const modifiedSchema = insertWorkItemSchema.extend({\n        externalId: z.string().optional(),\n      });\n      \n      const formData = req.body;\n      const workItemData = modifiedSchema.parse(formData);\n      \n      // Validate if project exists\n      const project = await storage.getProject(workItemData.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      // Validate if parent exists (if parentId is provided)\n      if (workItemData.parentId) {\n        const parent = await storage.getWorkItem(workItemData.parentId);\n        if (!parent) {\n          return res.status(404).json({ message: \"Parent work item not found\" });\n        }\n        \n        // Validate parent-child relationship constraints\n        if (!validateParentChildRelationship(parent.type as string, workItemData.type as string)) {\n          const childTypeDisplay = typeof workItemData.type === 'string' ? workItemData.type.toLowerCase() : workItemData.type;\n          const parentTypeDisplay = typeof parent.type === 'string' ? parent.type.toLowerCase() : parent.type;\n          \n          return res.status(400).json({ \n            message: \"Invalid parent-child relationship\",\n            details: `A ${childTypeDisplay} cannot have a ${parentTypeDisplay} as parent`\n          });\n        }\n      }\n      \n      // Validate if assignee exists (if assigneeId is provided)\n      if (workItemData.assigneeId) {\n        const assignee = await storage.getUser(workItemData.assigneeId);\n        if (!assignee) {\n          return res.status(404).json({ message: \"Assignee not found\" });\n        }\n      }\n      \n      // Validate if reporter exists (if reporterId is provided)\n      if (workItemData.reporterId) {\n        const reporter = await storage.getUser(workItemData.reporterId);\n        if (!reporter) {\n          return res.status(404).json({ message: \"Reporter not found\" });\n        }\n      }\n      \n      const workItem = await storage.createWorkItem(workItemData);\n      res.status(201).json(workItem);\n    } catch (error) {\n      handleZodError(error, res);\n    }\n  });\n\n  app.get('/api/projects/:projectId/work-items', async (req, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      \n      // Check if project exists\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      const workItems = await storage.getWorkItemsByProject(projectId);\n      res.json(workItems);\n    } catch (error) {\n      console.error(\"Error fetching work items:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/work-items/:id', async (req, res) => {\n    try {\n      const workItemId = parseInt(req.params.id);\n      const workItem = await storage.getWorkItem(workItemId);\n      \n      if (!workItem) {\n        return res.status(404).json({ message: \"Work item not found\" });\n      }\n      \n      res.json(workItem);\n    } catch (error) {\n      console.error(\"Error fetching work item:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/work-items/:parentId/children', async (req, res) => {\n    try {\n      const parentId = parseInt(req.params.parentId);\n      \n      // Check if parent work item exists\n      const parent = await storage.getWorkItem(parentId);\n      if (!parent) {\n        return res.status(404).json({ message: \"Parent work item not found\" });\n      }\n      \n      const children = await storage.getWorkItemsByParent(parentId);\n      res.json(children);\n    } catch (error) {\n      console.error(\"Error fetching child work items:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update work item status (all users can update status)\n  app.patch('/api/work-items/:id/status', async (req, res) => {\n    try {\n      const workItemId = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      if (!status || !['TODO', 'IN_PROGRESS', 'DONE'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n      \n      const workItem = await storage.updateWorkItemStatus(workItemId, status);\n      \n      if (!workItem) {\n        return res.status(404).json({ message: \"Work item not found\" });\n      }\n      \n      res.json(workItem);\n    } catch (error) {\n      console.error(\"Error updating work item status:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update work item (restricted by user role)\n  app.patch('/api/work-items/:id', canManageWorkItemType(['STORY', 'TASK', 'BUG']), async (req, res) => {\n    try {\n      const workItemId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      // Don't allow updating id, externalId, createdAt\n      const { id, externalId, createdAt, ...validUpdates } = updates;\n      \n      // Explicit date field validation\n      if (validUpdates.startDate) {\n        try {\n          validUpdates.startDate = new Date(validUpdates.startDate);\n        } catch (error) {\n          console.warn(\"Invalid startDate:\", validUpdates.startDate);\n          validUpdates.startDate = null;\n        }\n      }\n      \n      if (validUpdates.endDate) {\n        try {\n          validUpdates.endDate = new Date(validUpdates.endDate);\n        } catch (error) {\n          console.warn(\"Invalid endDate:\", validUpdates.endDate);\n          validUpdates.endDate = null;\n        }\n      }\n      \n      if (validUpdates.dueDate) {\n        try {\n          validUpdates.dueDate = new Date(validUpdates.dueDate);\n        } catch (error) {\n          console.warn(\"Invalid dueDate:\", validUpdates.dueDate);\n          validUpdates.dueDate = null;\n        }\n      }\n      \n      // Double-check the workItem exists before attempting an update\n      const existingWorkItem = await storage.getWorkItem(workItemId);\n      if (!existingWorkItem) {\n        return res.status(404).json({ message: \"Work item not found\" });\n      }\n      \n      const workItem = await storage.updateWorkItem(workItemId, validUpdates);\n      \n      if (!workItem) {\n        return res.status(404).json({ message: \"Work item not found\" });\n      }\n      \n      res.json(workItem);\n    } catch (error) {\n      console.error(\"Error updating work item:\", error);\n      res.status(500).json({ \n        message: \"Internal server error\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Delete work item (Admins can delete any, Scrum Masters only Story/Task/Bug)\n  app.delete('/api/work-items/:id', canDeleteWorkItem, async (req, res) => {\n    try {\n      const workItemId = parseInt(req.params.id);\n      \n      // Check if there are child items\n      const children = await storage.getWorkItemsByParent(workItemId);\n      if (children.length > 0) {\n        return res.status(400).json({ \n          message: \"Cannot delete work item with children\",\n          details: \"Delete all child items first or assign them to another parent\"\n        });\n      }\n      \n      const deleted = await storage.deleteWorkItem(workItemId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Work item not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting work item:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Helper function to validate parent-child relationships\n  function validateParentChildRelationship(parentType: string, childType: string): boolean {\n    const validRelationships: Record<string, string[]> = {\n      'EPIC': ['FEATURE'],\n      'FEATURE': ['STORY'],\n      'STORY': ['TASK', 'BUG'],\n      'TASK': [],\n      'BUG': []\n    };\n    \n    return validRelationships[parentType]?.includes(childType) || false;\n  }\n\n  // Get project statistics\n  app.get(\"/api/projects/:id/statistics\", async (req, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      if (isNaN(projectId)) {\n        return res.status(400).json({ message: \"Invalid project ID\" });\n      }\n\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Get all work items for the project\n      const workItems = await storage.getWorkItemsByProject(projectId);\n      \n      // Get counts by status\n      const statusCounts = await storage.getWorkItemsCountByStatus(projectId);\n      \n      // Get counts by type\n      const typeCounts = await storage.getWorkItemsCountByType(projectId);\n      \n      // Get counts by priority\n      const priorityCounts = await storage.getWorkItemsCountByPriority(projectId);\n      \n      // Calculate total items and completion percentage\n      const totalItems = workItems.length;\n      const completedItems = workItems.filter(item => item.status === 'DONE').length;\n      const completionPercentage = totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;\n      \n      // Calculate average time to resolve (for completed items with start and completion dates)\n      let avgTimeToResolve = 0;\n      let itemsWithResolveTime = 0;\n      \n      workItems.forEach(item => {\n        if (item.status === 'DONE' && item.startDate && item.completedAt) {\n          const startTime = new Date(item.startDate).getTime();\n          const completedTime = new Date(item.completedAt).getTime();\n          const resolveTime = completedTime - startTime;\n          \n          if (resolveTime > 0) {\n            avgTimeToResolve += resolveTime;\n            itemsWithResolveTime++;\n          }\n        }\n      });\n      \n      if (itemsWithResolveTime > 0) {\n        // Convert to days\n        avgTimeToResolve = Math.round(avgTimeToResolve / (1000 * 60 * 60 * 24) / itemsWithResolveTime);\n      }\n      \n      // Collect assignee data\n      const assigneesMap = new Map();\n      for (const item of workItems) {\n        if (item.assigneeId) {\n          const count = assigneesMap.get(item.assigneeId) || 0;\n          assigneesMap.set(item.assigneeId, count + 1);\n        }\n      }\n      \n      // Get assignee details\n      const assigneeStats = [];\n      for (const [assigneeId, count] of assigneesMap.entries()) {\n        const user = await storage.getUser(assigneeId);\n        if (user) {\n          const completed = workItems.filter(item => \n            item.assigneeId === assigneeId && item.status === 'DONE'\n          ).length;\n          \n          assigneeStats.push({\n            id: assigneeId,\n            name: user.fullName,\n            totalAssigned: count,\n            completed,\n            inProgress: workItems.filter(item => \n              item.assigneeId === assigneeId && item.status === 'IN_PROGRESS'\n            ).length,\n            todo: workItems.filter(item => \n              item.assigneeId === assigneeId && item.status === 'TODO'\n            ).length,\n            completionRate: count > 0 ? Math.round((completed / count) * 100) : 0\n          });\n        }\n      }\n      \n      // Return the statistics\n      res.json({\n        totalItems,\n        completedItems,\n        completionPercentage,\n        avgTimeToResolve,\n        statusCounts,\n        typeCounts,\n        priorityCounts,\n        assigneeStats,\n        // Add project timeline info\n        timeline: {\n          startDate: project.startDate,\n          targetDate: project.targetDate,\n          daysRemaining: project.targetDate ? \n            Math.round((new Date(project.targetDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24)) : \n            null\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching project statistics:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Data management endpoints for development and testing\n  app.post(\"/api/dev/reset-data\", async (req, res) => {\n    try {\n      // Import data generator functions\n      const { clearAllData, generateSampleData } = await import(\"./data-generator\");\n      const { generateRandomWorkItems } = await import(\"./fixed-data-generator\");\n      \n      // Get count parameter (default to 150)\n      const count = req.body.count || 150;\n      \n      // Clear all existing data\n      const cleared = await clearAllData();\n      if (!cleared) {\n        return res.status(500).json({ message: \"Failed to clear data\" });\n      }\n      \n      // Generate core sample data\n      await generateSampleData();\n      \n      // Generate additional random work items with our fixed generator\n      await generateRandomWorkItems(count);\n      \n      res.json({ \n        message: \"Data reset successful\",\n        details: `All data has been cleared and new sample data has been generated with ${count} work items`\n      });\n    } catch (error) {\n      console.error(\"Error resetting data:\", error);\n      res.status(500).json({ message: \"Error resetting data\" });\n    }\n  });\n  \n  // Fixed data generator endpoint - to efficiently add items with guaranteed unique IDs\n  app.post(\"/api/dev/generate-items\", async (req, res) => {\n    try {\n      const count = req.body.count || 150;\n      const { generateRandomWorkItems } = await import(\"./fixed-data-generator\");\n      \n      const result = await generateRandomWorkItems(count);\n      \n      if (result) {\n        res.json({ \n          message: \"Random work items generated successfully\",\n          details: `Generated ${count} work items with unique IDs`\n        });\n      } else {\n        res.status(500).json({ \n          message: \"Failed to generate random work items\",\n          details: \"See server logs for more information\" \n        });\n      }\n    } catch (error) {\n      console.error(\"Error generating random work items:\", error);\n      res.status(500).json({ message: \"Error generating random work items\" });\n    }\n  });\n\n  // Endpoint to get current data counts for verification\n  app.get(\"/api/dev/data-status\", async (_req, res) => {\n    try {\n      const users = await storage.getUsers();\n      const teams = await storage.getTeams();\n      const projects = await storage.getProjects();\n      \n      // Count work items by type\n      const counts = {\n        users: users.length,\n        teams: teams.length,\n        projects: projects.length,\n        workItems: {\n          total: 0,\n          epics: 0,\n          features: 0,\n          stories: 0,\n          tasks: 0,\n          bugs: 0\n        }\n      };\n      \n      // Count work items for each project\n      for (const project of projects) {\n        const workItems = await storage.getWorkItemsByProject(project.id);\n        counts.workItems.total += workItems.length;\n        \n        // Count by type\n        counts.workItems.epics += workItems.filter(item => item.type === 'EPIC').length;\n        counts.workItems.features += workItems.filter(item => item.type === 'FEATURE').length;\n        counts.workItems.stories += workItems.filter(item => item.type === 'STORY').length;\n        counts.workItems.tasks += workItems.filter(item => item.type === 'TASK').length;\n        counts.workItems.bugs += workItems.filter(item => item.type === 'BUG').length;\n      }\n      \n      res.json(counts);\n    } catch (error) {\n      console.error(\"Error getting data status:\", error);\n      res.status(500).json({ message: \"Error getting data status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31883},"server/storage.ts":{"content":"import { \n  users, type User, type InsertUser,\n  teams, type Team, type InsertTeam,\n  teamMembers, type TeamMember, type InsertTeamMember,\n  projects, type Project, type InsertProject,\n  workItems, type WorkItem, type InsertWorkItem \n} from \"@shared/schema\";\n\nfunction generateExternalId(type: string, currentId: number): string {\n  const prefix = type === 'EPIC' ? 'EP' : \n                type === 'FEATURE' ? 'FT' : \n                type === 'STORY' ? 'ST' : \n                type === 'TASK' ? 'TSK' : \n                'BUG';\n  \n  // Pad with zeros for a 3-digit ID\n  return `${prefix}-${String(currentId).padStart(3, '0')}`;\n}\n\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUsers(): Promise<User[]>;\n  \n  // Team management\n  createTeam(team: InsertTeam): Promise<Team>;\n  getTeam(id: number): Promise<Team | undefined>;\n  getTeams(): Promise<Team[]>;\n  getTeamsByUser(userId: number): Promise<Team[]>;\n  \n  // Team members\n  addTeamMember(teamMember: InsertTeamMember): Promise<TeamMember>;\n  getTeamMembers(teamId: number): Promise<TeamMember[]>;\n  removeTeamMember(teamId: number, userId: number): Promise<boolean>;\n  \n  // Project management\n  createProject(project: InsertProject): Promise<Project>;\n  getProject(id: number): Promise<Project | undefined>;\n  getProjects(): Promise<Project[]>;\n  getProjectsByTeam(teamId: number): Promise<Project[]>;\n  updateProject(id: number, updates: Partial<Project>): Promise<Project | undefined>;\n  deleteProject(id: number): Promise<boolean>;\n  \n  // Work items management (Epics, Features, Stories, Tasks, Bugs)\n  createWorkItem(workItem: InsertWorkItem): Promise<WorkItem>;\n  getWorkItem(id: number): Promise<WorkItem | undefined>;\n  getWorkItemsByProject(projectId: number): Promise<WorkItem[]>;\n  getWorkItemsByParent(parentId: number): Promise<WorkItem[]>;\n  updateWorkItemStatus(id: number, status: string): Promise<WorkItem | undefined>;\n  updateWorkItem(id: number, workItem: Partial<WorkItem>): Promise<WorkItem | undefined>;\n  deleteWorkItem(id: number): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private teams: Map<number, Team>;\n  private teamMembers: Map<number, TeamMember>;\n  private projects: Map<number, Project>;\n  private workItems: Map<number, WorkItem>;\n  \n  private userId: number;\n  private teamId: number;\n  private teamMemberId: number;\n  private projectId: number;\n  private workItemId: number;\n  \n  constructor() {\n    this.users = new Map();\n    this.teams = new Map();\n    this.teamMembers = new Map();\n    this.projects = new Map();\n    this.workItems = new Map();\n    \n    this.userId = 1;\n    this.teamId = 1;\n    this.teamMemberId = 1;\n    this.projectId = 1;\n    this.workItemId = 1;\n  }\n  \n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n  \n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email\n    );\n  }\n  \n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username\n    );\n  }\n  \n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.userId++;\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastLogin: null,\n      avatarUrl: insertUser.avatarUrl || null,\n      isActive: insertUser.isActive !== undefined ? insertUser.isActive : true,\n      role: insertUser.role || 'USER'\n    };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  async getUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n  \n  // Team methods\n  async createTeam(insertTeam: InsertTeam): Promise<Team> {\n    const id = this.teamId++;\n    const team: Team = { \n      ...insertTeam, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date(),\n      description: insertTeam.description || null,\n      isActive: insertTeam.isActive !== undefined ? insertTeam.isActive : true\n    };\n    this.teams.set(id, team);\n    return team;\n  }\n  \n  async getTeam(id: number): Promise<Team | undefined> {\n    return this.teams.get(id);\n  }\n  \n  async getTeams(): Promise<Team[]> {\n    return Array.from(this.teams.values());\n  }\n  \n  async getTeamsByUser(userId: number): Promise<Team[]> {\n    const memberTeamIds = Array.from(this.teamMembers.values())\n      .filter(tm => tm.userId === userId)\n      .map(tm => tm.teamId);\n    \n    return Array.from(this.teams.values())\n      .filter(team => memberTeamIds.includes(team.id));\n  }\n  \n  // Team member methods\n  async addTeamMember(insertTeamMember: InsertTeamMember): Promise<TeamMember> {\n    const id = this.teamMemberId++;\n    const teamMember: TeamMember = { \n      ...insertTeamMember, \n      id, \n      joinedAt: new Date(),\n      updatedAt: new Date(),\n      role: insertTeamMember.role || 'MEMBER'\n    };\n    this.teamMembers.set(id, teamMember);\n    return teamMember;\n  }\n  \n  async getTeamMembers(teamId: number): Promise<TeamMember[]> {\n    return Array.from(this.teamMembers.values())\n      .filter(tm => tm.teamId === teamId);\n  }\n  \n  async removeTeamMember(teamId: number, userId: number): Promise<boolean> {\n    const teamMember = Array.from(this.teamMembers.values())\n      .find(tm => tm.teamId === teamId && tm.userId === userId);\n    \n    if (teamMember) {\n      this.teamMembers.delete(teamMember.id);\n      return true;\n    }\n    return false;\n  }\n  \n  // Project methods\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = this.projectId++;\n    const project: Project = { \n      ...insertProject, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date(),\n      description: insertProject.description || null,\n      teamId: insertProject.teamId || null,\n      startDate: insertProject.startDate || null,\n      targetDate: insertProject.targetDate || null\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n  \n  async getProject(id: number): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n  \n  async getProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values());\n  }\n  \n  async getProjectsByTeam(teamId: number): Promise<Project[]> {\n    return Array.from(this.projects.values())\n      .filter(project => project.teamId === teamId);\n  }\n  \n  async updateProject(id: number, updates: Partial<Project>): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (!project) return undefined;\n    \n    const updatedProject = {\n      ...project,\n      ...updates,\n      updatedAt: new Date()\n    };\n    \n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n  \n  async deleteProject(id: number): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n  \n  // Work item methods\n  async createWorkItem(insertWorkItem: InsertWorkItem): Promise<WorkItem> {\n    const id = this.workItemId++;\n    \n    // Generate external ID based on type (EP-001, FT-001, etc.)\n    const externalId = insertWorkItem.externalId || \n                      generateExternalId(insertWorkItem.type, id);\n    \n    const workItem: WorkItem = { \n      ...insertWorkItem, \n      id, \n      externalId, \n      createdAt: new Date(), \n      updatedAt: new Date(),\n      completedAt: null,\n      description: insertWorkItem.description || null,\n      parentId: insertWorkItem.parentId || null,\n      assigneeId: insertWorkItem.assigneeId || null,\n      reporterId: insertWorkItem.reporterId || null,\n      estimate: insertWorkItem.estimate || null,\n      startDate: insertWorkItem.startDate || null,\n      endDate: insertWorkItem.endDate || null,\n      priority: insertWorkItem.priority || 'MEDIUM',\n      status: insertWorkItem.status || 'TODO'\n    };\n    \n    this.workItems.set(id, workItem);\n    return workItem;\n  }\n  \n  async getWorkItem(id: number): Promise<WorkItem | undefined> {\n    return this.workItems.get(id);\n  }\n  \n  async getWorkItemsByProject(projectId: number): Promise<WorkItem[]> {\n    return Array.from(this.workItems.values())\n      .filter(item => item.projectId === projectId);\n  }\n  \n  async getWorkItemsByParent(parentId: number): Promise<WorkItem[]> {\n    return Array.from(this.workItems.values())\n      .filter(item => item.parentId === parentId);\n  }\n  \n  async updateWorkItemStatus(id: number, status: string): Promise<WorkItem | undefined> {\n    const workItem = this.workItems.get(id);\n    \n    if (workItem && (status === 'TODO' || status === 'IN_PROGRESS' || status === 'DONE')) {\n      const updatedItem = { \n        ...workItem, \n        status: status as 'TODO' | 'IN_PROGRESS' | 'DONE', \n        updatedAt: new Date() \n      };\n      this.workItems.set(id, updatedItem);\n      return updatedItem;\n    }\n    \n    return undefined;\n  }\n  \n  async updateWorkItem(id: number, updates: Partial<WorkItem>): Promise<WorkItem | undefined> {\n    const workItem = this.workItems.get(id);\n    \n    if (workItem) {\n      const updatedItem = { \n        ...workItem, \n        ...updates, \n        updatedAt: new Date() \n      };\n      this.workItems.set(id, updatedItem);\n      return updatedItem;\n    }\n    \n    return undefined;\n  }\n  \n  async deleteWorkItem(id: number): Promise<boolean> {\n    return this.workItems.delete(id);\n  }\n}\n\nimport { DatabaseStorage } from './DatabaseStorage';\nimport { db } from './db';\n\n// Use DatabaseStorage if database is available, otherwise use MemStorage\nexport const storage = db ? new DatabaseStorage() : new MemStorage();\n\nif (!db) {\n  console.log('Using in-memory storage - data will not persist between restarts');\n}\n","size_bytes":9913},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: [\"all\"],\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2257},"shared/schema.ts":{"content":"import { pgTable, text, varchar, serial, decimal, boolean, timestamp, pgEnum, uniqueIndex, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { relations } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\n// PostgreSQL enum fields\nexport const statusEnum = pgEnum('status', ['TODO', 'IN_PROGRESS', 'DONE']);\nexport const priorityEnum = pgEnum('priority', ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']);\nexport const itemTypeEnum = pgEnum('item_type', ['EPIC', 'FEATURE', 'STORY', 'TASK', 'BUG']);\nexport const roleEnum = pgEnum('role', ['ADMIN', 'MEMBER', 'VIEWER']);\nexport const userRoleEnum = pgEnum('user_role', ['ADMIN', 'SCRUM_MASTER', 'USER']);\nexport const projectStatusEnum = pgEnum('project_status', ['PLANNING', 'ACTIVE', 'ARCHIVED', 'COMPLETED']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  email: varchar(\"email\", { length: 100 }).notNull().unique(),\n  fullName: varchar(\"full_name\", { length: 100 }).notNull(),\n  password: varchar(\"password\", { length: 100 }).notNull(),\n  avatarUrl: varchar(\"avatar_url\", { length: 255 }),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  role: userRoleEnum(\"user_role\").notNull().default(\"USER\"),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    emailIdx: uniqueIndex(\"user_email_idx\").on(table.email),\n    usernameIdx: uniqueIndex(\"user_username_idx\").on(table.username),\n  };\n});\n\n// Teams table\nexport const teams = mysqlTable(\"teams\", {\n  id: int(\"id\").autoincrement().primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  createdBy: int(\"created_by\").notNull().references(() => users.id, { onDelete: 'set null' }),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    nameIdx: index(\"team_name_idx\").on(table.name),\n    createdByIdx: index(\"team_created_by_idx\").on(table.createdBy),\n  };\n});\n\n// TeamMembers junction table\nexport const teamMembers = mysqlTable(\"team_members\", {\n  id: int(\"id\").autoincrement().primaryKey(),\n  teamId: int(\"team_id\").notNull().references(() => teams.id, { onDelete: 'cascade' }),\n  userId: int(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  role: mysqlEnum(\"role\", roleOptions).notNull().default(\"MEMBER\"),\n  joinedAt: timestamp(\"joined_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    teamUserIdx: uniqueIndex(\"team_user_idx\").on(table.teamId, table.userId),\n    teamIdx: index(\"team_member_team_idx\").on(table.teamId),\n    userIdx: index(\"team_member_user_idx\").on(table.userId),\n  };\n});\n\n// Projects table\nexport const projects = mysqlTable(\"projects\", {\n  id: int(\"id\").autoincrement().primaryKey(),\n  key: varchar(\"key\", { length: 10 }).notNull().unique(), // Short project key for work item references (e.g., PROJ)\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  status: mysqlEnum(\"status\", projectStatusOptions).notNull().default(\"ACTIVE\"),\n  createdBy: int(\"created_by\").notNull().references(() => users.id, { onDelete: 'set null' }),\n  teamId: int(\"team_id\").references(() => teams.id, { onDelete: 'set null' }),\n  startDate: timestamp(\"start_date\"),\n  targetDate: timestamp(\"target_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    nameIdx: index(\"project_name_idx\").on(table.name),\n    keyIdx: uniqueIndex(\"project_key_idx\").on(table.key),\n    teamIdx: index(\"project_team_idx\").on(table.teamId),\n    statusIdx: index(\"project_status_idx\").on(table.status),\n  };\n});\n\n// WorkItems table (for Epics, Features, Stories, Tasks, and Bugs)\nexport const workItems = mysqlTable(\"work_items\", {\n  id: int(\"id\").autoincrement().primaryKey(),\n  externalId: varchar(\"external_id\", { length: 20 }).notNull(), // e.g. PROJ-001, PROJ-002\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  type: mysqlEnum(\"type\", itemTypeOptions).notNull(), // EPIC, FEATURE, STORY, TASK, BUG\n  status: mysqlEnum(\"status\", statusOptions).notNull().default(\"TODO\"), // TODO, IN_PROGRESS, DONE\n  priority: mysqlEnum(\"priority\", priorityOptions).default(\"MEDIUM\"), // LOW, MEDIUM, HIGH, CRITICAL\n  projectId: int(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  parentId: int(\"parent_id\"), // For hierarchy - self-reference\n  assigneeId: int(\"assignee_id\").references(() => users.id, { onDelete: 'set null' }), // Assigned to\n  reporterId: int(\"reporter_id\").references(() => users.id, { onDelete: 'set null' }), // Created by\n  estimate: decimal(\"estimate\"), // Story points or hours as decimal for better querying\n  startDate: timestamp(\"start_date\"), // For timeline view\n  endDate: timestamp(\"end_date\"), // For timeline view\n  completedAt: timestamp(\"completed_at\"), // When item was marked as done\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    externalIdIdx: uniqueIndex(\"work_item_external_id_idx\").on(table.externalId),\n    projectIdx: index(\"work_item_project_idx\").on(table.projectId),\n    parentIdx: index(\"work_item_parent_idx\").on(table.parentId),\n    typeStatusIdx: index(\"work_item_type_status_idx\").on(table.type, table.status),\n    assigneeIdx: index(\"work_item_assignee_idx\").on(table.assigneeId),\n    reporterIdx: index(\"work_item_reporter_idx\").on(table.reporterId),\n  };\n});\n\n// Comments on work items\nexport const comments = mysqlTable(\"comments\", {\n  id: int(\"id\").autoincrement().primaryKey(),\n  workItemId: int(\"work_item_id\").notNull().references(() => workItems.id, { onDelete: 'cascade' }),\n  userId: int(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    workItemIdx: index(\"comment_work_item_idx\").on(table.workItemId),\n    userIdx: index(\"comment_user_idx\").on(table.userId),\n  };\n});\n\n// WorkItem history/audit log\nexport const workItemHistory = mysqlTable(\"work_item_history\", {\n  id: int(\"id\").autoincrement().primaryKey(),\n  workItemId: int(\"work_item_id\").notNull().references(() => workItems.id, { onDelete: 'cascade' }),\n  userId: int(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  field: varchar(\"field\", { length: 50 }).notNull(), // field that changed\n  oldValue: text(\"old_value\"),\n  newValue: text(\"new_value\"),\n  changedAt: timestamp(\"changed_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    workItemIdx: index(\"history_work_item_idx\").on(table.workItemId),\n    changedAtIdx: index(\"history_changed_at_idx\").on(table.changedAt),\n  };\n});\n\n// File attachments for work items\nexport const attachments = mysqlTable(\"attachments\", {\n  id: int(\"id\").autoincrement().primaryKey(),\n  workItemId: int(\"work_item_id\").notNull().references(() => workItems.id, { onDelete: 'cascade' }),\n  userId: int(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  fileName: varchar(\"file_name\", { length: 255 }).notNull(),\n  fileSize: int(\"file_size\").notNull(),\n  fileType: varchar(\"file_type\", { length: 100 }).notNull(),\n  filePath: varchar(\"file_path\", { length: 255 }).notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    workItemIdx: index(\"attachment_work_item_idx\").on(table.workItemId),\n  };\n});\n\n// Define table relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  createdTeams: many(teams, { relationName: \"userCreatedTeams\" }),\n  teamMemberships: many(teamMembers, { relationName: \"userTeamMemberships\" }),\n  createdProjects: many(projects, { relationName: \"userCreatedProjects\" }),\n  assignedWorkItems: many(workItems, { relationName: \"userAssignedWorkItems\" }),\n  reportedWorkItems: many(workItems, { relationName: \"userReportedWorkItems\" }),\n  comments: many(comments, { relationName: \"userComments\" }),\n}));\n\nexport const teamsRelations = relations(teams, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [teams.createdBy],\n    references: [users.id],\n    relationName: \"userCreatedTeams\",\n  }),\n  members: many(teamMembers, { relationName: \"teamMembers\" }),\n  projects: many(projects, { relationName: \"teamProjects\" }),\n}));\n\nexport const teamMembersRelations = relations(teamMembers, ({ one }) => ({\n  team: one(teams, {\n    fields: [teamMembers.teamId],\n    references: [teams.id],\n    relationName: \"teamMembers\",\n  }),\n  user: one(users, {\n    fields: [teamMembers.userId],\n    references: [users.id],\n    relationName: \"userTeamMemberships\",\n  }),\n}));\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [projects.createdBy],\n    references: [users.id],\n    relationName: \"userCreatedProjects\",\n  }),\n  team: one(teams, {\n    fields: [projects.teamId],\n    references: [teams.id],\n    relationName: \"teamProjects\",\n  }),\n  workItems: many(workItems, { relationName: \"projectWorkItems\" }),\n}));\n\nexport const workItemsRelations = relations(workItems, ({ one, many }) => ({\n  project: one(projects, {\n    fields: [workItems.projectId],\n    references: [projects.id],\n    relationName: \"projectWorkItems\",\n  }),\n  parent: one(workItems, {\n    fields: [workItems.parentId],\n    references: [workItems.id],\n    relationName: \"childWorkItems\",\n  }),\n  children: many(workItems, { relationName: \"childWorkItems\" }),\n  assignee: one(users, {\n    fields: [workItems.assigneeId],\n    references: [users.id],\n    relationName: \"userAssignedWorkItems\",\n  }),\n  reporter: one(users, {\n    fields: [workItems.reporterId],\n    references: [users.id],\n    relationName: \"userReportedWorkItems\",\n  }),\n  comments: many(comments, { relationName: \"workItemComments\" }),\n  history: many(workItemHistory, { relationName: \"workItemHistory\" }),\n  attachments: many(attachments, { relationName: \"workItemAttachments\" }),\n}));\n\nexport const commentsRelations = relations(comments, ({ one }) => ({\n  workItem: one(workItems, {\n    fields: [comments.workItemId],\n    references: [workItems.id],\n    relationName: \"workItemComments\",\n  }),\n  user: one(users, {\n    fields: [comments.userId],\n    references: [users.id],\n    relationName: \"userComments\",\n  }),\n}));\n\nexport const workItemHistoryRelations = relations(workItemHistory, ({ one }) => ({\n  workItem: one(workItems, {\n    fields: [workItemHistory.workItemId],\n    references: [workItems.id],\n    relationName: \"workItemHistory\",\n  }),\n  user: one(users, {\n    fields: [workItemHistory.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const attachmentsRelations = relations(attachments, ({ one }) => ({\n  workItem: one(workItems, {\n    fields: [attachments.workItemId],\n    references: [workItems.id],\n    relationName: \"workItemAttachments\",\n  }),\n  user: one(users, {\n    fields: [attachments.userId],\n    references: [users.id],\n  }),\n}));\n\n// Define Zod schemas for insertion\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true, lastLogin: true });\nexport const insertTeamSchema = createInsertSchema(teams).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({ id: true, joinedAt: true, updatedAt: true });\nexport const insertProjectSchema = createInsertSchema(projects).omit({ id: true, createdAt: true, updatedAt: true }).extend({\n  status: z.enum(['PLANNING', 'ACTIVE', 'ARCHIVED', 'COMPLETED']).default('ACTIVE')\n});\nexport const insertWorkItemSchema = createInsertSchema(workItems).omit({ id: true, createdAt: true, updatedAt: true, completedAt: true });\nexport const insertCommentSchema = createInsertSchema(comments).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertAttachmentSchema = createInsertSchema(attachments).omit({ id: true, uploadedAt: true });\n\n// Email validation for corporate emails\nexport const emailSchema = z.string().email().refine(\n  (email) => {\n    const domain = email.split('@')[1];\n    // Examples of personal email domains to reject\n    const personalDomains = [\n      'gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', \n      'aol.com', 'icloud.com', 'protonmail.com', 'mail.com'\n    ];\n    return !personalDomains.includes(domain);\n  },\n  { message: \"Only corporate email addresses are allowed\" }\n);\n\n// Extended schema with corporate email validation\nexport const insertUserWithValidationSchema = insertUserSchema.extend({\n  email: emailSchema,\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Define types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Team = typeof teams.$inferSelect;\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type WorkItem = typeof workItems.$inferSelect;\nexport type InsertWorkItem = z.infer<typeof insertWorkItemSchema>;\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Attachment = typeof attachments.$inferSelect;\nexport type InsertAttachment = z.infer<typeof insertAttachmentSchema>;\nexport type WorkItemHistory = typeof workItemHistory.$inferSelect;\n","size_bytes":14129},"api/config/cors.php":{"content":"<?php\n// CORS Headers\nif (isset($_SERVER['HTTP_ORIGIN'])) {\n    header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");\n    header('Access-Control-Allow-Credentials: true');\n    header('Access-Control-Max-Age: 86400');\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n    if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))\n        header(\"Access-Control-Allow-Methods: GET, POST, PATCH, DELETE, OPTIONS\");\n    \n    if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))\n        header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");\n    \n    exit(0);\n}\n\nheader('Content-Type: application/json');\n?>","size_bytes":658},"api/config/database.php":{"content":"<?php\nclass Database {\n    private $conn;\n\n    public function getConnection() {\n        $this->conn = null;\n        \n        try {\n            // Always use MySQL configuration for local deployment\n            $host = 'localhost';\n            $port = '3306';\n            $dbname = 'agile';\n            $username = 'root';\n            $password = '';\n            $dsn = \"mysql:host=$host;port=$port;dbname=$dbname;charset=utf8mb4\";\n\n            $this->conn = new PDO($dsn, $username, $password);\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n            $this->conn->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);\n        } catch(PDOException $exception) {\n            // Don't output connection error to response, log it instead\n            error_log(\"Database connection error: \" . $exception->getMessage());\n        }\n        return $this->conn;\n    }\n}\n?>","size_bytes":910},"api/config/init_db.php":{"content":"<?php\nrequire_once 'database.php';\n\nfunction initializeDatabase() {\n    $database = new Database();\n    $conn = $database->getConnection();\n    \n    try {\n        // Insert sample users for MySQL database\n        $admin_password = password_hash('admin123', PASSWORD_BCRYPT);\n        $scrum_password = password_hash('scrum123', PASSWORD_BCRYPT);\n        $user_password = password_hash('user123', PASSWORD_BCRYPT);\n        \n        // Check if users already exist before inserting\n        $stmt = $conn->prepare(\"SELECT COUNT(*) FROM users WHERE username = ?\");\n        \n        $users = [\n            ['admin', 'admin@cybaemtech.com', 'Admin User', $admin_password, 'ADMIN'],\n            ['scrummaster', 'scrum@cybaemtech.com', 'Scrum Master', $scrum_password, 'SCRUM_MASTER'],\n            ['developer', 'dev@cybaemtech.com', 'Developer User', $user_password, 'USER'],\n            ['manager', 'manager@cybaemtech.com', 'Project Manager', $user_password, 'SCRUM_MASTER'],\n            ['tester', 'tester@cybaemtech.com', 'QA Tester', $user_password, 'USER']\n        ];\n        \n        foreach ($users as $user) {\n            $stmt->execute([$user[0]]);\n            if ($stmt->fetchColumn() == 0) {\n                $insertStmt = $conn->prepare(\"INSERT INTO users (username, email, full_name, password, user_role) VALUES (?, ?, ?, ?, ?)\");\n                $insertStmt->execute($user);\n            }\n        }\n        \n        echo json_encode(['message' => 'Database initialized successfully with sample users']);\n        \n    } catch(PDOException $e) {\n        echo json_encode(['error' => 'Database initialization failed: ' . $e->getMessage()]);\n    }\n}\n\n// If script is called directly, initialize database\nif (basename(__FILE__) == basename($_SERVER['SCRIPT_NAME'])) {\n    initializeDatabase();\n}\n?>","size_bytes":1799},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Projects from \"@/pages/projects\";\nimport ProjectDetails from \"@/pages/project-details\";\nimport Teams from \"@/pages/teams\";\nimport TeamDetails from \"@/pages/team-details\";\nimport Calendar from \"@/pages/calendar\";\nimport Reports from \"@/pages/reports\";\nimport LoginPage from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport { useAuth } from \"./hooks/useAuth\";\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  const [location, setLocation] = useLocation();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect \"/\" to \"/dashboard\" if authenticated, else to \"/login\"\n  useEffect(() => {\n    if (!isLoading && location === \"/\") {\n      setLocation(isAuthenticated ? \"/dashboard\" : \"/login\");\n    }\n  }, [location, setLocation, isAuthenticated, isLoading]);\n\n  // Show loading spinner while checking auth\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/register\" component={Register} />\n\n      {/* Protected routes - redirect to login if not authenticated */}\n      <Route path=\"/dashboard\">\n        {isAuthenticated ? <Dashboard /> : <LoginPage />}\n      </Route>\n      <Route path=\"/projects\">\n        {isAuthenticated ? <Projects /> : <LoginPage />}\n      </Route>\n      <Route path=\"/projects/:id\">\n        {isAuthenticated ? <ProjectDetails /> : <LoginPage />}\n      </Route>\n      <Route path=\"/teams\">\n        {isAuthenticated ? <Teams /> : <LoginPage />}\n      </Route>\n      <Route path=\"/teams/:id\">\n        {isAuthenticated ? <TeamDetails /> : <LoginPage />}\n      </Route>\n      <Route path=\"/calendar\">\n        {isAuthenticated ? <Calendar /> : <LoginPage />}\n      </Route>\n      <Route path=\"/reports\">\n        {isAuthenticated ? <Reports /> : <LoginPage />}\n      </Route>\n\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2720},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n      --background: 0 0% 100%;\n--foreground: 20 14.3% 4.1%;\n--muted: 60 4.8% 95.9%;\n--muted-foreground: 25 5.3% 44.7%;\n--popover: 0 0% 100%;\n--popover-foreground: 20 14.3% 4.1%;\n--card: 0 0% 100%;\n--card-foreground: 20 14.3% 4.1%;\n--border: 20 5.9% 90%;\n--input: 20 5.9% 90%;\n--primary: 207 90% 54%;\n--primary-foreground: 211 100% 99%;\n--secondary: 60 4.8% 95.9%;\n--secondary-foreground: 24 9.8% 10%;\n--accent: 60 4.8% 95.9%;\n--accent-foreground: 24 9.8% 10%;\n--destructive: 0 84.2% 60.2%;\n--destructive-foreground: 60 9.1% 97.8%;\n--ring: 20 14.3% 4.1%;\n--radius: 0.5rem;\n  }\n  .dark {\n      --background: 240 10% 3.9%;\n--foreground: 0 0% 98%;\n--muted: 240 3.7% 15.9%;\n--muted-foreground: 240 5% 64.9%;\n--popover: 240 10% 3.9%;\n--popover-foreground: 0 0% 98%;\n--card: 240 10% 3.9%;\n--card-foreground: 0 0% 98%;\n--border: 240 3.7% 15.9%;\n--input: 240 3.7% 15.9%;\n--primary: 207 90% 54%;\n--primary-foreground: 211 100% 99%;\n--secondary: 240 3.7% 15.9%;\n--secondary-foreground: 0 0% 98%;\n--accent: 240 3.7% 15.9%;\n--accent-foreground: 0 0% 98%;\n--destructive: 0 62.8% 30.6%;\n--destructive-foreground: 0 0% 98%;\n--ring: 240 4.9% 83.9%;\n--radius: 0.5rem;\n  }\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":1352},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <ThemeProvider defaultTheme=\"light\" storageKey=\"projecthub-theme\">\n    <App />\n  </ThemeProvider>\n);\n","size_bytes":315},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-modal.tsx":{"content":"import { useState } from \"react\";\n\ntype ModalType = \n  | \"createItem\" \n  | \"inviteMembers\" \n  | \"createProject\" \n  | \"createTeam\"\n  | \"editItem\"\n  | \"deleteItem\"\n  | \"addTeamMembers\";\n\nexport function useModal() {\n  const [modalType, setModalType] = useState<ModalType | null>(null);\n  const [modalProps, setModalProps] = useState<any>(null);\n  \n  const openModal = (type: ModalType, props?: any) => {\n    console.log(\"Opening modal:\", type, props);\n    setModalType(type);\n    setModalProps(props || null);\n  };\n  \n  const closeModal = () => {\n    console.log(\"Closing modal\");\n    setModalType(null);\n    setModalProps(null);\n  };\n  \n  return {\n    modalType,\n    modalProps,\n    openModal,\n    closeModal,\n    isOpen: modalType !== null,\n  };\n}\n","size_bytes":748},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3890},"client/src/hooks/useAuth.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"../../../shared/schema\";\n\nexport function useAuth() {\n  const {\n    data: user,\n    isLoading,\n    isError,\n  } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Not authenticated\");\n      }\n\n      return res.json();\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchInterval: false,\n    refetchIntervalInBackground: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isError,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":737},"client/src/lib/data-utils.ts":{"content":"import { WorkItem, User, Team } from \"@shared/schema\";\n\n/**\n * Calculate statistics for work items in a project\n */\nexport function calculateProjectStats(workItems: WorkItem[]) {\n  // Total counts\n  const totalItems = workItems.length;\n  const completedItems = workItems.filter(item => item.status === 'DONE').length;\n  const completionPercentage = totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;\n\n  // Calculate average time to resolve for completed items\n  let avgTimeToResolve = 0;\n  const completedWithDates = workItems.filter(item => \n    item.status === 'DONE' && item.createdAt && item.completedAt\n  );\n  \n  if (completedWithDates.length > 0) {\n    const totalDays = completedWithDates.reduce((sum, item) => {\n      const createdDate = new Date(item.createdAt);\n      const completedDate = new Date(item.completedAt as Date);\n      const daysDiff = Math.ceil((completedDate.getTime() - createdDate.getTime()) / (1000 * 3600 * 24));\n      return sum + daysDiff;\n    }, 0);\n    avgTimeToResolve = Math.round(totalDays / completedWithDates.length);\n  }\n\n  // Status counts\n  const statusCounts = {\n    'TODO': workItems.filter(item => item.status === 'TODO').length,\n    'IN_PROGRESS': workItems.filter(item => item.status === 'IN_PROGRESS').length,\n    'DONE': completedItems,\n  };\n\n  // Type counts\n  const typeCounts = {\n    'EPIC': workItems.filter(item => item.type === 'EPIC').length,\n    'FEATURE': workItems.filter(item => item.type === 'FEATURE').length,\n    'STORY': workItems.filter(item => item.type === 'STORY').length,\n    'TASK': workItems.filter(item => item.type === 'TASK').length,\n    'BUG': workItems.filter(item => item.type === 'BUG').length,\n  };\n\n  // Priority counts\n  const priorityCounts = {\n    'LOW': workItems.filter(item => item.priority === 'LOW').length,\n    'MEDIUM': workItems.filter(item => item.priority === 'MEDIUM').length,\n    'HIGH': workItems.filter(item => item.priority === 'HIGH').length,\n    'CRITICAL': workItems.filter(item => item.priority === 'CRITICAL').length,\n  };\n\n  return {\n    totalItems,\n    completedItems,\n    completionPercentage,\n    avgTimeToResolve,\n    statusCounts,\n    typeCounts,\n    priorityCounts,\n    todoCount: statusCounts['TODO'],\n    inProgressCount: statusCounts['IN_PROGRESS'],\n    doneCount: statusCounts['DONE'],\n    epics: typeCounts['EPIC'],\n    features: typeCounts['FEATURE'],\n    stories: typeCounts['STORY'],\n    tasks: typeCounts['TASK'],\n    bugs: typeCounts['BUG'],\n  };\n}\n\n/**\n * Get formatted title for work item type\n */\nexport function getItemTypeTitle(type: string): string {\n  switch(type) {\n    case 'EPIC': return 'Epic';\n    case 'FEATURE': return 'Feature';\n    case 'STORY': return 'Story';\n    case 'TASK': return 'Task';\n    case 'BUG': return 'Bug';\n    default: return type;\n  }\n}\n\n/**\n * Get formatted title for item status\n */\nexport function getStatusTitle(status: string): string {\n  switch(status) {\n    case 'TODO': return 'To Do';\n    case 'IN_PROGRESS': return 'In Progress';\n    case 'DONE': return 'Done';\n    default: return status;\n  }\n}\n\n/**\n * Get status color based on status value\n */\nexport function getStatusColor(status: string): string {\n  switch(status) {\n    case 'TODO': return 'bg-blue-500';\n    case 'IN_PROGRESS': return 'bg-orange-500';\n    case 'DONE': return 'bg-green-500';\n    default: return 'bg-gray-500';\n  }\n}\n\n/**\n * Get priority color based on priority value\n */\nexport function getPriorityColor(priority: string): string {\n  switch(priority) {\n    case 'LOW': return 'bg-gray-100 text-gray-800';\n    case 'MEDIUM': return 'bg-yellow-100 text-yellow-800';\n    case 'HIGH': return 'bg-orange-100 text-orange-800';\n    case 'CRITICAL': return 'bg-red-100 text-red-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n}\n\n/**\n * Get work items that are children of a specific parent\n */\nexport function getChildWorkItems(workItems: WorkItem[], parentId: number): WorkItem[] {\n  return workItems.filter(item => item.parentId === parentId);\n}\n\n/**\n * Get team initials from team name (first letter of each word, max 2 characters)\n */\nexport function getTeamInitials(teamName: string): string {\n  return teamName\n    .split(' ')\n    .map(word => word[0])\n    .join('')\n    .substring(0, 2)\n    .toUpperCase();\n}\n\n/**\n * Get user initials from full name (first letter of each name part)\n */\nexport function getUserInitials(fullName: string): string {\n  return fullName\n    .split(' ')\n    .map(name => name[0])\n    .join('')\n    .toUpperCase();\n}\n\n/**\n * Format a date in a readable format\n */\nexport function formatDate(date: Date | string): string {\n  if (!date) return '';\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }).format(dateObj);\n}\n\n/**\n * Get the user object by ID from a list of users\n */\nexport function getUserById(users: User[], userId: number | null | undefined): User | undefined {\n  if (!userId) return undefined;\n  return users.find(user => user.id === userId);\n}\n\n/**\n * Get the team object by ID from a list of teams\n */\nexport function getTeamById(teams: Team[], teamId: number | null | undefined): Team | undefined {\n  if (!teamId) return undefined;\n  return teams.find(team => team.id === teamId);\n}\n","size_bytes":5318},"client/src/lib/email-validation.ts":{"content":"/**\n * Helper functions for email validation\n */\n\n/**\n * Validates an array of email addresses to check if they are corporate emails\n * @param emails Array of email addresses to validate\n * @returns Object containing arrays of valid and invalid email addresses\n */\nexport function validateCorporateEmails(emails: string[]): { valid: string[], invalid: string[] } {\n  const valid: string[] = [];\n  const invalid: string[] = [];\n  \n  // List of common personal email domains to reject\n  const personalDomains = [\n    'gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', \n    'aol.com', 'icloud.com', 'protonmail.com', 'mail.com',\n    'live.com', 'msn.com', 'me.com', 'ymail.com', 'gmx.com'\n  ];\n  \n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  \n  for (const email of emails) {\n    const trimmedEmail = email.trim();\n    \n    // Skip empty emails\n    if (!trimmedEmail) continue;\n    \n    // Check if it's a valid email format\n    if (!emailRegex.test(trimmedEmail)) {\n      invalid.push(trimmedEmail);\n      continue;\n    }\n    \n    // Check if it's not a personal domain\n    const domain = trimmedEmail.split('@')[1].toLowerCase();\n    if (personalDomains.includes(domain)) {\n      invalid.push(trimmedEmail);\n    } else {\n      valid.push(trimmedEmail);\n    }\n  }\n  \n  return { valid, invalid };\n}\n\n/**\n * Checks if a single email address is a valid corporate email\n * @param email Email address to validate\n * @returns Boolean indicating if the email is valid\n */\nexport function isValidCorporateEmail(email: string): boolean {\n  const { valid } = validateCorporateEmails([email]);\n  return valid.length === 1;\n}\n","size_bytes":1624},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calendar.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ArrowRight, Calendar as CalendarIcon, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays, addMonths, addWeeks, isSameMonth, isSameDay, parseISO, isValid } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ntype ViewMode = 'month' | 'week';\n\ninterface WorkItem {\n  id: number;\n  externalId: string;\n  title: string;\n  description: string | null;\n  type: 'EPIC' | 'FEATURE' | 'STORY' | 'TASK' | 'BUG';\n  status: 'TODO' | 'IN_PROGRESS' | 'DONE';\n  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' | null;\n  projectId: number;\n  parentId: number | null;\n  assigneeId: number | null;\n  reporterId: number;\n  estimate: number | null;\n  startDate: string | null;\n  endDate: string | null;\n  createdAt: string;\n  updatedAt: string;\n  completedAt: string | null;\n}\n\nconst priorityColors = {\n  LOW: 'bg-green-100 text-green-800 border-green-200',\n  MEDIUM: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n  HIGH: 'bg-orange-100 text-orange-800 border-orange-200',\n  CRITICAL: 'bg-red-100 text-red-800 border-red-200',\n};\n\nconst typeColors = {\n  EPIC: 'bg-purple-100 text-purple-800',\n  FEATURE: 'bg-blue-100 text-blue-800',\n  STORY: 'bg-green-100 text-green-800',\n  TASK: 'bg-gray-100 text-gray-800',\n  BUG: 'bg-red-100 text-red-800',\n};\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [viewMode, setViewMode] = useState<ViewMode>('month');\n  \n  // Fetch current user\n  const { data: currentUser } = useQuery<any>({\n    queryKey: ['/api/users/64'],\n  });\n  \n  // Fetch teams data\n  const { data: teams = [] } = useQuery<any[]>({\n    queryKey: ['/api/teams'],\n  });\n  \n  // Fetch projects data\n  const { data: projects = [] } = useQuery<any[]>({\n    queryKey: ['/api/projects'],\n  });\n\n  // Fetch all work items from all projects\n  const { data: allWorkItems = [] } = useQuery<WorkItem[]>({\n    queryKey: ['/api/work-items/all'],\n    queryFn: async () => {\n      if (!projects.length) return [];\n      \n      const workItemPromises = projects.map(async (project: any) => {\n        const response = await fetch(`/api/projects/${project.id}/work-items`);\n        if (!response.ok) return [];\n        const items = await response.json();\n        return items.map((item: any) => ({\n          ...item,\n          projectKey: project.key,\n          projectName: project.name\n        }));\n      });\n      \n      const results = await Promise.all(workItemPromises);\n      return results.flat();\n    },\n    enabled: projects.length > 0,\n  });\n\n  // Filter work items that have dates\n  const workItemsWithDates = useMemo(() => {\n    return allWorkItems.filter((item: any) => {\n      const hasStartDate = item.startDate && isValid(parseISO(item.startDate));\n      const hasEndDate = item.endDate && isValid(parseISO(item.endDate));\n      return hasStartDate || hasEndDate;\n    });\n  }, [allWorkItems]);\n\n  // Generate calendar days based on view mode\n  const calendarDays = useMemo(() => {\n    if (viewMode === 'month') {\n      const monthStart = startOfMonth(currentDate);\n      const monthEnd = endOfMonth(currentDate);\n      const calendarStart = startOfWeek(monthStart);\n      const calendarEnd = endOfWeek(monthEnd);\n      \n      const days = [];\n      let day = calendarStart;\n      \n      while (day <= calendarEnd) {\n        days.push(day);\n        day = addDays(day, 1);\n      }\n      \n      return days;\n    } else {\n      // Week view\n      const weekStart = startOfWeek(currentDate);\n      const days = [];\n      \n      for (let i = 0; i < 7; i++) {\n        days.push(addDays(weekStart, i));\n      }\n      \n      return days;\n    }\n  }, [currentDate, viewMode]);\n\n  // Get work items for a specific date\n  const getWorkItemsForDate = (date: Date) => {\n    return workItemsWithDates.filter((item: any) => {\n      const startDate = item.startDate ? parseISO(item.startDate) : null;\n      const endDate = item.endDate ? parseISO(item.endDate) : null;\n      \n      // Check if the date falls within the work item's date range\n      if (startDate && endDate) {\n        return date >= startDate && date <= endDate;\n      } else if (startDate) {\n        return isSameDay(date, startDate);\n      } else if (endDate) {\n        return isSameDay(date, endDate);\n      }\n      \n      return false;\n    });\n  };\n\n  const navigateDate = (direction: 'prev' | 'next') => {\n    if (viewMode === 'month') {\n      setCurrentDate(prev => direction === 'next' ? addMonths(prev, 1) : addMonths(prev, -1));\n    } else {\n      setCurrentDate(prev => direction === 'next' ? addWeeks(prev, 1) : addWeeks(prev, -1));\n    }\n  };\n\n  const formatDateHeader = () => {\n    if (viewMode === 'month') {\n      return format(currentDate, 'MMMM yyyy');\n    } else {\n      const weekStart = startOfWeek(currentDate);\n      const weekEnd = endOfWeek(currentDate);\n      return `${format(weekStart, 'MMM d')} - ${format(weekEnd, 'MMM d, yyyy')}`;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-neutral-50\">\n      <Sidebar\n        user={currentUser}\n        teams={teams}\n        projects={projects}\n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <main className=\"flex-1 overflow-auto p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center\">\n              <Button variant=\"ghost\" className=\"mr-6 font-medium\" asChild>\n                <a href=\"/projects\">\n                  <ArrowLeft className=\"mr-1 h-4 w-4\" />\n                  Back to projects\n                </a>\n              </Button>\n              <h1 className=\"text-2xl font-bold flex items-center\">\n                <CalendarIcon className=\"mr-2 h-6 w-6\" />\n                Calendar\n              </h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* View Mode Toggle */}\n              <div className=\"flex border rounded-lg\">\n                <Button\n                  variant={viewMode === 'month' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('month')}\n                  className=\"rounded-r-none\"\n                >\n                  Month\n                </Button>\n                <Button\n                  variant={viewMode === 'week' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('week')}\n                  className=\"rounded-l-none\"\n                >\n                  Week\n                </Button>\n              </div>\n              \n              {/* Navigation */}\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"sm\" onClick={() => navigateDate('prev')}>\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setCurrentDate(new Date())}>\n                  Today\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => navigateDate('next')}>\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <h2 className=\"text-lg font-semibold min-w-[200px] text-center\">\n                {formatDateHeader()}\n              </h2>\n            </div>\n          </div>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">\n                {viewMode === 'month' ? 'Monthly View' : 'Weekly View'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* Calendar Grid */}\n              <div className={cn(\n                \"grid gap-1\",\n                viewMode === 'month' ? \"grid-cols-7\" : \"grid-cols-7\"\n              )}>\n                {/* Day Headers */}\n                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                  <div key={day} className=\"p-2 text-center font-semibold text-sm text-gray-600 border-b\">\n                    {day}\n                  </div>\n                ))}\n                \n                {/* Calendar Days */}\n                {calendarDays.map((day, index) => {\n                  const workItems = getWorkItemsForDate(day);\n                  const isCurrentMonth = viewMode === 'week' || isSameMonth(day, currentDate);\n                  const isToday = isSameDay(day, new Date());\n                  \n                  return (\n                    <div\n                      key={index}\n                      className={cn(\n                        \"border border-gray-200 min-h-[120px] p-1\",\n                        !isCurrentMonth && \"bg-gray-50 text-gray-400\",\n                        isToday && \"bg-blue-50 border-blue-300\"\n                      )}\n                    >\n                      <div className={cn(\n                        \"text-sm font-medium p-1\",\n                        isToday && \"text-blue-600\"\n                      )}>\n                        {format(day, 'd')}\n                      </div>\n                      \n                      {/* Work Items */}\n                      <div className=\"space-y-1\">\n                        {workItems.slice(0, viewMode === 'month' ? 3 : 8).map((item: any) => (\n                          <div\n                            key={item.id}\n                            className={cn(\n                              \"text-xs p-1 rounded text-center cursor-pointer hover:opacity-80 border\",\n                              typeColors[item.type as keyof typeof typeColors]\n                            )}\n                            title={`${item.externalId}: ${item.title} (${item.projectName})`}\n                          >\n                            <div className=\"font-medium truncate\">{item.externalId}</div>\n                            <div className=\"truncate\">{item.title}</div>\n                            {item.priority && (\n                              <Badge\n                                variant=\"secondary\"\n                                className={cn(\n                                  \"text-xs px-1 py-0\",\n                                  priorityColors[item.priority as keyof typeof priorityColors]\n                                )}\n                              >\n                                {item.priority}\n                              </Badge>\n                            )}\n                          </div>\n                        ))}\n                        {workItems.length > (viewMode === 'month' ? 3 : 8) && (\n                          <div className=\"text-xs text-gray-500 text-center\">\n                            +{workItems.length - (viewMode === 'month' ? 3 : 8)} more\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              \n              {/* Legend */}\n              <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                <h3 className=\"font-semibold mb-2\">Legend</h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                  <div>\n                    <div className=\"text-sm font-medium mb-1\">Work Item Types</div>\n                    <div className=\"space-y-1\">\n                      {Object.entries(typeColors).map(([type, color]) => (\n                        <div key={type} className=\"flex items-center space-x-2\">\n                          <div className={cn(\"w-3 h-3 rounded\", color)}></div>\n                          <span className=\"text-xs\">{type}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium mb-1\">Priority Levels</div>\n                    <div className=\"space-y-1\">\n                      {Object.entries(priorityColors).map(([priority, color]) => (\n                        <div key={priority} className=\"flex items-center space-x-2\">\n                          <div className={cn(\"w-3 h-3 rounded border\", color)}></div>\n                          <span className=\"text-xs\">{priority}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":12744},"client/src/pages/dashboard.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Loader2, AlertCircle, BarChart3, Calendar, Clock, Target, TrendingUp, Users, CheckCircle, AlertTriangle, Bug, Zap } from \"lucide-react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useLocation } from \"wouter\";\nimport { Project, WorkItem, User, Team } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\nimport { format, parseISO, isValid, isBefore, isAfter, addDays, differenceInDays } from \"date-fns\";\n\ninterface DashboardStats {\n  totalProjects: number;\n  activeProjects: number;\n  totalWorkItems: number;\n  completedWorkItems: number;\n  inProgressWorkItems: number;\n  overdueWorkItems: number;\n  completionRate: number;\n}\n\ninterface ProjectProgress {\n  project: Project;\n  totalItems: number;\n  completedItems: number;\n  inProgressItems: number;\n  overdueItems: number;\n  completionRate: number;\n  recentActivity: WorkItem[];\n}\n\nconst priorityColors = {\n  LOW: 'bg-green-100 text-green-800 border-green-200',\n  MEDIUM: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n  HIGH: 'bg-orange-100 text-orange-800 border-orange-200',\n  CRITICAL: 'bg-red-100 text-red-800 border-red-200',\n};\n\nconst typeIcons = {\n  EPIC: Target,\n  FEATURE: Zap,\n  STORY: CheckCircle,\n  TASK: Clock,\n  BUG: Bug,\n};\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  \n  // Fetch current user\n  const { data: currentUser } = useQuery<User>({\n    queryKey: ['/api/users/64'],\n  });\n  \n  // Fetch teams data\n  const { data: teams = [] } = useQuery<Team[]>({\n    queryKey: ['/api/teams'],\n  });\n  \n  // Fetch list of projects\n  const { \n    data: projects = [], \n    isLoading: isLoadingProjects \n  } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n  \n  // Fetch all work items from all projects\n  const { data: allWorkItems = [], isLoading: isLoadingWorkItems } = useQuery<WorkItem[]>({\n    queryKey: ['/api/work-items/all'],\n    queryFn: async () => {\n      if (!projects.length) return [];\n      \n      const workItemPromises = projects.map(async (project: Project) => {\n        const response = await fetch(`/api/projects/${project.id}/work-items`);\n        if (!response.ok) return [];\n        const items = await response.json();\n        return items.map((item: WorkItem) => ({\n          ...item,\n          projectKey: project.key,\n          projectName: project.name\n        }));\n      });\n      \n      const results = await Promise.all(workItemPromises);\n      return results.flat();\n    },\n    enabled: projects.length > 0,\n  });\n\n  // Calculate dashboard statistics\n  const dashboardStats = useMemo((): DashboardStats => {\n    const totalProjects = projects.length;\n    const activeProjects = projects.filter(p => p.status === 'ACTIVE').length;\n    const totalWorkItems = allWorkItems.length;\n    const completedWorkItems = allWorkItems.filter(item => item.status === 'DONE').length;\n    const inProgressWorkItems = allWorkItems.filter(item => item.status === 'IN_PROGRESS').length;\n    \n    // Calculate overdue items (items with end dates that have passed and are not completed)\n    const now = new Date();\n    const overdueWorkItems = allWorkItems.filter(item => {\n      if (item.status === 'DONE') return false;\n      if (!item.endDate) return false;\n      const endDate = typeof item.endDate === 'string' ? parseISO(item.endDate) : item.endDate;\n      return isValid(endDate) && isBefore(endDate, now);\n    }).length;\n    \n    const completionRate = totalWorkItems > 0 ? Math.round((completedWorkItems / totalWorkItems) * 100) : 0;\n    \n    return {\n      totalProjects,\n      activeProjects,\n      totalWorkItems,\n      completedWorkItems,\n      inProgressWorkItems,\n      overdueWorkItems,\n      completionRate,\n    };\n  }, [projects, allWorkItems]);\n\n  // Calculate project progress\n  const projectProgress = useMemo((): ProjectProgress[] => {\n    return projects.map(project => {\n      const projectItems = allWorkItems.filter((item: any) => item.projectId === project.id);\n      const totalItems = projectItems.length;\n      const completedItems = projectItems.filter(item => item.status === 'DONE').length;\n      const inProgressItems = projectItems.filter(item => item.status === 'IN_PROGRESS').length;\n      \n      const now = new Date();\n      const overdueItems = projectItems.filter(item => {\n        if (item.status === 'DONE') return false;\n        if (!item.endDate) return false;\n        const endDate = typeof item.endDate === 'string' ? parseISO(item.endDate) : item.endDate;\n        return isValid(endDate) && isBefore(endDate, now);\n      }).length;\n      \n      const completionRate = totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;\n      \n      // Get recent activity (items updated in last 7 days)\n      const sevenDaysAgo = addDays(new Date(), -7);\n      const recentActivity = projectItems\n        .filter(item => {\n          const updatedAt = typeof item.updatedAt === 'string' ? parseISO(item.updatedAt) : item.updatedAt;\n          return isValid(updatedAt) && isAfter(updatedAt, sevenDaysAgo);\n        })\n        .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())\n        .slice(0, 5);\n      \n      return {\n        project,\n        totalItems,\n        completedItems,\n        inProgressItems,\n        overdueItems,\n        completionRate,\n        recentActivity,\n      };\n    });\n  }, [projects, allWorkItems]);\n\n  // Get work items by type\n  const workItemsByType = useMemo(() => {\n    const types = ['EPIC', 'FEATURE', 'STORY', 'TASK', 'BUG'];\n    return types.map(type => ({\n      type,\n      count: allWorkItems.filter(item => item.type === type).length,\n      completed: allWorkItems.filter(item => item.type === type && item.status === 'DONE').length,\n    }));\n  }, [allWorkItems]);\n\n  // Get upcoming deadlines\n  const upcomingDeadlines = useMemo(() => {\n    const now = new Date();\n    const nextTwoWeeks = addDays(now, 14);\n    \n    return allWorkItems\n      .filter(item => {\n        if (item.status === 'DONE') return false;\n        if (!item.endDate) return false;\n        const endDate = typeof item.endDate === 'string' ? parseISO(item.endDate) : item.endDate;\n        return isValid(endDate) && isAfter(endDate, now) && isBefore(endDate, nextTwoWeeks);\n      })\n      .sort((a, b) => {\n        const dateA = typeof a.endDate === 'string' ? parseISO(a.endDate!) : a.endDate!;\n        const dateB = typeof b.endDate === 'string' ? parseISO(b.endDate!) : b.endDate!;\n        return dateA.getTime() - dateB.getTime();\n      })\n      .slice(0, 15);\n  }, [allWorkItems]);\n\n  if (isLoadingProjects || isLoadingWorkItems) {\n    return (\n      <div className=\"flex h-screen bg-neutral-50\">\n        <Sidebar user={currentUser} teams={teams} projects={projects} />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n          <span className=\"ml-2\">Loading dashboard...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (projects.length === 0) {\n    return (\n      <div className=\"flex h-screen bg-neutral-50\">\n        <Sidebar user={currentUser} teams={teams} projects={projects} />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No Projects Found</h3>\n            <p className=\"text-neutral-600 mb-4\">You don't have any projects yet.</p>\n            <button \n              onClick={() => setLocation('/projects')}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\n            >\n              Go to Projects\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-neutral-50\">\n      <Sidebar user={currentUser} teams={teams} projects={projects} />\n      \n      <div className=\"flex-1 overflow-auto\">\n        <main className=\"p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Dashboard</h1>\n            <p className=\"text-gray-600\">Overview of your project portfolio and work progress</p>\n          </div>\n\n          {/* Key Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Projects</CardTitle>\n                <BarChart3 className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{dashboardStats.totalProjects}</div>\n                <p className=\"text-xs text-gray-600\">\n                  {dashboardStats.activeProjects} active\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Work Items</CardTitle>\n                <Target className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{dashboardStats.totalWorkItems}</div>\n                <p className=\"text-xs text-gray-600\">\n                  {dashboardStats.inProgressWorkItems} in progress\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Completion Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{dashboardStats.completionRate}%</div>\n                <p className=\"text-xs text-gray-600\">\n                  {dashboardStats.completedWorkItems} completed\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Overdue Items</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">{dashboardStats.overdueWorkItems}</div>\n                <p className=\"text-xs text-gray-600\">\n                  Require attention\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            {/* Project Progress */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Project Progress</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {projectProgress.map(progress => (\n                    <div key={progress.project.id} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">{progress.project.name}</h4>\n                          <p className=\"text-sm text-gray-600\">{progress.project.key}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className=\"text-sm font-medium\">{progress.completionRate}%</span>\n                          <p className=\"text-xs text-gray-600\">\n                            {progress.completedItems}/{progress.totalItems} items\n                          </p>\n                        </div>\n                      </div>\n                      <Progress value={progress.completionRate} className=\"h-2\" />\n                      {progress.overdueItems > 0 && (\n                        <p className=\"text-xs text-red-600\">\n                          {progress.overdueItems} overdue items\n                        </p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Work Items by Type */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Work Items by Type</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {workItemsByType.map(({ type, count, completed }) => {\n                    const Icon = typeIcons[type as keyof typeof typeIcons];\n                    const completionRate = count > 0 ? Math.round((completed / count) * 100) : 0;\n                    \n                    return (\n                      <div key={type} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Icon className=\"h-4 w-4 text-gray-600\" />\n                          <span className=\"font-medium\">{type}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <span className=\"text-sm text-gray-600\">\n                            {completed}/{count}\n                          </span>\n                          <div className=\"w-16\">\n                            <Progress value={completionRate} className=\"h-2\" />\n                          </div>\n                          <span className=\"text-sm font-medium w-10 text-right\">\n                            {completionRate}%\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Upcoming Deadlines */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Upcoming Deadlines\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {upcomingDeadlines.length} items\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {upcomingDeadlines.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {upcomingDeadlines.map(item => {\n                      const endDate = typeof item.endDate === 'string' ? parseISO(item.endDate) : new Date(item.endDate!);\n                      const daysUntilDeadline = differenceInDays(endDate, new Date());\n                      const isUrgent = daysUntilDeadline <= 3;\n                      const isWarning = daysUntilDeadline <= 7 && daysUntilDeadline > 3;\n                      \n                      return (\n                        <div \n                          key={item.id} \n                          className={cn(\n                            \"flex items-center justify-between p-3 rounded-lg border transition-colors cursor-pointer hover:bg-gray-50\",\n                            isUrgent ? \"border-red-200 bg-red-50\" : isWarning ? \"border-yellow-200 bg-yellow-50\" : \"border-gray-200 bg-gray-50\"\n                          )}\n                          onClick={() => setLocation(`/projects/${(item as any).projectId}`)}\n                        >\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <p className=\"font-medium truncate\">{item.externalId}</p>\n                              {isUrgent && (\n                                <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                              )}\n                              {isWarning && (\n                                <Clock className=\"h-4 w-4 text-yellow-500\" />\n                              )}\n                            </div>\n                            <p className=\"text-sm text-gray-600 truncate\">{item.title}</p>\n                            <div className=\"flex items-center space-x-2 mt-2\">\n                              {item.priority && (\n                                <Badge\n                                  variant=\"secondary\"\n                                  className={cn(\n                                    \"text-xs\",\n                                    priorityColors[item.priority as keyof typeof priorityColors]\n                                  )}\n                                >\n                                  {item.priority}\n                                </Badge>\n                              )}\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {item.type}\n                              </Badge>\n                              <Badge\n                                variant=\"secondary\"\n                                className={cn(\n                                  \"text-xs\",\n                                  item.status === 'IN_PROGRESS' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                                )}\n                              >\n                                {item.status.replace('_', ' ')}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"text-right ml-4\">\n                            <div className={cn(\n                              \"text-sm font-medium mb-1\",\n                              isUrgent ? \"text-red-600\" : isWarning ? \"text-yellow-600\" : \"text-gray-900\"\n                            )}>\n                              {daysUntilDeadline === 0 ? 'Due Today' :\n                               daysUntilDeadline === 1 ? 'Due Tomorrow' :\n                               `${daysUntilDeadline} days`}\n                            </div>\n                            <p className=\"text-xs text-gray-500\">\n                              {format(endDate, 'MMM d, yyyy')}\n                            </p>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 mb-2\">No upcoming deadlines</p>\n                    <p className=\"text-sm text-gray-500\">All caught up for the next 2 weeks!</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {projectProgress\n                    .flatMap(p => p.recentActivity.map(item => ({ ...item, projectName: p.project.name })))\n                    .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())\n                    .slice(0, 8)\n                    .map(item => (\n                      <div key={item.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium truncate\">{item.externalId}</p>\n                          <p className=\"text-sm text-gray-600 truncate\">{item.title}</p>\n                          <p className=\"text-xs text-gray-500\">{(item as any).projectName}</p>\n                        </div>\n                        <div className=\"text-right ml-4\">\n                          <Badge\n                            variant={item.status === 'DONE' ? 'default' : item.status === 'IN_PROGRESS' ? 'secondary' : 'outline'}\n                            className=\"text-xs\"\n                          >\n                            {item.status.replace('_', ' ')}\n                          </Badge>\n                          <p className=\"text-xs text-gray-600 mt-1\">\n                            {(() => {\n                              const updatedAt = typeof item.updatedAt === 'string' ? parseISO(item.updatedAt) : new Date(item.updatedAt);\n                              return format(updatedAt, 'MMM d');\n                            })()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  {projectProgress.every(p => p.recentActivity.length === 0) && (\n                    <p className=\"text-gray-600 text-center py-8\">No recent activity</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":21490},"client/src/pages/login.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { LucideLogIn } from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\n\n// Login form schema\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password should be at least 6 characters\"),\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Create form with validation\n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  // Check if already logged in\n  useEffect(() => {\n    // Check if user is already logged in\n    const checkAuth = async () => {\n      try {\n        const response = await fetch('/api/auth/status', {\n          credentials: 'include' // Include cookies for session management\n        });\n        const data = await response.json();\n        if (data.authenticated) {\n          setLocation('/projects');\n        }\n      } catch (error) {\n        // Not authenticated or error, stay on login page\n      }\n    };\n    \n    checkAuth();\n  }, [setLocation]);\n\n  // Handle form submission\n  const onSubmit = async (data: LoginFormValues) => {\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include', // Include cookies for session management\n        body: JSON.stringify(data),\n      });\n      \n      const result = await response.json();\n      \n      if (response.ok && result.success) {\n        // Invalidate cache to fetch fresh user data\n        queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n        \n        toast({\n          title: \"Login successful\",\n          description: \"Welcome back to the project management system.\"\n        });\n        \n        // Redirect to projects page\n        setLocation('/projects');\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Login failed\",\n          description: result.message || \"Invalid email or password.\",\n        });\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: \"An error occurred during login. Please try again.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-tl from-gray-900 to-slate-800\">\n      <Card className=\"w-full max-w-md border-none shadow-lg bg-white/5 backdrop-blur-sm\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center bg-gradient-to-r from-blue-400 to-violet-500 text-transparent bg-clip-text\">\n            Project Management System\n          </CardTitle>\n          <CardDescription className=\"text-center text-gray-300\">\n            Enter your credentials to sign in\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-200\">Email</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"your.email@example.com\" \n                        {...field} \n                        className=\"bg-gray-800/60 border-gray-700 text-gray-100\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-200\">Password</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"••••••••\" \n                        {...field} \n                        className=\"bg-gray-800/60 border-gray-700 text-gray-100\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-gradient-to-r from-blue-600 to-violet-600 hover:from-blue-700 hover:to-violet-700\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <span className=\"flex items-center\">\n                    <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    Signing in...\n                  </span>\n                ) : (\n                  <span className=\"flex items-center\">\n                    <LucideLogIn className=\"mr-2 h-4 w-4\" /> Sign In\n                  </span>\n                )}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n        \n        <CardFooter className=\"flex flex-col p-6 border-t border-gray-700/50\">\n          <div className=\"w-full text-center text-gray-400 text-sm mb-4\">\n            Sample accounts for testing:\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 w-full\">\n              <div className=\"text-center p-2 rounded bg-gray-800/60 text-xs\">\n                <div className=\"font-bold text-blue-400 mb-1\">Admin</div>\n                <div className=\"text-gray-300\">admin@cybaemtech.com</div>\n                <div className=\"text-gray-400\">password</div>\n              </div>\n            \n              <div className=\"text-center p-2 rounded bg-gray-800/60 text-xs\">\n                <div className=\"font-bold text-green-400 mb-1\">Scrum Master</div>\n                <div className=\"text-gray-300\">scrum@cybaemtech.com</div>\n                <div className=\"text-gray-400\">password</div>\n              </div>\n            \n              <div className=\"text-center p-2 rounded bg-gray-800/60 text-xs\">\n                <div className=\"font-bold text-amber-400 mb-1\">User</div>\n                <div className=\"text-gray-300\">tester@cybaemtech.com</div>\n                <div className=\"text-gray-400\">password</div>\n              </div>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}","size_bytes":7791},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/project-details.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Project, User, Team, WorkItem } from \"@shared/schema\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { CreateItemModal } from \"@/components/modals/create-item-modal\";\nimport { EditItemModal } from \"@/components/modals/edit-item-modal\";\nimport { DeleteItemModal } from \"@/components/modals/delete-item-modal\";\nimport { AddTeamMembersModal } from \"@/components/modals/add-team-members-modal\";\nimport { KanbanBoard } from \"@/components/ui/kanban-board\";\nimport { TimelineView } from \"@/components/ui/timeline-view\";\nimport { DeadlinesView } from \"@/components/ui/deadlines-view\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useModal } from \"@/hooks/use-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Filter, \n  Plus, \n  Layers, \n  ListFilter,\n  ArrowDownUp,\n  Edit,\n  Trash2,\n  ChevronLeft,\n  ChevronRight,\n  ChevronDown,\n  Users,\n  X,\n  UserPlus,\n  UserMinus\n} from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function ProjectDetails() {\n  const [_, params] = useRoute('/projects/:id');\n  const [_path, navigate] = useLocation();\n  const projectId = params?.id ? parseInt(params.id) : 0;\n  \n  // Debug logging for routing\n  console.log('Route params:', params);\n  console.log('Project ID extracted:', projectId);\n\n  // New project view tab state\n  const [projectView, setProjectView] = useState<'overview' | 'board' | 'list' | 'calendar' | 'settings'>('overview');\n  \n  // Timeline view settings\n  const [timeUnit, setTimeUnit] = useState<'Quarter' | 'Month' | 'Week'>('Quarter');\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [filterType, setFilterType] = useState<string[]>([]);\n  const [filterStatus, setFilterStatus] = useState<string[]>([]);\n  const [filterPriority, setFilterPriority] = useState<string[]>([]);\n  const [filterAssignee, setFilterAssignee] = useState<number[]>([]);\n  const [filterFeature, setFilterFeature] = useState<number | undefined>(undefined);\n  \n  // State for expanded items in the hierarchical view\n  const [expandedItems, setExpandedItems] = useState<Record<number, boolean>>({});\n  \n  const { \n    modalType, \n    isOpen, \n    openModal, \n    closeModal,\n    modalProps \n  } = useModal();\n  \n  const { toast } = useToast();\n  \n  // Fetch current user\n  const { data: currentUser } = useQuery<User>({\n    queryKey: ['/api/users/64'], // Using existing user ID 64 for demo\n  });\n  \n  // Fetch project details with better error handling\n  const { data: project, isLoading: isProjectLoading, error: projectError, isError } = useQuery<Project>({\n    queryKey: [`/api/projects/${projectId}`],\n    enabled: !!projectId && projectId > 0,\n    retry: 2,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n  \n  // Fetch teams\n  const { data: teams = [] } = useQuery<Team[]>({\n    queryKey: ['/api/teams'],\n  });\n  \n  // Fetch all projects for sidebar\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n  \n  // Fetch work items for this project\n  const { data: workItems = [], refetch: refetchWorkItems } = useQuery<WorkItem[]>({\n    queryKey: [`/api/projects/${projectId}/work-items`],\n  });\n  \n  // Fetch all users\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n  \n  // Function to handle navigation with null check\n  const goToProjects = () => {\n    if (navigate) navigate('/projects');\n  };\n  \n  // Early return if no valid project ID\n  if (!projectId || projectId <= 0) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-red-600 mb-2\">Invalid Project</h2>\n          <p className=\"text-gray-600 mb-4\">The project ID is invalid or missing.</p>\n          <Button onClick={goToProjects}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Projects\n          </Button>\n        </div>\n      </div>\n    );\n  }\n  \n  // Archive project handler\n  const handleArchiveProject = async () => {\n    // Don't proceed if project ID is invalid\n    if (!projectId) return;\n    \n    try {\n      // Call API to archive project\n      const response = await apiRequest(\n        'PATCH',\n        `/api/projects/${projectId}`, \n        { status: \"ARCHIVED\" }\n      );\n      \n      if (response.ok) {\n        // Show success message\n        toast({\n          title: \"Project archived\",\n          description: \"The project has been archived successfully\",\n        });\n        \n        // Redirect to projects page\n        goToProjects();\n        \n        // Invalidate cache\n        await queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      } else {\n        const errorData = await response.json();\n        toast({\n          title: \"Error\",\n          description: errorData.message || \"Failed to archive project\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error archiving project:\", error);\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred while archiving the project\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  // Delete project handler\n  const handleDeleteProject = async () => {\n    // Don't proceed if project ID is invalid\n    if (!projectId) return;\n    \n    // Confirm with user before deleting\n    if (project?.name && !window.confirm(`Are you sure you want to delete ${project.name}? This action cannot be undone.`)) {\n      return;\n    }\n    \n    try {\n      // Call API to delete project\n      const response = await apiRequest(\n        'DELETE',\n        `/api/projects/${projectId}`\n      );\n      \n      if (response.ok) {\n        // Show success message\n        toast({\n          title: \"Project deleted\",\n          description: \"The project has been deleted successfully\",\n        });\n        \n        // Redirect to projects page\n        goToProjects();\n        \n        // Invalidate cache\n        await queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      } else {\n        const errorData = await response.json();\n        toast({\n          title: \"Error\",\n          description: errorData.message || \"Failed to delete project\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred while deleting the project\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  // Debug logging\n  console.log('=== PROJECT DETAILS DEBUG ===');\n  console.log('Route params:', params);\n  console.log('Project ID extracted:', projectId);\n  console.log('Query enabled:', !!projectId && projectId > 0);\n  console.log('Project data:', project);\n  console.log('Project key:', project?.key);\n  console.log('Project loading:', isProjectLoading);\n  console.log('Project error:', projectError);\n  console.log('Query key:', [`/api/projects/${projectId}`]);\n  console.log('============================');\n  \n  // Show loading state\n  if (isProjectLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading project details...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // Show error state\n  if (projectError || !project) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-red-600 mb-2\">Project Not Found</h2>\n          <p className=\"text-gray-600 mb-4\">The project you're looking for doesn't exist or couldn't be loaded.</p>\n          <Button onClick={goToProjects}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Projects\n          </Button>\n        </div>\n      </div>\n    );\n  }\n  \n  const features = Array.isArray(workItems) ? workItems.filter(item => item.type === 'FEATURE') : [];\n  \n  const handleWorkItemsUpdate = () => {\n    refetchWorkItems();\n  };\n  \n  // Toggle expansion state of an item\n  const toggleItemExpansion = (itemId: number) => {\n    setExpandedItems(prev => ({\n      ...prev,\n      [itemId]: !prev[itemId]\n    }));\n  };\n  \n  // Organize work items in a hierarchical structure: Epics > Features > Stories > Tasks/Bugs\n  const organizeWorkItemsHierarchically = () => {\n    if (!Array.isArray(workItems)) return [];\n    \n    // Extract all items by type\n    const epics = workItems.filter(item => item.type === 'EPIC');\n    const features = workItems.filter(item => item.type === 'FEATURE');\n    const stories = workItems.filter(item => item.type === 'STORY');\n    const tasksAndBugs = workItems.filter(item => item.type === 'TASK' || item.type === 'BUG');\n    \n    // Create the hierarchy\n    const hierarchicalItems = [];\n    \n    // Process epics\n    for (const epic of epics) {\n      hierarchicalItems.push({\n        ...epic,\n        level: 0,\n        hasChildren: features.some(f => f.parentId === epic.id)\n      });\n      \n      // If this epic is expanded, add its features\n      if (expandedItems[epic.id]) {\n        const epicFeatures = features.filter(f => f.parentId === epic.id);\n        for (const feature of epicFeatures) {\n          hierarchicalItems.push({\n            ...feature,\n            level: 1,\n            hasChildren: stories.some(s => s.parentId === feature.id)\n          });\n          \n          // If this feature is expanded, add its stories\n          if (expandedItems[feature.id]) {\n            const featureStories = stories.filter(s => s.parentId === feature.id);\n            for (const story of featureStories) {\n              hierarchicalItems.push({\n                ...story,\n                level: 2,\n                hasChildren: tasksAndBugs.some(tb => tb.parentId === story.id)\n              });\n              \n              // If this story is expanded, add its tasks and bugs\n              if (expandedItems[story.id]) {\n                const storyTasksAndBugs = tasksAndBugs.filter(tb => tb.parentId === story.id);\n                for (const taskOrBug of storyTasksAndBugs) {\n                  hierarchicalItems.push({\n                    ...taskOrBug,\n                    level: 3,\n                    hasChildren: false\n                  });\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // Add orphaned features (those without epics)\n    const orphanedFeatures = features.filter(f => !f.parentId || !epics.some(e => e.id === f.parentId));\n    for (const feature of orphanedFeatures) {\n      hierarchicalItems.push({\n        ...feature,\n        level: 0,\n        hasChildren: stories.some(s => s.parentId === feature.id)\n      });\n      \n      // If this feature is expanded, add its stories\n      if (expandedItems[feature.id]) {\n        const featureStories = stories.filter(s => s.parentId === feature.id);\n        for (const story of featureStories) {\n          hierarchicalItems.push({\n            ...story,\n            level: 1,\n            hasChildren: tasksAndBugs.some(tb => tb.parentId === story.id)\n          });\n          \n          // If this story is expanded, add its tasks and bugs\n          if (expandedItems[story.id]) {\n            const storyTasksAndBugs = tasksAndBugs.filter(tb => tb.parentId === story.id);\n            for (const taskOrBug of storyTasksAndBugs) {\n              hierarchicalItems.push({\n                ...taskOrBug,\n                level: 2,\n                hasChildren: false\n              });\n            }\n          }\n        }\n      }\n    }\n    \n    // Add orphaned stories\n    const orphanedStories = stories.filter(s => !s.parentId || !features.some(f => f.id === s.parentId));\n    for (const story of orphanedStories) {\n      hierarchicalItems.push({\n        ...story,\n        level: 0,\n        hasChildren: tasksAndBugs.some(tb => tb.parentId === story.id)\n      });\n      \n      // If this story is expanded, add its tasks and bugs\n      if (expandedItems[story.id]) {\n        const storyTasksAndBugs = tasksAndBugs.filter(tb => tb.parentId === story.id);\n        for (const taskOrBug of storyTasksAndBugs) {\n          hierarchicalItems.push({\n            ...taskOrBug,\n            level: 1,\n            hasChildren: false\n          });\n        }\n      }\n    }\n    \n    // Add orphaned tasks and bugs\n    const orphanedTasksAndBugs = tasksAndBugs.filter(tb => !tb.parentId || !stories.some(s => s.id === tb.parentId));\n    for (const taskOrBug of orphanedTasksAndBugs) {\n      hierarchicalItems.push({\n        ...taskOrBug,\n        level: 0,\n        hasChildren: false\n      });\n    }\n    \n    return hierarchicalItems;\n  };\n  \n  const getFilterTypesOptions = () => {\n    return [\n      { value: 'STORY', label: 'Stories' },\n      { value: 'TASK', label: 'Tasks' },\n      { value: 'BUG', label: 'Bugs' },\n    ];\n  };\n  \n  // Generic filter handler for string-based filters\n  const handleStringFilter = (\n    value: string, \n    currentValues: string[], \n    setter: React.Dispatch<React.SetStateAction<string[]>>,\n    clearValue: string = \"ALL\"\n  ) => {\n    if (value === clearValue) {\n      setter([]);\n    } else {\n      if (currentValues.includes(value)) {\n        setter(currentValues.filter(v => v !== value));\n      } else {\n        setter([...currentValues, value]);\n      }\n    }\n  };\n  \n  // Generic filter handler for number-based filters\n  const handleNumberFilter = (\n    value: number, \n    currentValues: number[], \n    setter: React.Dispatch<React.SetStateAction<number[]>>,\n    clearValue: number = -1\n  ) => {\n    if (value === clearValue) {\n      setter([]);\n    } else {\n      if (currentValues.includes(value)) {\n        setter(currentValues.filter(v => v !== value));\n      } else {\n        setter([...currentValues, value]);\n      }\n    }\n  };\n\n  // Handler for type filter\n  const handleFilterTypeChange = (value: string) => {\n    handleStringFilter(value, filterType, setFilterType);\n  };\n  \n  // Handler for status filter\n  const handleFilterStatusChange = (value: string) => {\n    handleStringFilter(value, filterStatus, setFilterStatus);\n  };\n  \n  // Handler for priority filter\n  const handleFilterPriorityChange = (value: string) => {\n    handleStringFilter(value, filterPriority, setFilterPriority);\n  };\n  \n  // Handler for assignee filter\n  const handleFilterAssigneeChange = (value: string) => {\n    if (value === \"all\") {\n      // Clear the filter to show all assignees\n      setFilterAssignee([]);\n    } else if (value === \"unassigned\") {\n      // Filter for unassigned items (-1 represents unassigned)\n      setFilterAssignee([-1]);\n    } else {\n      // Filter by specific user ID\n      const userId = parseInt(value);\n      setFilterAssignee([userId]);\n    }\n  };\n  \n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Sidebar */}\n      <Sidebar \n        user={currentUser}\n        teams={teams}\n        projects={projects}\n        onCreateTeam={() => openModal(\"createTeam\")}\n        onCreateProject={() => openModal(\"createProject\")}\n      />\n      \n      {/* Mobile menu toggle */}\n      <div className=\"md:hidden fixed bottom-4 right-4 z-10\">\n        <Button\n          className=\"rounded-full shadow-lg p-3 h-12 w-12\"\n          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n        >\n          <Layers className=\"h-5 w-5\" />\n        </Button>\n      </div>\n      \n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        \n        <main className=\"flex-1 overflow-auto\">\n          {/* Project navigation */}\n          <div className=\"bg-white border-b border-neutral-200\">\n            <div className=\"flex items-center px-6 py-3\">\n              <Button variant=\"ghost\" className=\"mr-6 font-medium\" asChild>\n                <a href=\"/projects\">\n                  <ArrowLeft className=\"mr-1 h-4 w-4\" />\n                  Back to projects\n                </a>\n              </Button>\n              \n              <nav className=\"flex space-x-6 overflow-x-auto\">\n                <a \n                  href=\"#\" \n                  onClick={(e) => { e.preventDefault(); setProjectView('overview'); }}\n                  className={`border-b-2 ${\n                    projectView === 'overview'\n                      ? 'border-primary text-primary' \n                      : 'border-transparent text-neutral-600 hover:text-neutral-900'\n                  } font-medium py-3`}\n                >\n                  Overview\n                </a>\n                <a \n                  href=\"#\" \n                  onClick={(e) => { e.preventDefault(); setProjectView('board'); }}\n                  className={`border-b-2 ${\n                    projectView === 'board'\n                      ? 'border-primary text-primary' \n                      : 'border-transparent text-neutral-600 hover:text-neutral-900'\n                  } font-medium py-3`}\n                >\n                  Board\n                </a>\n                <a \n                  href=\"#\" \n                  onClick={(e) => { e.preventDefault(); setProjectView('list'); }}\n                  className={`border-b-2 ${\n                    projectView === 'list'\n                      ? 'border-primary text-primary' \n                      : 'border-transparent text-neutral-600 hover:text-neutral-900'\n                  } font-medium py-3`}\n                >\n                  List\n                </a>\n                <a \n                  href=\"#\" \n                  onClick={(e) => { e.preventDefault(); setProjectView('calendar'); }}\n                  className={`border-b-2 ${\n                    projectView === 'calendar'\n                      ? 'border-primary text-primary' \n                      : 'border-transparent text-neutral-600 hover:text-neutral-900'\n                  } font-medium py-3`}\n                >\n                  Calendar\n                </a>\n                <a \n                  href=\"#\" \n                  onClick={(e) => { e.preventDefault(); setProjectView('settings'); }}\n                  className={`border-b-2 ${\n                    projectView === 'settings'\n                      ? 'border-primary text-primary' \n                      : 'border-transparent text-neutral-600 hover:text-neutral-900'\n                  } font-medium py-3`}\n                >\n                  Settings\n                </a>\n              </nav>\n            </div>\n          </div>\n          \n          {/* Project content */}\n          <div className=\"p-6\">\n            <div className=\"mb-6 flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-semibold mb-1\">{project?.name || 'Loading project...'}</h1>\n                <p className=\"text-neutral-600\">{project?.description || 'No description provided'}</p>\n              </div>\n              {/* Only show Create Item button on specific tabs */}\n              {projectView !== 'overview' && projectView !== 'calendar' && projectView !== 'settings' && (\n                <div className=\"flex space-x-3\">\n                  <Button onClick={() => openModal(\"createItem\")}>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    <span>Create Item</span>\n                  </Button>\n                </div>\n              )}\n            </div>\n\n            {/* Overview Tab Content */}\n            {projectView === 'overview' && (\n              <div>\n                <div className=\"mb-6\">\n                  <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4\">\n                    <div className=\"mb-4 sm:mb-0 flex items-center\">\n                      <div className=\"mr-4\">\n                        <h3 className=\"text-lg font-medium\">Timeline View</h3>\n                      </div>\n                      \n                      <div className=\"flex items-center\">\n                        <Select \n                          defaultValue={timeUnit}\n                          onValueChange={(value) => setTimeUnit(value as 'Quarter' | 'Month' | 'Week')}\n                        >\n                          <SelectTrigger className=\"h-8 w-32\">\n                            <SelectValue placeholder=\"Select view\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Quarter\">Quarter</SelectItem>\n                            <SelectItem value=\"Month\">Month</SelectItem>\n                            <SelectItem value=\"Week\">Week</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => openModal(\"createItem\")}>\n                        <Plus className=\"h-4 w-4 mr-1\" /> New\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {/* Timeline View */}\n                  <div className=\"bg-white border rounded-md shadow-sm mb-6\">\n                    <TimelineView \n                      timeUnit={timeUnit}\n                      workItems={workItems}\n                      onEditItem={(item) => openModal(\"editItem\", { workItem: item })}\n                    />\n                  </div>\n                  \n                  {/* Items with Deadlines section - moved from separate tab */}\n                  <div className=\"bg-white border rounded-md shadow-sm\">\n                    <div className=\"p-4 border-b\">\n                      <h3 className=\"text-lg font-medium\">Items with Deadlines</h3>\n                    </div>\n                    <DeadlinesView \n                      workItems={Array.isArray(workItems) ? workItems : []}\n                      users={Array.isArray(users) ? users : []}\n                      projects={project ? [project as Project] : []}\n                    />\n                  </div>\n                </div>\n                \n                {/* Project statistics and info section */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {/* Left panel: Project summary */}\n                  <div className=\"col-span-2\">\n                    <div className=\"bg-white border rounded-md shadow-sm p-4\">\n                      <h3 className=\"text-lg font-medium mb-4\">Work Items</h3>\n                      <div className=\"space-y-4\">\n                        {/* Hierarchical list of work items */}\n                        <div className=\"border rounded\">\n                          <div className=\"flex items-center justify-between bg-neutral-50 p-3 text-sm font-medium text-neutral-700 border-b\">\n                            <div className=\"w-6/12\">Title</div>\n                            <div className=\"w-2/12\">Type</div>\n                            <div className=\"w-2/12\">Status</div>\n                            <div className=\"w-2/12\">Assignee</div>\n                          </div>\n                          <div className=\"overflow-y-auto max-h-96\">\n                            {organizeWorkItemsHierarchically().map((item: any) => {\n                              const indentClass = item.level > 0 \n                                ? `pl-${(item.level * 6) + 3}` \n                                : \"pl-3\";\n                              \n                              const typeClasses = {\n                                'EPIC': 'bg-purple-100 text-purple-800',\n                                'FEATURE': 'bg-blue-100 text-blue-800',\n                                'STORY': 'bg-green-100 text-green-800',\n                                'TASK': 'bg-orange-100 text-orange-800',\n                                'BUG': 'bg-red-100 text-red-800'\n                              };\n                              \n                              const statusClasses = {\n                                'TODO': 'bg-neutral-100 text-neutral-800',\n                                'IN_PROGRESS': 'bg-amber-100 text-amber-800',\n                                'DONE': 'bg-emerald-100 text-emerald-800'\n                              };\n                              \n                              return (\n                                <div key={item.id} className=\"hover:bg-neutral-50 border-b text-sm\">\n                                  <div className=\"flex items-center py-2\">\n                                    <div className={`flex items-center w-6/12 ${indentClass}`}>\n                                      {item.hasChildren && (\n                                        <button \n                                          className=\"mr-1 focus:outline-none\"\n                                          onClick={() => toggleItemExpansion(item.id)}\n                                        >\n                                          {expandedItems[item.id] ? (\n                                            <ChevronDown className=\"h-4 w-4 text-neutral-400\" />\n                                          ) : (\n                                            <ChevronRight className=\"h-4 w-4 text-neutral-400\" />\n                                          )}\n                                        </button>\n                                      )}\n                                      {!item.hasChildren && <div className=\"w-5\" />}\n                                      <span \n                                        className=\"truncate cursor-pointer hover:text-primary\"\n                                        onClick={() => openModal(\"editItem\", { workItem: item })}\n                                      >\n                                        {item.title}\n                                      </span>\n                                    </div>\n                                    <div className=\"w-2/12\">\n                                      <Badge className={typeClasses[item.type]}>\n                                        {item.type}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"w-2/12\">\n                                      <Badge className={statusClasses[item.status]}>\n                                        {item.status.replace('_', ' ')}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"w-2/12 flex items-center\">\n                                      {item.assigneeId ? (\n                                        <div className=\"flex items-center\">\n                                          <div className=\"h-6 w-6 rounded-full bg-neutral-200 flex items-center justify-center text-xs mr-2\">\n                                            {users.find(u => u.id === item.assigneeId)?.fullName.substring(0, 2) || \"??\"}\n                                          </div>\n                                          <span className=\"text-xs truncate\">\n                                            {users.find(u => u.id === item.assigneeId)?.fullName || \"Unknown\"}\n                                          </span>\n                                        </div>\n                                      ) : (\n                                        <span className=\"text-neutral-500 text-xs\">Unassigned</span>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              );\n                            })}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Right panel: Project info */}\n                  <div>\n                    <div className=\"bg-white border rounded-md shadow-sm p-4\">\n                      <h3 className=\"text-lg font-medium mb-4\">Project Information</h3>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"text-sm font-medium mb-1\">ID</h4>\n                          <p className=\"text-sm\">{project?.key || 'N/A'}</p>\n                        </div>\n                        <div>\n                          <h4 className=\"text-sm font-medium mb-1\">Created by</h4>\n                          <p className=\"text-sm\">\n                            {currentUser?.fullName || 'Unknown'}\n                          </p>\n                        </div>\n                        <div>\n                          <h4 className=\"text-sm font-medium mb-1\">Created at</h4>\n                          <p className=\"text-sm\">\n                            {project?.createdAt \n                              ? new Date(project.createdAt).toLocaleDateString() \n                              : 'N/A'}\n                          </p>\n                        </div>\n                        <div>\n                          <h4 className=\"text-sm font-medium mb-1\">Start date</h4>\n                          <p className=\"text-sm\">\n                            {project?.startDate \n                              ? new Date(project.startDate).toLocaleDateString() \n                              : 'No start date set'}\n                          </p>\n                        </div>\n                        <div>\n                          <h4 className=\"text-sm font-medium mb-1\">Target date</h4>\n                          <p className=\"text-sm\">\n                            {project?.targetDate \n                              ? new Date(project.targetDate).toLocaleDateString() \n                              : 'No target date set'}\n                          </p>\n                        </div>\n                        <div>\n                          <h4 className=\"text-sm font-medium mb-1\">Team</h4>\n                          <p className=\"text-sm\">\n                            {teams && project?.teamId \n                              ? teams.find(t => t.id === project.teamId)?.name \n                              : 'No team assigned'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Board Tab Content */}\n            {projectView === 'board' && (\n              <div className=\"bg-white border rounded-md shadow-sm\">\n                <div className=\"p-4 border-b flex flex-col md:flex-row gap-4\">\n                  <Select\n                    value={filterFeature ? String(filterFeature) : \"all\"}\n                    onValueChange={(value) => {\n                      setFilterFeature(value !== \"all\" ? parseInt(value) : undefined);\n                    }}\n                  >\n                    <SelectTrigger className=\"w-64\">\n                      <SelectValue placeholder=\"Filter by feature\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Items</SelectItem>\n                      {features.map(feature => (\n                        <SelectItem key={feature.id} value={String(feature.id)}>\n                          {feature.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  \n                  {/* Assignee Filter Dropdown */}\n                  <Select\n                    value={filterAssignee.length === 1 ? String(filterAssignee[0]) : \"all\"}\n                    onValueChange={handleFilterAssigneeChange}\n                  >\n                    <SelectTrigger className=\"w-64\">\n                      <SelectValue placeholder=\"Filter by assignee\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Assignees</SelectItem>\n                      {users && Array.isArray(users) && users.map(user => (\n                        <SelectItem key={user.id} value={String(user.id)}>\n                          {user.fullName || user.username}\n                        </SelectItem>\n                      ))}\n                      <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <KanbanBoard \n                  projectId={Number(projectId)}\n                  users={users || []}\n                  workItems={Array.isArray(workItems) \n                    ? workItems.filter(item => {\n                        // If feature filter is active, only show items belong to that feature\n                        if (filterFeature && item.parentId !== filterFeature) {\n                          return false;\n                        }\n                        \n                        // Only show specific types in kanban\n                        if (item.type === 'EPIC') {\n                          return false;\n                        }\n                        \n                        // If type filters are active, apply them\n                        if (filterType.length > 0 && !filterType.includes(item.type)) {\n                          return false;\n                        }\n                        \n                        return true;\n                      })\n                    : []\n                  }\n                  filter={{\n                    assigneeIds: filterAssignee.length > 0 ? filterAssignee : undefined\n                  }}\n                  onItemEdit={(item) => openModal(\"editItem\", { workItem: item })}\n                  onItemDelete={(item) => openModal(\"deleteItem\", { workItem: item })}\n                  onStatusChange={async (itemId, status) => {\n                    try {\n                      const response = await apiRequest(\n                        'PATCH',\n                        `/api/work-items/${itemId}`,\n                        { status }\n                      );\n                      \n                      if (response.ok) {\n                        refetchWorkItems();\n                      } else {\n                        toast({\n                          title: \"Error\",\n                          description: \"Failed to update item status\",\n                          variant: \"destructive\"\n                        });\n                      }\n                    } catch (error) {\n                      console.error(\"Error updating item status:\", error);\n                      toast({\n                        title: \"Error\",\n                        description: \"An unexpected error occurred\",\n                        variant: \"destructive\"\n                      });\n                    }\n                  }}\n                />\n              </div>\n            )}\n\n            {/* List Tab Content */}\n            {projectView === 'list' && (\n              <div className=\"bg-white border rounded-md shadow-sm\">\n                <div className=\"p-4 border-b\">\n                  <div className=\"flex justify-between items-center mb-3\">\n                    <h3 className=\"text-lg font-medium\">All Work Items</h3>\n                  </div>\n                  \n                  <div className=\"flex flex-wrap gap-2\">\n                    {/* Type Filter */}\n                    <div className=\"flex items-center\">\n                      <span className=\"text-xs font-medium mr-2\">Type:</span>\n                      <Select \n                        value={filterType.length > 0 ? filterType[0] : \"ALL\"}\n                        onValueChange={handleFilterTypeChange}\n                      >\n                        <SelectTrigger className=\"h-8 px-2 text-xs w-28\">\n                          <SelectValue placeholder=\"All types\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"ALL\">All types</SelectItem>\n                          <SelectItem value=\"EPIC\">Epics</SelectItem>\n                          <SelectItem value=\"FEATURE\">Features</SelectItem>\n                          <SelectItem value=\"STORY\">Stories</SelectItem>\n                          <SelectItem value=\"TASK\">Tasks</SelectItem>\n                          <SelectItem value=\"BUG\">Bugs</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {filterType.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 ml-1\">\n                          {filterType.map(type => (\n                            <Badge \n                              key={type} \n                              variant=\"outline\" \n                              className=\"text-xs py-0 h-6\"\n                              onClick={() => handleFilterTypeChange(type)}\n                            >\n                              {type}\n                              <X className=\"h-3 w-3 ml-1\" />\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Status Filter */}\n                    <div className=\"flex items-center\">\n                      <span className=\"text-xs font-medium mr-2\">Status:</span>\n                      <Select \n                        value={filterStatus.length > 0 ? filterStatus[0] : \"ALL\"}\n                        onValueChange={handleFilterStatusChange}\n                      >\n                        <SelectTrigger className=\"h-8 px-2 text-xs w-28\">\n                          <SelectValue placeholder=\"All statuses\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"ALL\">All statuses</SelectItem>\n                          <SelectItem value=\"TODO\">To Do</SelectItem>\n                          <SelectItem value=\"IN_PROGRESS\">In Progress</SelectItem>\n                          <SelectItem value=\"DONE\">Done</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {filterStatus.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 ml-1\">\n                          {filterStatus.map(status => (\n                            <Badge \n                              key={status} \n                              variant=\"outline\" \n                              className=\"text-xs py-0 h-6\"\n                              onClick={() => handleFilterStatusChange(status)}\n                            >\n                              {status.replace('_', ' ')}\n                              <X className=\"h-3 w-3 ml-1\" />\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Priority Filter */}\n                    <div className=\"flex items-center\">\n                      <span className=\"text-xs font-medium mr-2\">Priority:</span>\n                      <Select \n                        value={filterPriority.length > 0 ? filterPriority[0] : \"ALL\"}\n                        onValueChange={handleFilterPriorityChange}\n                      >\n                        <SelectTrigger className=\"h-8 px-2 text-xs w-28\">\n                          <SelectValue placeholder=\"All priorities\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"ALL\">All priorities</SelectItem>\n                          <SelectItem value=\"LOW\">Low</SelectItem>\n                          <SelectItem value=\"MEDIUM\">Medium</SelectItem>\n                          <SelectItem value=\"HIGH\">High</SelectItem>\n                          <SelectItem value=\"CRITICAL\">Critical</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {filterPriority.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 ml-1\">\n                          {filterPriority.map(priority => (\n                            <Badge \n                              key={priority} \n                              variant=\"outline\" \n                              className=\"text-xs py-0 h-6\"\n                              onClick={() => handleFilterPriorityChange(priority)}\n                            >\n                              {priority}\n                              <X className=\"h-3 w-3 ml-1\" />\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Assignee Filter */}\n                    <div className=\"flex items-center\">\n                      <span className=\"text-xs font-medium mr-2\">Assignee:</span>\n                      <Select \n                        value={filterAssignee.length > 0 ? String(filterAssignee[0]) : \"ALL\"}\n                        onValueChange={handleFilterAssigneeChange}\n                      >\n                        <SelectTrigger className=\"h-8 px-2 text-xs w-28\">\n                          <SelectValue placeholder=\"All assignees\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"ALL\">All assignees</SelectItem>\n                          {Array.isArray(users) && users.map(user => (\n                            <SelectItem key={user.id} value={String(user.id)}>\n                              {user.fullName || user.username}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      {filterAssignee.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 ml-1\">\n                          {filterAssignee.map(userId => {\n                            const user = Array.isArray(users) ? users.find(u => u.id === userId) : null;\n                            return (\n                              <Badge \n                                key={userId} \n                                variant=\"outline\" \n                                className=\"text-xs py-0 h-6\"\n                                onClick={() => handleFilterAssigneeChange(\"all\")}\n                              >\n                                {userId === -1 ? \"Unassigned\" : (user ? (user.fullName || user.username) : \"Unknown User\")}\n                                <X className=\"h-3 w-3 ml-1\" />\n                              </Badge>\n                            );\n                          })}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse text-xs\">\n                    <thead>\n                      <tr className=\"text-left bg-neutral-100 text-xs text-neutral-700 border-b border-neutral-200\">\n                        <th className=\"font-medium px-2 py-1.5 border-r border-neutral-200\">ID</th>\n                        <th className=\"font-medium px-2 py-1.5 border-r border-neutral-200\">Title</th>\n                        <th className=\"font-medium px-2 py-1.5 border-r border-neutral-200\">Type</th>\n                        <th className=\"font-medium px-2 py-1.5 border-r border-neutral-200\">Status</th>\n                        <th className=\"font-medium px-2 py-1.5 border-r border-neutral-200\">Priority</th>\n                        <th className=\"font-medium px-2 py-1.5 border-r border-neutral-200\">Assignee</th>\n                        <th className=\"font-medium px-2 py-1.5\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {Array.isArray(workItems) && workItems\n                        .filter(item => {\n                          // Filter by type if any type filters are selected\n                          if (filterType.length > 0 && !filterType.includes(item.type)) {\n                            return false;\n                          }\n                          \n                          // Filter by status if any status filters are selected\n                          if (filterStatus.length > 0 && !filterStatus.includes(item.status)) {\n                            return false;\n                          }\n                          \n                          // Filter by priority if any priority filters are selected\n                          if (filterPriority.length > 0 && (!item.priority || !filterPriority.includes(item.priority))) {\n                            return false;\n                          }\n                          \n                          // Filter by assignee if any assignee filters are selected\n                          if (filterAssignee.length > 0 && (!item.assigneeId || !filterAssignee.includes(item.assigneeId))) {\n                            return false;\n                          }\n                          \n                          return true;\n                        })\n                        .map(item => (\n                          <tr key={item.id} className=\"border-b border-neutral-200 hover:bg-neutral-50 text-xs\">\n                            <td className=\"px-2 py-1.5 border-r border-neutral-200\">{item.externalId}</td>\n                            <td className=\"px-2 py-1.5 font-medium border-r border-neutral-200\">{item.title}</td>\n                            <td className=\"px-2 py-1.5 border-r border-neutral-200\">\n                              <span className={`inline-block px-1.5 py-0.5 rounded-sm text-xs font-medium ${\n                                item.type === 'EPIC' ? 'bg-purple-100 text-purple-800' :\n                                item.type === 'FEATURE' ? 'bg-blue-100 text-blue-800' :\n                                item.type === 'STORY' ? 'bg-green-100 text-green-800' :\n                                item.type === 'TASK' ? 'bg-orange-100 text-orange-800' :\n                                'bg-red-100 text-red-800'\n                              }`}>\n                                {item.type}\n                              </span>\n                            </td>\n                            <td className=\"px-2 py-1.5 border-r border-neutral-200\">\n                              <span className={`inline-block px-1.5 py-0.5 rounded-sm text-xs font-medium ${\n                                item.status === 'TODO' ? 'bg-neutral-100 text-neutral-800' :\n                                item.status === 'IN_PROGRESS' ? 'bg-amber-100 text-amber-800' :\n                                'bg-emerald-100 text-emerald-800'\n                              }`}>\n                                {item.status.replace('_', ' ')}\n                              </span>\n                            </td>\n                            <td className=\"px-2 py-1.5 border-r border-neutral-200\">\n                              {item.priority ? (\n                                <span className={`inline-block px-1.5 py-0.5 rounded-sm text-xs font-medium ${\n                                  item.priority === 'LOW' ? 'bg-neutral-100 text-neutral-800' :\n                                  item.priority === 'MEDIUM' ? 'bg-blue-100 text-blue-800' :\n                                  item.priority === 'HIGH' ? 'bg-orange-100 text-orange-800' :\n                                  'bg-red-100 text-red-800'\n                                }`}>\n                                  {item.priority}\n                                </span>\n                              ) : (\n                                <span className=\"text-neutral-400 text-xs\">-</span>\n                              )}\n                            </td>\n                            <td className=\"px-2 py-1.5 border-r border-neutral-200\">\n                              {item.assigneeId ? (\n                                <div className=\"flex items-center\">\n                                  <div className=\"h-4 w-4 rounded-full bg-neutral-200 flex items-center justify-center text-xs mr-1\">\n                                    {users.find(u => u.id === item.assigneeId)?.fullName.substring(0, 1) || \"?\"}\n                                  </div>\n                                  <span className=\"text-xs truncate max-w-[100px]\">\n                                    {users.find(u => u.id === item.assigneeId)?.fullName || \"Unknown\"}\n                                  </span>\n                                </div>\n                              ) : (\n                                <span className=\"text-neutral-400 text-xs\">-</span>\n                              )}\n                            </td>\n                            <td className=\"px-2 py-1.5\">\n                              <div className=\"flex space-x-1\">\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"ghost\" \n                                  className=\"h-5 w-5 p-0\" \n                                  onClick={() => openModal(\"editItem\", { workItem: item })}\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"ghost\" \n                                  className=\"h-5 w-5 p-0 text-red-500\" \n                                  onClick={() => openModal(\"deleteItem\", { workItem: item })}\n                                >\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      {(!Array.isArray(workItems) || workItems.length === 0) && (\n                        <tr>\n                          <td colSpan={7} className=\"px-2 py-4 text-center text-neutral-500 text-xs\">\n                            No work items found. Create your first work item to get started.\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            )}\n\n            {/* Calendar Tab Content */}\n            {projectView === 'calendar' && (\n              <div className=\"bg-white border rounded-md shadow-sm p-6\">\n                <h3 className=\"text-lg font-medium mb-6\">Calendar View (Coming soon)</h3>\n                <p className=\"text-neutral-500\">\n                  Calendar view is under development. It will provide a time-based view of your work items, \n                  allowing you to plan and track work across days, weeks, or months.\n                </p>\n              </div>\n            )}\n\n            {/* Settings Tab Content */}\n            {projectView === 'settings' && (\n              <div className=\"bg-white border rounded-md shadow-sm\">\n                <div className=\"p-6\">\n                  <h3 className=\"text-lg font-medium mb-6\">Project Settings</h3>\n                  \n                  <div className=\"space-y-8\">\n                    {/* Project Details Section */}\n                    <div>\n                      <h4 className=\"text-md font-medium mb-4\">Project Details</h4>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <label htmlFor=\"projectName\" className=\"block text-sm font-medium mb-1\">\n                            Project Name\n                          </label>\n                          <Input \n                            id=\"projectName\" \n                            value={project?.name || ''} \n                            disabled\n                            className=\"max-w-lg\"\n                          />\n                        </div>\n                        <div>\n                          <label htmlFor=\"projectKey\" className=\"block text-sm font-medium mb-1\">\n                            Project Key\n                          </label>\n                          <Input \n                            id=\"projectKey\" \n                            value={project?.key || 'N/A'} \n                            disabled\n                            className=\"max-w-lg\"\n                            placeholder=\"Project key will appear here\"\n                          />\n                          <p className=\"mt-1 text-sm text-neutral-500\">\n                            The project key is used in work item IDs and cannot be changed after creation.\n                          </p>\n                        </div>\n                        <div>\n                          <label htmlFor=\"projectDescription\" className=\"block text-sm font-medium mb-1\">\n                            Description\n                          </label>\n                          <Textarea \n                            id=\"projectDescription\" \n                            value={project?.description || ''}\n                            disabled\n                            className=\"max-w-lg\"\n                            rows={3}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Team Section */}\n                    <div>\n                      <h4 className=\"text-md font-medium mb-4\">Team</h4>\n                      <div className=\"border rounded-md overflow-hidden max-w-3xl\">\n                        <div className=\"bg-neutral-50 px-4 py-3 border-b\">\n                          <div className=\"flex justify-between items-center\">\n                            <h5 className=\"text-sm font-medium\">Team Members</h5>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              onClick={() => openModal(\"addTeamMembers\")}\n                            >\n                              <UserPlus className=\"h-4 w-4 mr-1\" />\n                              Add Members\n                            </Button>\n                          </div>\n                        </div>\n                        <div className=\"p-4\">\n                          {/* Display team members or a message */}\n                          <div className=\"space-y-3\">\n                            {/* Placeholder for team members listing - will implement in the future */}\n                            <p className=\"text-sm text-neutral-500\">\n                              Click the \"Add Members\" button to invite team members by email. \n                              They will receive access to collaborate on this project.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Danger Zone */}\n                    <div>\n                      <h4 className=\"text-md font-medium mb-4 text-red-600\">Danger Zone</h4>\n                      <div className=\"space-y-4 border border-red-200 rounded-md p-4\">\n                        <div className=\"flex items-center justify-between py-4\">\n                          <div>\n                            <h4 className=\"text-sm font-medium text-red-800\">Archive Project</h4>\n                            <p className=\"text-sm text-red-600\">Archive this project to hide it from active views.</p>\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            className=\"border-red-300 text-red-600 hover:bg-red-50 hover:text-red-700\"\n                            onClick={handleArchiveProject}\n                          >\n                            Archive Project\n                          </Button>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between py-4\">\n                          <div>\n                            <h4 className=\"text-sm font-medium text-red-800\">Delete Project</h4>\n                            <p className=\"text-sm text-red-600\">This action cannot be undone. All data will be permanently deleted.</p>\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            className=\"border-red-300 text-red-600 hover:bg-red-50 hover:text-red-700\"\n                            onClick={handleDeleteProject}\n                          >\n                            Delete Project\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n      \n      {/* Modals */}\n      {isOpen && modalType === \"createItem\" && (\n        <CreateItemModal \n          isOpen={isOpen} \n          onClose={closeModal}\n          onSuccess={handleWorkItemsUpdate}\n          projects={projects}\n          workItems={workItems}\n          users={users}\n          currentProject={project}\n        />\n      )}\n      \n      {isOpen && modalType === \"editItem\" && (\n        <EditItemModal\n          isOpen={isOpen}\n          onClose={closeModal}\n          onSuccess={handleWorkItemsUpdate}\n          workItem={modalProps.workItem}\n          workItems={workItems}\n          users={users}\n        />\n      )}\n      \n      {isOpen && modalType === \"deleteItem\" && (\n        <DeleteItemModal\n          isOpen={isOpen}\n          onClose={closeModal}\n          onSuccess={handleWorkItemsUpdate}\n          workItem={modalProps.workItem}\n        />\n      )}\n      \n      {isOpen && modalType === \"addTeamMembers\" && (\n        <AddTeamMembersModal\n          isOpen={isOpen}\n          onClose={closeModal}\n          projectId={parseInt(params.id)}\n          teamId={project?.teamId || null}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":58713},"client/src/pages/projects.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { ProjectCard } from \"@/components/projects/project-card\";\nimport { CreateProject } from \"@/components/projects/create-project\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useModal } from \"@/hooks/use-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Layers, PlusCircle, Search, Folder, Archive } from \"lucide-react\";\nimport { calculateProjectStats } from \"@/lib/data-utils\";\n\nexport default function Projects() {\n  const { toast } = useToast();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<\"active\" | \"archived\">(\"active\");\n  const { \n    modalType, \n    isOpen, \n    openModal, \n    closeModal \n  } = useModal();\n  \n  // Fetch all users\n  const { data: users = [] } = useQuery({\n    queryKey: ['/api/users'],\n  });\n  \n  // Fetch authenticated user\n  const { data: currentUser } = useQuery({\n    queryKey: ['/api/auth/user'],\n  });\n\n  // Debug: Log current user and users\n  console.log('Current user:', currentUser);\n  console.log('All users:', users);\n  \n  // Fetch teams\n  const { data: teams = [] } = useQuery({\n    queryKey: ['/api/teams'],\n  });\n  \n  // Fetch projects\n  const { data: projects = [], refetch: refetchProjects } = useQuery({\n    queryKey: ['/api/projects'],\n  });\n\n  // Debug: Log projects to see what we're getting\n  console.log('Projects fetched:', projects);\n  \n  // Use dynamic approach to fetch work items for all projects\n  const [projectWorkItems, setProjectWorkItems] = useState<any[]>([]);\n\n  // Fetch work items when projects are loaded\n  useEffect(() => {\n    const fetchWorkItems = async () => {\n      if (projects && projects.length > 0) {\n        const itemPromises = projects.map(project => \n          fetch(`/api/projects/${project.id}/work-items`)\n            .then(res => res.json())\n            .catch(() => [])\n        );\n        \n        const results = await Promise.all(itemPromises);\n        const allItems = results.flat();\n        setProjectWorkItems(allItems);\n      }\n    };\n    \n    fetchWorkItems();\n  }, [projects]);\n  \n  // Use the fetched items\n  const allWorkItems = projectWorkItems;\n  \n  const handleProjectSuccess = () => {\n    refetchProjects();\n    toast({\n      title: \"Success\",\n      description: \"Project created successfully\",\n    });\n  };\n  \n  // Filter projects based on search query and status filter\n  const filteredProjects = projects.filter((project: any) => {\n    // Apply status filter\n    const matchesStatusFilter = statusFilter === \"active\" \n      ? project.status !== 'ARCHIVED' \n      : project.status === 'ARCHIVED';\n    \n    // Apply search filter\n    const matchesSearch = project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      project.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    return matchesStatusFilter && matchesSearch;\n  });\n  \n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Sidebar */}\n      <Sidebar \n        user={currentUser}\n        teams={teams}\n        projects={projects}\n        onCreateTeam={() => openModal(\"createTeam\")}\n        onCreateProject={() => openModal(\"createProject\")}\n      />\n      \n      {/* Mobile menu toggle */}\n      <div className=\"md:hidden fixed bottom-4 right-4 z-10\">\n        <Button\n          className=\"rounded-full shadow-lg p-3 h-12 w-12\"\n          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n        >\n          <Layers className=\"h-5 w-5\" />\n        </Button>\n      </div>\n      \n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header onMobileMenuToggle={() => setMobileMenuOpen(!mobileMenuOpen)} />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6\">\n              <div>\n                <h1 className=\"text-2xl font-semibold mb-1\">Projects</h1>\n                <p className=\"text-neutral-600\">Manage and monitor all your projects</p>\n              </div>\n              <div className=\"flex space-x-3\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n                  <Input\n                    className=\"pl-9 w-[240px]\"\n                    placeholder=\"Search projects...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                </div>\n                <Button onClick={() => openModal(\"createProject\")}>\n                  <PlusCircle className=\"h-4 w-4 mr-2\" />\n                  New Project\n                </Button>\n              </div>\n            </div>\n\n            {/* Status Filter Tabs */}\n            <div className=\"flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg w-fit\">\n              <Button\n                variant={statusFilter === \"active\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setStatusFilter(\"active\")}\n                className={`px-4 py-2 rounded-md ${\n                  statusFilter === \"active\" \n                    ? \"bg-white shadow-sm\" \n                    : \"hover:bg-gray-200\"\n                }`}\n              >\n                <Folder className=\"h-4 w-4 mr-2\" />\n                Active Projects\n              </Button>\n              <Button\n                variant={statusFilter === \"archived\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setStatusFilter(\"archived\")}\n                className={`px-4 py-2 rounded-md ${\n                  statusFilter === \"archived\" \n                    ? \"bg-white shadow-sm\" \n                    : \"hover:bg-gray-200\"\n                }`}\n              >\n                <Archive className=\"h-4 w-4 mr-2\" />\n                Archived Projects\n              </Button>\n            </div>\n            \n            {/* Projects grid */}\n            {filteredProjects.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Layers className=\"h-12 w-12 text-neutral-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">No projects found</h3>\n                <p className=\"text-neutral-500 mb-4\">\n                  {searchQuery\n                    ? \"Try adjusting your search query\"\n                    : \"Create your first project to get started\"}\n                </p>\n                {!searchQuery && (\n                  <Button onClick={() => openModal(\"createProject\")}>\n                    <PlusCircle className=\"h-4 w-4 mr-2\" />\n                    Create Project\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredProjects.map(project => {\n                  const creator = users.find(user => user.id === project.createdBy);\n                  const team = teams.find(team => team.id === project.teamId);\n                  \n                  // Calculate stats for this specific project\n                  const projectItems = allWorkItems.filter(item => item.projectId === project.id);\n                  const stats = calculateProjectStats(projectItems);\n                  \n                  return (\n                    <ProjectCard\n                      key={project.id}\n                      project={project}\n                      creator={creator}\n                      team={team}\n                      stats={stats}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n      \n      {/* Modals */}\n      <CreateProject\n        isOpen={isOpen && modalType === \"createProject\"}\n        onClose={closeModal}\n        onSuccess={handleProjectSuccess}\n        teams={teams}\n        userId={currentUser?.id || 22} // Default to admin user\n      />\n    </div>\n  );\n}\n","size_bytes":8297},"client/src/pages/register.tsx":{"content":"import React, { useState } from \"react\";\n\nexport default function Register() {\n  const [form, setForm] = useState({ name: \"\", email: \"\", password: \"\" });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement registration logic\n    alert(\"Registered!\");\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-16 p-6 bg-white rounded shadow\">\n      <h2 className=\"text-2xl font-bold mb-4\">Register</h2>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Full Name\"\n          value={form.name}\n          onChange={handleChange}\n          className=\"w-full p-2 border rounded\"\n          required\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          value={form.email}\n          onChange={handleChange}\n          className=\"w-full p-2 border rounded\"\n          required\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          value={form.password}\n          onChange={handleChange}\n          className=\"w-full p-2 border rounded\"\n          required\n        />\n        <button\n          type=\"submit\"\n          className=\"w-full bg-primary text-white py-2 rounded\"\n        >\n          Register\n        </button>\n      </form>\n    </div>\n  );\n}","size_bytes":1530},"client/src/pages/reports.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer \n} from \"recharts\";\nimport { \n  Loader2, AlertCircle, TrendingUp, Target, \n  Clock, BarChart3, PieChart as PieChartIcon, Activity, AlertTriangle\n} from \"lucide-react\";\nimport { Project, WorkItem, User, Team } from \"@shared/schema\";\nimport { format, parseISO, isValid, startOfWeek, endOfWeek, addWeeks, isBefore } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\nconst priorityColors = {\n  LOW: '#10b981',\n  MEDIUM: '#f59e0b', \n  HIGH: '#f97316',\n  CRITICAL: '#ef4444',\n};\n\nexport default function Reports() {\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const [reportScope, setReportScope] = useState<'project' | 'workspace'>('workspace');\n  \n  // Fetch current user\n  const { data: currentUser } = useQuery<User>({\n    queryKey: ['/api/users/64'],\n  });\n  \n  // Fetch teams data\n  const { data: teams = [] } = useQuery<Team[]>({\n    queryKey: ['/api/teams'],\n  });\n  \n  // Fetch projects\n  const { \n    data: projects = [], \n    isLoading: isLoadingProjects \n  } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n  \n  // Fetch all work items from all projects\n  const { data: allWorkItems = [], isLoading: isLoadingWorkItems } = useQuery<WorkItem[]>({\n    queryKey: ['/api/work-items/all'],\n    queryFn: async () => {\n      if (!projects.length) return [];\n      \n      const workItemPromises = projects.map(async (project: Project) => {\n        const response = await fetch(`/api/projects/${project.id}/work-items`);\n        if (!response.ok) return [];\n        const items = await response.json();\n        return items.map((item: WorkItem) => ({\n          ...item,\n          projectKey: project.key,\n          projectName: project.name\n        }));\n      });\n      \n      const results = await Promise.all(workItemPromises);\n      return results.flat();\n    },\n    enabled: projects.length > 0,\n  });\n  \n  // Get filtered work items based on scope\n  const filteredWorkItems = useMemo(() => {\n    if (reportScope === 'workspace') {\n      return allWorkItems;\n    } else if (selectedProject) {\n      return allWorkItems.filter((item: any) => item.projectId === parseInt(selectedProject));\n    }\n    return [];\n  }, [allWorkItems, reportScope, selectedProject]);\n\n  // Analytics calculations\n  const analytics = useMemo(() => {\n    const items = filteredWorkItems;\n    const now = new Date();\n    \n    // Basic stats\n    const totalItems = items.length;\n    const completedItems = items.filter(item => item.status === 'DONE').length;\n    const inProgressItems = items.filter(item => item.status === 'IN_PROGRESS').length;\n    const todoItems = items.filter(item => item.status === 'TODO').length;\n    const completionRate = totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;\n    \n    // Overdue items\n    const overdueItems = items.filter(item => {\n      if (item.status === 'DONE') return false;\n      if (!item.endDate) return false;\n      const endDate = parseISO(item.endDate);\n      return isValid(endDate) && isBefore(endDate, now);\n    }).length;\n    \n    // Work items by type\n    const typeDistribution = ['EPIC', 'FEATURE', 'STORY', 'TASK', 'BUG'].map(type => {\n      const count = items.filter(item => item.type === type).length;\n      const completed = items.filter(item => item.type === type && item.status === 'DONE').length;\n      return {\n        name: type,\n        total: count,\n        completed: completed,\n        completionRate: count > 0 ? Math.round((completed / count) * 100) : 0,\n      };\n    });\n    \n    // Priority distribution\n    const priorityDistribution = ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'].map(priority => ({\n      name: priority,\n      value: items.filter(item => item.priority === priority).length,\n      color: priorityColors[priority as keyof typeof priorityColors],\n    }));\n    \n    // Status distribution for pie chart\n    const statusDistribution = [\n      { name: 'TODO', value: todoItems, color: '#f59e0b' },\n      { name: 'IN_PROGRESS', value: inProgressItems, color: '#3b82f6' },\n      { name: 'DONE', value: completedItems, color: '#10b981' }\n    ];\n    \n    // Weekly completion trend (last 8 weeks)\n    const weeklyTrend = [];\n    for (let i = 7; i >= 0; i--) {\n      const weekStart = addWeeks(startOfWeek(now), -i);\n      const weekEnd = endOfWeek(weekStart);\n      \n      const completed = items.filter(item => {\n        if (item.status !== 'DONE' || !item.completedAt) return false;\n        const completedDate = parseISO(item.completedAt);\n        return isValid(completedDate) && \n               completedDate >= weekStart && \n               completedDate <= weekEnd;\n      }).length;\n      \n      const created = items.filter(item => {\n        const createdDate = parseISO(item.createdAt);\n        return isValid(createdDate) && \n               createdDate >= weekStart && \n               createdDate <= weekEnd;\n      }).length;\n      \n      weeklyTrend.push({\n        week: format(weekStart, 'MMM d'),\n        completed,\n        created,\n        net: completed - created\n      });\n    }\n    \n    // Project performance (if workspace scope)\n    const projectPerformance = reportScope === 'workspace' ? projects.map(project => {\n      const projectItems = items.filter((item: any) => item.projectId === project.id);\n      const total = projectItems.length;\n      const completed = projectItems.filter(item => item.status === 'DONE').length;\n      const rate = total > 0 ? Math.round((completed / total) * 100) : 0;\n      \n      return {\n        name: project.key,\n        fullName: project.name,\n        completion: rate,\n        total: total,\n        completed: completed,\n        overdue: projectItems.filter(item => {\n          if (item.status === 'DONE') return false;\n          if (!item.endDate) return false;\n          const endDate = parseISO(item.endDate);\n          return isValid(endDate) && isBefore(endDate, now);\n        }).length\n      };\n    }).filter(p => p.total > 0) : [];\n    \n    // Velocity (items completed per week over last 4 weeks)\n    const velocity = [];\n    for (let i = 3; i >= 0; i--) {\n      const weekStart = addWeeks(startOfWeek(now), -i);\n      const weekEnd = endOfWeek(weekStart);\n      \n      const completed = items.filter(item => {\n        if (item.status !== 'DONE' || !item.completedAt) return false;\n        const completedDate = parseISO(item.completedAt);\n        return isValid(completedDate) && \n               completedDate >= weekStart && \n               completedDate <= weekEnd;\n      }).length;\n      \n      velocity.push({\n        week: format(weekStart, 'MMM d'),\n        velocity: completed\n      });\n    }\n    \n    const avgVelocity = velocity.length > 0 ? \n      Math.round(velocity.reduce((sum, v) => sum + v.velocity, 0) / velocity.length) : 0;\n    \n    return {\n      totalItems,\n      completedItems,\n      inProgressItems,\n      todoItems,\n      completionRate,\n      overdueItems,\n      typeDistribution,\n      priorityDistribution,\n      statusDistribution,\n      weeklyTrend,\n      projectPerformance,\n      velocity,\n      avgVelocity\n    };\n  }, [filteredWorkItems, projects, reportScope]);\n  \n  if (isLoadingProjects || isLoadingWorkItems) {\n    return (\n      <div className=\"flex h-screen bg-neutral-50\">\n        <Sidebar user={currentUser} teams={teams} projects={projects} />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n          <span className=\"ml-2\">Loading reports...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (projects.length === 0) {\n    return (\n      <div className=\"flex h-screen bg-neutral-50\">\n        <Sidebar user={currentUser} teams={teams} projects={projects} />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No Projects Found</h3>\n            <p className=\"text-neutral-600 mb-4\">You don't have any projects to report on yet.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-neutral-50\">\n      <Sidebar user={currentUser} teams={teams} projects={projects} />\n      \n      <div className=\"flex-1 overflow-auto\">\n        <main className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Reports & Analytics</h1>\n              <p className=\"text-gray-600\">Comprehensive insights into project performance and progress</p>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Scope Toggle */}\n              <div className=\"flex border rounded-lg\">\n                <Button\n                  variant={reportScope === 'workspace' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setReportScope('workspace')}\n                  className=\"rounded-r-none\"\n                >\n                  Workspace\n                </Button>\n                <Button\n                  variant={reportScope === 'project' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setReportScope('project')}\n                  className=\"rounded-l-none\"\n                >\n                  Project\n                </Button>\n              </div>\n              \n              {/* Project Selector */}\n              {reportScope === 'project' && (\n                <Select \n                  value={selectedProject || undefined} \n                  onValueChange={setSelectedProject}\n                >\n                  <SelectTrigger className=\"w-60\">\n                    <SelectValue placeholder=\"Select project\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {projects.map((project) => (\n                      <SelectItem key={project.id} value={project.id.toString()}>\n                        {project.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n          </div>\n\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Items</CardTitle>\n                <Target className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics.totalItems}</div>\n                <p className=\"text-xs text-gray-600\">Work items</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Completion Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics.completionRate}%</div>\n                <p className=\"text-xs text-gray-600\">{analytics.completedItems} completed</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">In Progress</CardTitle>\n                <Activity className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics.inProgressItems}</div>\n                <p className=\"text-xs text-gray-600\">Active items</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">{analytics.overdueItems}</div>\n                <p className=\"text-xs text-gray-600\">Need attention</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Avg Velocity</CardTitle>\n                <Clock className=\"h-4 w-4 text-purple-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics.avgVelocity}</div>\n                <p className=\"text-xs text-gray-600\">Items/week</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n              <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n              <TabsTrigger value=\"distribution\">Distribution</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Status Distribution Pie Chart */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <PieChartIcon className=\"h-4 w-4 mr-2\" />\n                      Status Distribution\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-80\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <PieChart>\n                          <Pie\n                            data={analytics.statusDistribution}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            outerRadius={80}\n                            fill=\"#8884d8\"\n                            dataKey=\"value\"\n                            label={({ name, value, percent }) => \n                              `${name}: ${value} (${(percent * 100).toFixed(0)}%)`\n                            }\n                          >\n                            {analytics.statusDistribution.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <Tooltip />\n                        </PieChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Work Item Types */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <BarChart3 className=\"h-4 w-4 mr-2\" />\n                      Work Item Types\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {analytics.typeDistribution.map((type, index) => (\n                        <div key={type.name} className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"font-medium\">{type.name}</span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-sm text-gray-600\">\n                                {type.completed}/{type.total}\n                              </span>\n                              <Badge \n                                variant=\"secondary\"\n                                className={cn(\n                                  \"text-xs\",\n                                  type.completionRate >= 80 ? \"bg-green-100 text-green-800\" :\n                                  type.completionRate >= 50 ? \"bg-yellow-100 text-yellow-800\" :\n                                  \"bg-red-100 text-red-800\"\n                                )}\n                              >\n                                {type.completionRate}%\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                              style={{ width: `${type.completionRate}%` }}\n                            />\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"trends\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Weekly Completion Trend */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Weekly Completion Trend</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-80\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <AreaChart data={analytics.weeklyTrend}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"week\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Legend />\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"completed\"\n                            stackId=\"1\"\n                            stroke=\"#10b981\"\n                            fill=\"#10b981\"\n                            name=\"Completed\"\n                          />\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"created\"\n                            stackId=\"2\"\n                            stroke=\"#3b82f6\"\n                            fill=\"#3b82f6\"\n                            name=\"Created\"\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Velocity Chart */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Team Velocity</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-80\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart data={analytics.velocity}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"week\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Legend />\n                          <Bar dataKey=\"velocity\" fill=\"#8b5cf6\" name=\"Items Completed\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"performance\" className=\"space-y-6\">\n              {reportScope === 'workspace' && analytics.projectPerformance.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Project Performance Comparison</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-80\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart data={analytics.projectPerformance} layout=\"horizontal\">\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis type=\"number\" domain={[0, 100]} />\n                          <YAxis dataKey=\"name\" type=\"category\" width={80} />\n                          <Tooltip \n                            formatter={(value: any, name: string) => {\n                              if (name === 'Completion Rate') return [`${value}%`, name];\n                              return [value, name];\n                            }}\n                            labelFormatter={(label: string) => {\n                              const project = analytics.projectPerformance.find(p => p.name === label);\n                              return project ? project.fullName : label;\n                            }}\n                          />\n                          <Legend />\n                          <Bar dataKey=\"completion\" fill=\"#10b981\" name=\"Completion Rate\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                    <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {analytics.projectPerformance.slice(0, 3).map(project => (\n                        <div key={project.name} className=\"p-4 bg-gray-50 rounded-lg\">\n                          <div className=\"font-medium\">{project.fullName}</div>\n                          <div className=\"text-sm text-gray-600 mt-1\">\n                            {project.completed}/{project.total} items completed\n                          </div>\n                          {project.overdue > 0 && (\n                            <div className=\"text-xs text-red-600 mt-1\">\n                              {project.overdue} overdue items\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"distribution\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Priority Distribution</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={analytics.priorityDistribution}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          outerRadius={100}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                          label={({ name, value, percent }) => \n                            value > 0 ? `${name}: ${value} (${(percent * 100).toFixed(0)}%)` : ''\n                          }\n                        >\n                          {analytics.priorityDistribution.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":24243},"client/src/pages/team-details.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Users, Mail, Calendar, Trash2 } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { formatDate } from \"@/lib/data-utils\";\n\nimport { toast } from \"@/hooks/use-toast\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function TeamDetails() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const [memberToRemove, setMemberToRemove] = useState<any>(null);\n  const queryClient = useQueryClient();\n  const teamId = window.location.pathname.split('/').pop();\n  const teamIdNum = teamId ? parseInt(teamId) : 0;\n  \n  // Fetch current user\n  const { data: currentUser } = useQuery<any>({\n    queryKey: ['/api/users/64'],\n  });\n  \n  // Fetch teams\n  const { data: teams = [] } = useQuery<any[]>({\n    queryKey: ['/api/teams'],\n  });\n  \n  // Fetch team details\n  const { data: team } = useQuery<any>({\n    queryKey: ['/api/teams', teamId],\n    enabled: !!teamId,\n  });\n  \n  // Fetch projects\n  const { data: projects = [] } = useQuery<any[]>({\n    queryKey: ['/api/projects'],\n  });\n  \n  // Fetch users\n  const { data: users = [] } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n  });\n  \n  // Fetch team members\n  const { data: teamMembers = [], isLoading: isLoadingMembers } = useQuery<any[]>({\n    queryKey: [`/api/teams/${teamId}/members`],\n    enabled: !!teamId,\n  });\n  \n  // Get team projects\n  const teamProjects = projects.filter((project: any) => project.teamId === teamIdNum);\n  \n  // Function to remove a team member\n  const handleRemoveMember = async () => {\n    if (!memberToRemove) return;\n    \n    try {\n      const response = await fetch(`/api/teams/${teamId}/members/${memberToRemove.user.id}`, {\n        method: 'DELETE',\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Member removed\",\n          description: `${memberToRemove.user.email} has been removed from the team.`,\n        });\n        \n        // Invalidate team members query to refresh the list\n        queryClient.invalidateQueries({ queryKey: [`/api/teams/${teamId}/members`] });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to remove team member.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error removing team member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setMemberToRemove(null);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-neutral-50\">\n      <Sidebar\n        user={currentUser}\n        teams={teams}\n        projects={projects}\n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <main className=\"flex-1 overflow-auto p-6\">\n          <div className=\"flex items-center mb-6\">\n            <Button variant=\"ghost\" className=\"mr-6 font-medium\" asChild>\n              <a href=\"/teams\">\n                <ArrowLeft className=\"mr-1 h-4 w-4\" />\n                Back to teams\n              </a>\n            </Button>\n            \n            {team && <h1 className=\"text-2xl font-bold\">{team.name}</h1>}\n          </div>\n          \n          {!team ? (\n            <div className=\"text-center py-12\">\n              <p>Loading team details...</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {/* Team info card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Team Information</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-neutral-500\">Description</h3>\n                      <p className=\"mt-1\">{team.description || \"No description provided\"}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-neutral-500\">Created</h3>\n                      <p className=\"mt-1\">{formatDate(team.createdAt)}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-neutral-500\">Team Lead</h3>\n                      <div className=\"flex items-center mt-1\">\n                        <Avatar className=\"h-8 w-8 mr-2\">\n                          <AvatarFallback>\n                            {currentUser?.fullName?.split(' ').map((n: string) => n[0]).join('') || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span>{currentUser?.fullName || 'Team Lead'}</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Members card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Team Members</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoadingMembers ? (\n                    <div className=\"text-center py-4\">\n                      <p className=\"text-sm text-neutral-500\">Loading team members...</p>\n                    </div>\n                  ) : teamMembers.length === 0 ? (\n                    <div className=\"text-center py-4\">\n                      <p className=\"text-sm text-neutral-500\">No team members added yet.</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {teamMembers.map((member: any) => (\n                        <div key={member.id} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <Avatar className=\"h-8 w-8 mr-3\">\n                              <AvatarFallback>\n                                {member.user?.fullName?.split(' ').map((n: string) => n[0]).join('') || \n                                member.user?.username?.substring(0, 2)?.toUpperCase() || 'U'}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <div className=\"font-medium\">\n                                {member.user?.fullName || member.user?.username || 'Unknown User'}\n                              </div>\n                              <div className=\"text-sm text-neutral-500 flex items-center\">\n                                <Mail className=\"h-3 w-3 mr-1\" />\n                                {member.user?.email}\n                              </div>\n                            </div>\n                          </div>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"h-8 w-8 p-0 text-red-500 hover:text-red-600 hover:bg-red-50\"\n                            onClick={() => setMemberToRemove(member)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {/* Projects card */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Team Projects</CardTitle>\n                  <Calendar className=\"h-4 w-4 text-neutral-500\" />\n                </CardHeader>\n                <CardContent>\n                  {teamProjects.length === 0 ? (\n                    <p className=\"text-neutral-500\">No projects assigned to this team</p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {teamProjects.map((project: any) => (\n                        <div key={project.id} className=\"border-b pb-3 last:border-0 last:pb-0\">\n                          <a \n                            href={`/projects/${project.id}`}\n                            className=\"font-medium text-primary hover:underline\"\n                          >\n                            {project.name}\n                          </a>\n                          <div className=\"text-sm text-neutral-500 mt-1\">\n                            {project.key} · {project.status}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </main>\n      </div>\n      \n      \n      {/* Remove Member Confirmation Dialog */}\n      <AlertDialog open={!!memberToRemove} onOpenChange={() => setMemberToRemove(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Remove Team Member</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to remove {memberToRemove?.user?.email} from this team? \n              This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleRemoveMember}\n              className=\"bg-red-500 hover:bg-red-600\"\n            >\n              Remove\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":10021},"client/src/pages/teams.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { TeamCard } from \"@/components/teams/team-card\";\nimport { CreateTeam } from \"@/components/teams/create-team\";\nimport { InviteModal } from \"@/components/modals/invite-modal\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useModal } from \"@/hooks/use-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, PlusCircle, Search, UserPlus } from \"lucide-react\";\nimport { Team, User } from \"@shared/schema\";\n\n// TeamCardWithMembers component that fetches its own member data\nfunction TeamCardWithMembers({ \n  team, \n  creator, \n  projectCount \n}: { \n  team: Team; \n  creator?: User; \n  projectCount: number; \n}) {\n  // Fetch team members for this specific team\n  const { data: teamMembersData = [], refetch } = useQuery<any[]>({\n    queryKey: [`/api/teams/${team.id}/members`],\n    enabled: !!team.id,\n    refetchInterval: false, // Don't auto-refetch\n    refetchOnWindowFocus: false, // Don't refetch on focus\n  });\n\n  // Extract user objects from team members data\n  const teamMembers = teamMembersData.map(member => member.user).filter(Boolean);\n\n  return (\n    <TeamCard\n      team={team}\n      creator={creator}\n      members={teamMembers}\n      projectCount={projectCount}\n      onMembersChange={refetch} // Pass refetch function to refresh data\n    />\n  );\n}\n\nexport default function Teams() {\n  const { toast } = useToast();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { \n    modalType, \n    isOpen, \n    openModal, \n    closeModal \n  } = useModal();\n  \n  // Fetch current user\n  const { data: currentUser } = useQuery<any>({\n    queryKey: ['/api/users/64'], // Using user 64 which exists in the system\n  });\n  \n  // Fetch teams\n  const { data: teams = [], refetch: refetchTeams } = useQuery<any[]>({\n    queryKey: ['/api/teams'],\n  });\n  \n  // Fetch projects\n  const { data: projects = [] } = useQuery<any[]>({\n    queryKey: ['/api/projects'],\n  });\n  \n  // Fetch all users\n  const { data: users = [] } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n  });\n\n  // Create a helper function to get team member count\n  const getTeamMemberCount = (teamId: number) => {\n    // This will be replaced with actual API calls, but for now return a consistent count\n    return 0;\n  };\n  \n  const handleTeamCreated = async (team: any) => {\n    refetchTeams();\n    toast({\n      title: \"Success\",\n      description: \"Team created successfully\",\n    });\n    return team;\n  };\n  \n  // Filter teams based on search query\n  const filteredTeams = teams.filter(team => \n    team.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    team.description?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  \n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Sidebar */}\n      <Sidebar \n        user={currentUser}\n        teams={teams}\n        projects={projects}\n        onCreateTeam={() => openModal(\"createTeam\")}\n        onCreateProject={() => openModal(\"createProject\")}\n      />\n      \n      {/* Mobile menu toggle */}\n      <div className=\"md:hidden fixed bottom-4 right-4 z-10\">\n        <Button\n          className=\"rounded-full shadow-lg p-3 h-12 w-12\"\n          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n        >\n          <Users className=\"h-5 w-5\" />\n        </Button>\n      </div>\n      \n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6\">\n              <div>\n                <h1 className=\"text-2xl font-semibold mb-1\">Teams</h1>\n                <p className=\"text-neutral-600\">Manage your teams and team members</p>\n              </div>\n              <div className=\"flex space-x-3\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n                  <Input\n                    className=\"pl-9 w-[240px]\"\n                    placeholder=\"Search teams...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                </div>\n                <Button variant=\"outline\" onClick={() => openModal(\"inviteMembers\")}>\n                  <UserPlus className=\"h-4 w-4 mr-2\" />\n                  Invite\n                </Button>\n                <Button onClick={() => openModal(\"createTeam\")}>\n                  <PlusCircle className=\"h-4 w-4 mr-2\" />\n                  New Team\n                </Button>\n              </div>\n            </div>\n            \n            {/* Teams grid */}\n            {filteredTeams.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Users className=\"h-12 w-12 text-neutral-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">No teams found</h3>\n                <p className=\"text-neutral-500 mb-4\">\n                  {searchQuery\n                    ? \"Try adjusting your search query\"\n                    : \"Create your first team to start collaborating\"}\n                </p>\n                {!searchQuery && (\n                  <Button onClick={() => openModal(\"createTeam\")}>\n                    <PlusCircle className=\"h-4 w-4 mr-2\" />\n                    Create Team\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredTeams.map(team => {\n                  const creator = users.find(user => user.id === team.createdBy);\n                  const teamProjects = projects.filter(project => project.teamId === team.id);\n                  \n                  return (\n                    <TeamCardWithMembers\n                      key={team.id}\n                      team={team}\n                      creator={creator}\n                      projectCount={teamProjects.length}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n      \n      {/* Modals */}\n      <CreateTeam\n        isOpen={isOpen && modalType === \"createTeam\"}\n        onClose={closeModal}\n        onSuccess={handleTeamCreated}\n        userId={currentUser?.id || 1}\n      />\n      \n      <InviteModal\n        isOpen={isOpen && modalType === \"inviteMembers\"}\n        onClose={closeModal}\n        teams={teams}\n        onCreateTeam={handleTeamCreated}\n      />\n    </div>\n  );\n}\n","size_bytes":6821},"client/src/components/layout/header.tsx":{"content":"import React from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, Search, Bell, HelpCircle, ChevronDown } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Project } from \"@shared/schema\";\n\ninterface HeaderProps {\n  currentProject?: Project;\n  projects?: Project[];\n  onMobileMenuToggle?: () => void;\n}\n\nexport function Header({ \n  currentProject, \n  projects = [],\n  onMobileMenuToggle \n}: HeaderProps) {\n  const [location, navigate] = useLocation();\n  \n  const handleBackToTeams = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigate('/teams');\n  };\n  \n  return (\n    <header className=\"bg-white border-b border-neutral-200 py-4 px-6 flex items-center justify-between\">\n      <div className=\"flex items-center space-x-4\">\n        <button \n          className=\"md:hidden text-neutral-500\"\n          onClick={onMobileMenuToggle}\n        >\n          <Menu className=\"h-5 w-5\" />\n        </button>\n        \n        {currentProject && (\n          <div className=\"relative\">\n            <div className=\"flex items-center text-neutral-800 font-medium bg-neutral-100 rounded-md px-4 py-2 hover:bg-neutral-200 cursor-pointer\">\n              <span className=\"truncate max-w-[160px] md:max-w-[240px]\">\n                {currentProject.name}\n              </span>\n              <ChevronDown className=\"ml-2 h-4 w-4\" />\n            </div>\n          </div>\n        )}\n        \n        {/* {!currentProject && location.startsWith('/projects') && (\n          <Link href=\"/projects\">\n            <div className=\"mr-6 text-neutral-900 font-medium hover:text-primary flex items-center cursor-pointer\">\n              <ChevronDown className=\"rotate-90 mr-1 h-4 w-4\" />\n              Back to projects\n            </div>\n          </Link>\n        )} */}\n        \n        {!currentProject && location.startsWith('/teams') && (\n          <div \n            className=\"mr-6 text-neutral-900 font-medium hover:text-primary flex items-center cursor-pointer\"\n            onClick={handleBackToTeams}\n          >\n            <ChevronDown className=\"rotate-90 mr-1 h-4 w-4\" />\n            Back to teams\n          </div>\n        )}\n        \n        {/* Main Navigation Links - Removed as requested since they're available in the sidebar */}\n      </div>\n      \n      <div className=\"flex items-center space-x-3\">\n        <button className=\"text-neutral-500 hover:text-neutral-700 p-2\">\n          <Search className=\"h-5 w-5\" />\n        </button>\n        <button className=\"text-neutral-500 hover:text-neutral-700 p-2\">\n          <Bell className=\"h-5 w-5\" />\n        </button>\n        <button className=\"text-neutral-500 hover:text-neutral-700 p-2\">\n          <HelpCircle className=\"h-5 w-5\" />\n        </button>\n        \n        <Avatar className=\"h-8 w-8 md:hidden\">\n          <AvatarImage src=\"https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\" alt=\"User profile\" />\n          <AvatarFallback>AM</AvatarFallback>\n        </Avatar>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3131},"client/src/components/layout/sidebar.tsx":{"content":"import React from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { buttonVariants, Button } from \"@/components/ui/button\";\nimport {\n  LayoutDashboard,\n  Layers,\n  Users,\n  Calendar,\n  BarChart,\n  Settings,\n  PlusCircle,\n  Ship,\n  LogOut,\n\n} from \"lucide-react\";\nimport { Team, Project, User } from \"@shared/schema\";\n\ninterface SidebarProps {\n  user?: User;\n  teams?: Team[];\n  projects?: Project[];\n  onCreateTeam?: () => void;\n  onCreateProject?: () => void;\n}\n\nexport function Sidebar({\n  user,\n  teams = [],\n  projects = [],\n  onCreateTeam,\n  onCreateProject,\n}: SidebarProps) {\n  const [location] = useLocation();\n\n  const handleLogout = async () => {\n    try {\n      const response = await fetch(\"/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      window.location.href = \"/login\"; // full redirect\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  return (\n    <aside className=\"bg-white w-64 border-r border-neutral-200 flex-shrink-0 hidden md:flex flex-col h-full\">\n      <div className=\"p-4 border-b border-neutral-200 flex items-center\">\n        <div className=\"w-8 h-8 rounded-md bg-primary flex items-center justify-center text-white mr-3\">\n          <Ship className=\"h-5 w-5\" />\n        </div>\n        <h1 className=\"text-xl font-semibold text-primary\">ProjectHub</h1>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4\">\n          <h2 className=\"text-xs uppercase font-semibold text-neutral-500 mb-2\">\n            Workspace\n          </h2>\n          <ul>\n            <li className=\"mb-1\">\n              <Link href=\"/projects\">\n                <div\n                  className={cn(\n                    \"flex items-center p-2 rounded-md hover:bg-neutral-100\",\n                    location === \"/\" ||\n                      location === \"/projects\" ||\n                      location.startsWith(\"/projects/\")\n                      ? \"text-primary bg-primary/10\"\n                      : \"text-neutral-700\"\n                  )}\n                >\n                  <Layers className=\"h-4 w-4 mr-3\" />\n                  <span>Projects</span>\n                </div>\n              </Link>\n            </li>\n            <li className=\"mb-1\">\n              <Link href=\"/dashboard\">\n                <div\n                  className={cn(\n                    \"flex items-center p-2 rounded-md hover:bg-neutral-100\",\n                    location === \"/dashboard\"\n                      ? \"text-primary bg-primary/10\"\n                      : \"text-neutral-700\"\n                  )}\n                >\n                  <LayoutDashboard className=\"h-4 w-4 mr-3\" />\n                  <span>Dashboard</span>\n                </div>\n              </Link>\n            </li>\n            <li className=\"mb-1\">\n              <Link href=\"/teams\">\n                <div\n                  className={cn(\n                    \"flex items-center p-2 rounded-md hover:bg-neutral-100\",\n                    location === \"/teams\" || location.startsWith(\"/teams/\")\n                      ? \"text-primary bg-primary/10\"\n                      : \"text-neutral-700\"\n                  )}\n                >\n                  <Users className=\"h-4 w-4 mr-3\" />\n                  <span>Teams</span>\n                </div>\n              </Link>\n            </li>\n            <li className=\"mb-1\">\n              <Link href=\"/calendar\">\n                <div\n                  className={cn(\n                    \"flex items-center p-2 rounded-md hover:bg-neutral-100\",\n                    location === \"/calendar\"\n                      ? \"text-primary bg-primary/10\"\n                      : \"text-neutral-700\"\n                  )}\n                >\n                  <Calendar className=\"h-4 w-4 mr-3\" />\n                  <span>Calendar</span>\n                </div>\n              </Link>\n            </li>\n            <li className=\"mb-1\">\n              <Link href=\"/reports\">\n                <div\n                  className={cn(\n                    \"flex items-center p-2 rounded-md hover:bg-neutral-100\",\n                    location === \"/reports\"\n                      ? \"text-primary bg-primary/10\"\n                      : \"text-neutral-700\"\n                  )}\n                >\n                  <BarChart className=\"h-4 w-4 mr-3\" />\n                  <span>Reports</span>\n                </div>\n              </Link>\n            </li>\n           \n          </ul>\n        </div>\n      </ScrollArea>\n\n      <div className=\"p-4 border-t border-neutral-200\">\n        {user && user.fullName ? (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center\">\n              <Avatar className=\"h-8 w-8 mr-3\">\n                <AvatarImage\n                  src={user.avatarUrl || undefined}\n                  alt={user.fullName}\n                />\n                <AvatarFallback>\n                  {user.fullName\n                    .split(\" \")\n                    .map((n) => n[0])\n                    .join(\"\")}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium truncate\">{user.fullName}</p>\n                <p className=\"text-xs text-neutral-500 truncate\">\n                  {user.email}\n                </p>\n              </div>\n              {/* <button className=\"ml-2 text-neutral-500 hover:text-neutral-700\">\n                <Settings className=\"h-4 w-4\" />\n              </button> */}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"w-full text-red-600 border-red-200 hover:bg-red-50 hover:border-red-300\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            <Link\n              href=\"/register\"\n              className={cn(buttonVariants({ variant: \"outline\" }), \"w-full\")}\n            >\n              Register\n            </Link>\n            <Link\n              href=\"/login\"\n              className={cn(buttonVariants({ variant: \"default\" }), \"w-full\")}\n            >\n              Login\n            </Link>\n          </div>\n        )}\n      </div>\n    </aside>\n  );\n}\n","size_bytes":6502},"client/src/components/modals/add-team-members-modal.tsx":{"content":"import { useState } from 'react';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { X } from 'lucide-react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { toast } from '@/hooks/use-toast';\nimport { emailSchema } from '@shared/schema';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { apiRequest } from '@/lib/queryClient';\nimport { validateCorporateEmails } from '@/lib/email-validation';\n\ninterface AddTeamMembersModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: number;\n  teamId: number | null;\n}\n\nconst formSchema = z.object({\n  emails: z.string().min(1, {\n    message: \"Please enter at least one email address\",\n  }),\n});\n\nexport function AddTeamMembersModal({\n  isOpen,\n  onClose,\n  projectId,\n  teamId,\n}: AddTeamMembersModalProps) {\n  const [loading, setLoading] = useState(false);\n  const queryClient = useQueryClient();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      emails: '',\n    },\n  });\n\n  const handleSubmit = async (values: z.infer<typeof formSchema>) => {\n    if (!teamId) {\n      toast({\n        title: \"Error\",\n        description: \"This project is not associated with a team.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Split and trim emails\n      const emailList = values.emails\n        .split(/[,;\\n]/)\n        .map(email => email.trim())\n        .filter(email => email.length > 0);\n\n      // Validate emails\n      const { valid, invalid } = validateCorporateEmails(emailList);\n      \n      if (invalid.length > 0) {\n        toast({\n          title: \"Invalid email formats\",\n          description: `The following emails are not valid corporate emails: ${invalid.join(', ')}`,\n          variant: \"destructive\",\n        });\n        setLoading(false);\n        return;\n      }\n\n      if (valid.length === 0) {\n        toast({\n          title: \"No valid emails\",\n          description: \"Please enter at least one valid corporate email address\",\n          variant: \"destructive\",\n        });\n        setLoading(false);\n        return;\n      }\n\n      // First, ensure all users exist\n      const userPromises = valid.map(async (email) => {\n        // Check if user exists with this email\n        const checkUserResponse = await fetch(`/api/users/by-email/${encodeURIComponent(email)}`);\n        \n        if (checkUserResponse.status === 404) {\n          // Create user if not found\n          return fetch('/api/users', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email,\n              username: email.split('@')[0],\n              fullName: email.split('@')[0].replace(/[.]/g, ' '),\n              password: Math.random().toString(36).slice(-8), // Random password (will be changed on first login)\n            }),\n          });\n        }\n        \n        return checkUserResponse;\n      });\n\n      const userResults = await Promise.all(userPromises);\n      \n      // Now add each user to the team\n      const addMemberPromises = userResults.map(async (userResponse) => {\n        if (!userResponse.ok) {\n          console.error(\"Failed to create or retrieve user:\", userResponse.statusText);\n          return null;\n        }\n        \n        const userData = await userResponse.json();\n        \n        // Add user to team\n        return fetch(`/api/teams/${teamId}/members`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId: userData.id,\n            role: \"MEMBER\" // Default role\n          }),\n        });\n      });\n\n      const results = await Promise.all(addMemberPromises);\n      const successCount = results.filter(r => r && r.ok).length;\n      \n      if (successCount > 0) {\n        toast({\n          title: \"Success!\",\n          description: `Added ${successCount} member${successCount > 1 ? 's' : ''} to the team.`,\n        });\n        \n        // Invalidate relevant queries\n        queryClient.invalidateQueries({ queryKey: [`/api/teams/${teamId}/members`] });\n        \n        // Close the modal\n        form.reset();\n        onClose();\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to add members to the team.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error adding team members:\", error);\n      toast({\n        title: \"Something went wrong\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => onClose()}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>Add Team Members</span>\n            <Button variant=\"ghost\" className=\"h-6 w-6 p-0\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"emails\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium\">Email Addresses</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter email addresses (one per line or separated by commas)\"\n                      className=\"min-h-[120px]\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <p className=\"text-xs text-neutral-500 mt-1\">\n                    Enter corporate email addresses. Users who don't exist will be created automatically.\n                  </p>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={onClose} disabled={loading}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={loading}>\n                {loading ? \"Adding...\" : \"Add Members\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6846},"client/src/components/modals/create-item-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Project, User, WorkItem } from \"@shared/schema\";\nimport { insertWorkItemSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Create a schema specifically for the form\nconst workItemFormSchema = z.object({\n  title: z.string().min(3, { message: \"Title must be at least 3 characters\" }),\n  description: z.string().optional(),\n  type: z.string(),\n  status: z.string(),\n  priority: z.string().optional(),\n  projectId: z.number(),\n  parentId: z.number().optional().nullable(),\n  assigneeId: z.number().optional().nullable(),\n  reporterId: z.number().optional().nullable(),\n  estimate: z.string().optional(),\n  startDate: z.string().optional().nullable(),\n  endDate: z.string().optional().nullable(),\n  // externalId is not needed in the form as it will be generated on the server\n  externalId: z.string().optional(),\n});\n\ntype WorkItemFormValues = z.infer<typeof workItemFormSchema>;\n\ninterface CreateItemModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  projects: Project[];\n  workItems: WorkItem[];\n  users: User[];\n  currentProject?: Project;\n}\n\nexport function CreateItemModal({ \n  isOpen, \n  onClose, \n  onSuccess,\n  projects,\n  workItems,\n  users,\n  currentProject\n}: CreateItemModalProps) {\n  const { toast } = useToast();\n  const [selectedType, setSelectedType] = useState<string>(\"EPIC\");\n  \n  // Only show valid parent options based on selected type\n  const getValidParents = () => {\n    switch (selectedType) {\n      case \"FEATURE\":\n        return workItems.filter(item => item.type === \"EPIC\");\n      case \"STORY\":\n        return workItems.filter(item => item.type === \"FEATURE\");\n      case \"TASK\":\n      case \"BUG\":\n        return workItems.filter(item => item.type === \"STORY\");\n      default:\n        return [];\n    }\n  };\n\n  // Set up the form\n  const form = useForm<WorkItemFormValues>({\n    resolver: zodResolver(workItemFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      type: selectedType,\n      status: \"TODO\",\n      priority: \"MEDIUM\",\n      projectId: currentProject?.id || (projects.length > 0 ? projects[0].id : 0),\n      parentId: null,\n      assigneeId: null,\n      reporterId: users.length > 0 ? users[0].id : 1, // Set current user as default reporter\n      estimate: \"\",\n      startDate: null,\n      endDate: null,\n    },\n  });\n  \n  const handleTypeChange = (value: string) => {\n    setSelectedType(value);\n    form.setValue(\"type\", value);\n    \n    // Reset parentId when type changes since the valid parents will change\n    form.setValue(\"parentId\", null);\n  };\n  \n  // Handle form submission\n  const onSubmit = async (data: WorkItemFormValues) => {\n    try {\n      console.log(\"Form data submitted:\", data);\n      \n      // Prepare data for submission\n      const submitData = {\n        ...data,\n        // Ensure proper data types\n        projectId: Number(data.projectId),\n        // Convert empty strings or \"null\" strings to null for optional fields\n        parentId: data.parentId ? Number(data.parentId) : null,\n        assigneeId: data.assigneeId ? Number(data.assigneeId) : null,\n        reporterId: data.reporterId ? Number(data.reporterId) : (users.length > 0 ? users[0].id : null),\n        estimate: data.estimate || null,\n        // Pass dates as null if not provided\n        startDate: data.startDate ? null : null,\n        endDate: data.endDate ? null : null,\n      };\n      \n      console.log(\"Submitting data:\", submitData);\n      const response = await apiRequest(\"POST\", \"/api/work-items\", submitData);\n      console.log(\"Work item created:\", response);\n      \n      toast({\n        title: \"Item created\",\n        description: \"The item has been created successfully.\",\n      });\n      \n      onSuccess();\n      onClose();\n    } catch (error: any) {\n      console.error(\"Error creating work item:\", error);\n      \n      // Check if it's a validation error with field-specific errors\n      if (error?.response?.data?.errors) {\n        const apiErrors = error.response.data.errors;\n        console.log(\"Validation errors:\", apiErrors);\n        \n        // Set field-specific errors\n        apiErrors.forEach((err: { path: string; message: string }) => {\n          if (form.getValues()[err.path as keyof WorkItemFormValues] !== undefined) {\n            form.setError(err.path as any, { message: err.message });\n          }\n        });\n        \n        toast({\n          title: \"Validation error\",\n          description: \"Please check the form fields and try again.\",\n          variant: \"destructive\",\n        });\n      } else if (error?.response?.data?.message) {\n        // Show specific error message from API\n        toast({\n          title: \"Error\",\n          description: error.response.data.message,\n          variant: \"destructive\",\n        });\n      } else {\n        // Generic error\n        toast({\n          title: \"Error\",\n          description: \"Could not create the item. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n  \n  // Get estimate label based on selected type\n  const getEstimateLabel = () => {\n    return selectedType === \"STORY\" ? \"Story Points\" : \"Estimated Hours\";\n  };\n  \n  // Get valid parent label based on selected type\n  const getParentLabel = () => {\n    switch (selectedType) {\n      case \"FEATURE\": return \"Epic\";\n      case \"STORY\": return \"Feature\";\n      case \"TASK\": \n      case \"BUG\": return \"Story\";\n      default: return \"Parent\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[550px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">Create New Item</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 py-2\">\n            <div className=\"mb-4\">\n              <FormLabel className=\"block text-sm font-medium text-neutral-700 mb-1\">Item Type</FormLabel>\n              <div className=\"grid grid-cols-5 gap-2\">\n                {[\"EPIC\", \"FEATURE\", \"STORY\", \"TASK\", \"BUG\"].map(type => (\n                  <Button\n                    key={type}\n                    type=\"button\"\n                    variant={selectedType === type ? \"default\" : \"outline\"}\n                    className=\"py-2 h-9\"\n                    onClick={() => handleTypeChange(type)}\n                  >\n                    {type.charAt(0) + type.slice(1).toLowerCase()}\n                  </Button>\n                ))}\n              </div>\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter title\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Enter description\"\n                      value={field.value || \"\"}\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"projectId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Project</FormLabel>\n                    <Select\n                      value={field.value.toString()}\n                      onValueChange={(value) => field.onChange(parseInt(value))}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select project\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {projects.map(project => (\n                          <SelectItem key={project.id} value={project.id.toString()}>\n                            {project.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"parentId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{getParentLabel()}</FormLabel>\n                    <Select\n                      value={field.value?.toString() || \"none\"}\n                      onValueChange={(value) => field.onChange(value && value !== \"none\" ? parseInt(value) : null)}\n                      disabled={selectedType === \"EPIC\" || getValidParents().length === 0}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder={`Select ${getParentLabel().toLowerCase()}`} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">None</SelectItem>\n                        {getValidParents().map(item => (\n                          <SelectItem key={item.id} value={item.id.toString()}>\n                            {item.title} ({item.externalId})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"assigneeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assignee</FormLabel>\n                    <Select\n                      value={field.value?.toString() || \"unassigned\"}\n                      onValueChange={(value) => field.onChange(value && value !== \"unassigned\" ? parseInt(value) : null)}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select assignee\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                        {users.map(user => (\n                          <SelectItem key={user.id} value={user.id.toString()}>\n                            {user.fullName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select\n                      value={field.value}\n                      onValueChange={field.onChange}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"TODO\">To Do</SelectItem>\n                        <SelectItem value=\"IN_PROGRESS\">In Progress</SelectItem>\n                        <SelectItem value=\"DONE\">Done</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select\n                      value={field.value || \"MEDIUM\"}\n                      onValueChange={field.onChange}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select priority\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"LOW\">Low</SelectItem>\n                        <SelectItem value=\"MEDIUM\">Medium</SelectItem>\n                        <SelectItem value=\"HIGH\">High</SelectItem>\n                        <SelectItem value=\"CRITICAL\">Critical</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"estimate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{getEstimateLabel()}</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder={selectedType === \"STORY\" ? \"Story points\" : \"Hours\"}\n                        value={field.value || \"\"} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            {(selectedType === \"EPIC\" || selectedType === \"FEATURE\") && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Start Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"date\"\n                          value={field.value || \"\"} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"endDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>End Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"date\"\n                          value={field.value || \"\"} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n            \n            <DialogFooter className=\"mt-6\">\n              <Button variant=\"outline\" type=\"button\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\">Create Item</Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":16699},"client/src/components/modals/delete-item-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { WorkItem } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertTriangle } from \"lucide-react\";\n\ninterface DeleteItemModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  workItem?: WorkItem;\n}\n\nexport function DeleteItemModal({ \n  isOpen, \n  onClose, \n  onSuccess,\n  workItem\n}: DeleteItemModalProps) {\n  const { toast } = useToast();\n  \n  console.log(\"DeleteItemModal - isOpen:\", isOpen);\n  console.log(\"DeleteItemModal - workItem:\", workItem);\n  \n  const handleDelete = async () => {\n    if (!workItem) {\n      toast({\n        title: \"Error\",\n        description: \"No work item provided for deletion.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      await apiRequest(\"DELETE\", `/api/work-items/${workItem.id}`, null);\n      \n      toast({\n        title: \"Item deleted\",\n        description: \"The item has been deleted successfully.\",\n      });\n      \n      onSuccess();\n      onClose();\n    } catch (error: any) {\n      console.error(\"Error deleting work item:\", error);\n      \n      if (error?.response?.data?.message) {\n        // Show specific error message from API\n        toast({\n          title: \"Error\",\n          description: error.response.data.message,\n          variant: \"destructive\",\n        });\n      } else {\n        // Generic error\n        toast({\n          title: \"Error\",\n          description: \"Could not delete the item. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n  \n  if (!workItem) return null;\n  \n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[450px]\">\n        <DialogHeader>\n          <div className=\"flex items-center text-amber-600 mb-2\">\n            <AlertTriangle className=\"h-5 w-5 mr-2\" />\n            <DialogTitle className=\"text-lg font-semibold\">Delete Work Item</DialogTitle>\n          </div>\n          <DialogDescription className=\"text-neutral-600\">\n            Are you sure you want to delete <span className=\"font-medium text-neutral-800\">{workItem.externalId}: {workItem.title}</span>?\n            This action cannot be undone.\n          </DialogDescription>\n        </DialogHeader>\n        \n        {/* Show warning if this item might have children */}\n        {workItem.type === \"EPIC\" || workItem.type === \"FEATURE\" || workItem.type === \"STORY\" ? (\n          <div className=\"bg-amber-50 p-3 rounded-md text-sm text-amber-800 border border-amber-200 mb-3\">\n            <p className=\"font-medium\">Warning:</p>\n            <p>If this {workItem.type.toLowerCase()} has any child items, it cannot be deleted until they are removed or reassigned.</p>\n          </div>\n        ) : null}\n        \n        <DialogFooter className=\"mt-6\">\n          <Button variant=\"outline\" type=\"button\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button variant=\"destructive\" onClick={handleDelete}>\n            Delete\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3276},"client/src/components/modals/edit-item-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Project, User, WorkItem } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Create a schema specifically for the form\nconst workItemFormSchema = z.object({\n  title: z.string().min(3, { message: \"Title must be at least 3 characters\" }),\n  description: z.string().optional(),\n  status: z.string(),\n  priority: z.string().optional(),\n  assigneeId: z.number().optional().nullable(),\n  estimate: z.string().optional(),\n  startDate: z.string().optional().nullable(),\n  endDate: z.string().optional().nullable(),\n});\n\ntype WorkItemFormValues = z.infer<typeof workItemFormSchema>;\n\ninterface EditItemModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  workItem?: WorkItem;\n  users: User[];\n}\n\nexport function EditItemModal({ \n  isOpen, \n  onClose, \n  onSuccess,\n  workItem,\n  users\n}: EditItemModalProps) {\n  const { toast } = useToast();\n  \n  console.log(\"EditItemModal - isOpen:\", isOpen);\n  console.log(\"EditItemModal - workItem:\", workItem);\n  \n  // Set up the form\n  const form = useForm<WorkItemFormValues>({\n    resolver: zodResolver(workItemFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      status: \"TODO\",\n      priority: \"MEDIUM\",\n      assigneeId: null,\n      estimate: \"\",\n      startDate: null,\n      endDate: null,\n    },\n  });\n  \n  // Update form when workItem changes\n  useEffect(() => {\n    if (workItem) {\n      // Format dates for the form\n      const startDateFormatted = workItem.startDate \n        ? new Date(workItem.startDate).toISOString().split('T')[0]\n        : null;\n      \n      const endDateFormatted = workItem.endDate\n        ? new Date(workItem.endDate).toISOString().split('T')[0]\n        : null;\n      \n      form.reset({\n        title: workItem.title,\n        description: workItem.description || \"\",\n        status: workItem.status,\n        priority: workItem.priority || \"MEDIUM\",\n        assigneeId: workItem.assigneeId,\n        estimate: workItem.estimate?.toString() || \"\",\n        startDate: startDateFormatted,\n        endDate: endDateFormatted,\n      });\n    }\n  }, [workItem, form.reset]);\n  \n  // Handle form submission\n  const onSubmit = async (data: WorkItemFormValues) => {\n    if (!workItem) {\n      toast({\n        title: \"Error\",\n        description: \"No work item provided for editing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      console.log(\"Form data submitted:\", data);\n      \n      // Prepare data for submission\n      const submitData = {\n        ...data,\n        // Convert empty strings or \"null\" strings to null for optional fields\n        assigneeId: data.assigneeId || null,\n        estimate: data.estimate || null,\n        // Format dates properly - send as Date objects to avoid string parsing issues\n        startDate: data.startDate ? new Date(data.startDate) : null,\n        endDate: data.endDate ? new Date(data.endDate) : null,\n      };\n      \n      console.log(\"Submitting data:\", submitData);\n      const response = await apiRequest(\"PATCH\", `/api/work-items/${workItem.id}`, submitData);\n      console.log(\"Work item updated:\", response);\n      \n      toast({\n        title: \"Item updated\",\n        description: \"The item has been updated successfully.\",\n      });\n      \n      onSuccess();\n      onClose();\n    } catch (error: any) {\n      console.error(\"Error updating work item:\", error);\n      \n      // Check if it's a validation error with field-specific errors\n      if (error?.response?.data?.errors) {\n        const apiErrors = error.response.data.errors;\n        console.log(\"Validation errors:\", apiErrors);\n        \n        // Set field-specific errors\n        apiErrors.forEach((err: { path: string; message: string }) => {\n          if (form.getValues()[err.path as keyof WorkItemFormValues] !== undefined) {\n            form.setError(err.path as any, { message: err.message });\n          }\n        });\n        \n        toast({\n          title: \"Validation error\",\n          description: \"Please check the form fields and try again.\",\n          variant: \"destructive\",\n        });\n      } else if (error?.response?.data?.message) {\n        // Show specific error message from API\n        toast({\n          title: \"Error\",\n          description: error.response.data.message,\n          variant: \"destructive\",\n        });\n      } else {\n        // Generic error\n        toast({\n          title: \"Error\",\n          description: \"Could not update the item. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n  \n  // Get estimate label based on selected type\n  const getEstimateLabel = () => {\n    return workItem?.type === \"STORY\" ? \"Story Points\" : \"Estimated Hours\";\n  };\n  \n  if (!workItem) return null;\n  \n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[550px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">Edit {workItem.externalId}: {workItem.title}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 py-2\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter title\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Enter description\"\n                      value={field.value || \"\"}\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select\n                      value={field.value}\n                      onValueChange={field.onChange}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"TODO\">To Do</SelectItem>\n                        <SelectItem value=\"IN_PROGRESS\">In Progress</SelectItem>\n                        <SelectItem value=\"DONE\">Done</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select\n                      value={field.value || \"MEDIUM\"}\n                      onValueChange={field.onChange}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select priority\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"LOW\">Low</SelectItem>\n                        <SelectItem value=\"MEDIUM\">Medium</SelectItem>\n                        <SelectItem value=\"HIGH\">High</SelectItem>\n                        <SelectItem value=\"CRITICAL\">Critical</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"assigneeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assignee</FormLabel>\n                    <Select\n                      value={field.value?.toString() || \"unassigned\"}\n                      onValueChange={val => field.onChange(val === \"unassigned\" ? null : parseInt(val))}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select assignee\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                        {users.map(user => (\n                          <SelectItem key={user.id} value={user.id.toString()}>\n                            {user.username || user.email}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"estimate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{getEstimateLabel()}</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder={workItem.type === \"STORY\" ? \"Story points\" : \"Hours\"}\n                        value={field.value || \"\"} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            {/* Show date fields for Epics and Features */}\n            {(workItem.type === \"EPIC\" || workItem.type === \"FEATURE\") && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Start Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"date\"\n                          value={field.value || \"\"} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"endDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>End Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"date\"\n                          value={field.value || \"\"} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n            \n            <DialogFooter className=\"mt-6\">\n              <Button variant=\"outline\" type=\"button\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\">Update Item</Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12831},"client/src/components/modals/invite-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Team } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { validateCorporateEmails } from \"@/lib/email-validation\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Define the form schema with validation\nconst inviteFormSchema = z.object({\n  teamId: z.string(),\n  emails: z.string().min(1, \"Email addresses are required\"),\n  role: z.string(),\n  newTeamName: z.string().optional(),\n});\n\ntype InviteFormValues = z.infer<typeof inviteFormSchema>;\n\ninterface InviteModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  teams: Team[];\n  onCreateTeam: (name: string) => Promise<Team>;\n}\n\nexport function InviteModal({ \n  isOpen, \n  onClose, \n  teams,\n  onCreateTeam \n}: InviteModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Set up the form\n  const form = useForm<InviteFormValues>({\n    resolver: zodResolver(inviteFormSchema),\n    defaultValues: {\n      teamId: teams.length > 0 ? teams[0].id.toString() : \"new\",\n      emails: \"\",\n      role: \"MEMBER\",\n      newTeamName: \"\",\n    },\n  });\n  \n  const selectedTeamId = form.watch(\"teamId\");\n  const isNewTeam = selectedTeamId === \"new\";\n\n  // Mutation for inviting users\n  const inviteMutation = useMutation({\n    mutationFn: async (inviteData: { emails: string[], teamId: string, role: string }) => {\n      const results = [];\n      for (const email of inviteData.emails) {\n        try {\n          // Create user\n          const userResponse = await apiRequest('POST', '/api/users/invite', {\n            email: email.trim(),\n            username: email.split('@')[0],\n            role: 'USER'\n          });\n          const user = await userResponse.json();\n          \n          // Add to team\n          await apiRequest('POST', `/api/teams/${inviteData.teamId}/members`, {\n            userId: user.id,\n            role: inviteData.role\n          });\n          \n          results.push({ success: true, email });\n        } catch (error) {\n          results.push({ success: false, email, error });\n        }\n      }\n      return results;\n    },\n    onSuccess: (results) => {\n      const successful = results.filter(r => r.success);\n      const failed = results.filter(r => !r.success);\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/teams'] });\n      \n      if (successful.length > 0) {\n        toast({\n          title: \"Invitations sent\",\n          description: `${successful.length} member${successful.length > 1 ? \"s\" : \"\"} added to team successfully.`,\n        });\n      }\n      \n      if (failed.length > 0) {\n        toast({\n          title: \"Some invitations failed\",\n          description: `${failed.length} invitation${failed.length > 1 ? \"s\" : \"\"} could not be sent.`,\n          variant: \"destructive\",\n        });\n      }\n      \n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Could not send invitations. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  // Handle form submission\n  const onSubmit = async (data: InviteFormValues) => {\n    try {\n      // Validate email addresses\n      const emails = data.emails.split(/[\\s,]+/).filter(email => email.trim());\n      const { valid, invalid } = validateCorporateEmails(emails);\n      \n      if (invalid.length > 0) {\n        toast({\n          title: \"Invalid emails\",\n          description: `The following emails are not corporate addresses: ${invalid.join(\", \")}`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      if (valid.length === 0) {\n        toast({\n          title: \"No valid emails\",\n          description: \"Please enter at least one valid corporate email address.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Handle new team creation if needed\n      let teamId = data.teamId;\n      if (isNewTeam) {\n        if (!data.newTeamName || data.newTeamName.trim() === \"\") {\n          toast({\n            title: \"Team name required\",\n            description: \"Please enter a name for the new team.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        \n        const newTeam = await onCreateTeam(data.newTeamName);\n        teamId = newTeam.id.toString();\n      }\n      \n      // Trigger the invitation mutation\n      inviteMutation.mutate({\n        emails: valid,\n        teamId,\n        role: data.role\n      });\n      \n    } catch (error) {\n      console.error(\"Error sending invitations:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Could not send invitations. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">Invite Team Members</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 py-2\">\n            <FormField\n              control={form.control}\n              name=\"teamId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Team</FormLabel>\n                  <Select\n                    value={field.value}\n                    onValueChange={field.onChange}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select team\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {teams.map(team => (\n                        <SelectItem key={team.id} value={team.id.toString()}>\n                          {team.name}\n                        </SelectItem>\n                      ))}\n                      <SelectItem value=\"new\">Create New Team...</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {isNewTeam && (\n              <FormField\n                control={form.control}\n                name=\"newTeamName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>New Team Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Enter team name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n            \n            <FormField\n              control={form.control}\n              name=\"emails\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Addresses</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Enter email addresses separated by commas\"\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Only corporate email domains are allowed.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Role</FormLabel>\n                  <Select\n                    value={field.value}\n                    onValueChange={field.onChange}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select role\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"MEMBER\">Team Member</SelectItem>\n                      <SelectItem value=\"LEAD\">Team Lead</SelectItem>\n                      <SelectItem value=\"MANAGER\">Project Manager</SelectItem>\n                      <SelectItem value=\"ADMIN\">Administrator</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <DialogFooter className=\"mt-6\">\n              <Button variant=\"outline\" type=\"button\" onClick={onClose} disabled={inviteMutation.isPending}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={inviteMutation.isPending}>\n                {inviteMutation.isPending ? \"Sending...\" : \"Send Invitations\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9660},"client/src/components/modals/team-members-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Team, User } from \"@shared/schema\";\nimport { UserPlus, UserMinus, Users } from \"lucide-react\";\n\ninterface TeamMembersModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  team: Team;\n  onMembersChange?: () => void;\n}\n\ninterface TeamMember {\n  id: number;\n  teamId: number;\n  userId: number;\n  role: string;\n  joinedAt: string;\n  user: User;\n}\n\nexport function TeamMembersModal({ isOpen, onClose, team, onMembersChange }: TeamMembersModalProps) {\n  const { toast } = useToast();\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\");\n  const [selectedRole, setSelectedRole] = useState<string>(\"MEMBER\");\n\n  // Fetch team members\n  const { data: teamMembers = [], refetch: refetchMembers } = useQuery<TeamMember[]>({\n    queryKey: [`/api/teams/${team.id}/members`],\n    enabled: isOpen && !!team.id,\n  });\n\n  // Fetch all users to show available users to add\n  const { data: allUsers = [] } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n    enabled: isOpen,\n  });\n\n  // Get users who are not already team members\n  const memberUserIds = new Set(teamMembers.map(member => member.userId));\n  const availableUsers = allUsers.filter(user => !memberUserIds.has(user.id));\n\n  // Add member mutation\n  const addMemberMutation = useMutation({\n    mutationFn: async (data: { userId: number; role: string }) => {\n      return apiRequest('POST', `/api/teams/${team.id}/members`, data);\n    },\n    onSuccess: () => {\n      refetchMembers();\n      queryClient.invalidateQueries({ queryKey: ['/api/teams'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/teams/${team.id}/members`] });\n      onMembersChange?.(); // Call the callback to refresh parent data\n      setSelectedUserId(\"\");\n      setSelectedRole(\"MEMBER\");\n      toast({\n        title: \"Member added\",\n        description: \"Team member has been added successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add team member.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove member mutation\n  const removeMemberMutation = useMutation({\n    mutationFn: async (userId: number) => {\n      return apiRequest('DELETE', `/api/teams/${team.id}/members/${userId}`);\n    },\n    onSuccess: () => {\n      refetchMembers();\n      queryClient.invalidateQueries({ queryKey: ['/api/teams'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/teams/${team.id}/members`] });\n      onMembersChange?.(); // Call the callback to refresh parent data\n      toast({\n        title: \"Member removed\",\n        description: \"Team member has been removed successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove team member.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddMember = () => {\n    if (!selectedUserId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a user to add.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addMemberMutation.mutate({\n      userId: parseInt(selectedUserId),\n      role: selectedRole,\n    });\n  };\n\n  const handleRemoveMember = (userId: number) => {\n    removeMemberMutation.mutate(userId);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <Users className=\"h-5 w-5 mr-2\" />\n            Manage Team Members - {team.name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Add new member section */}\n          <div className=\"border rounded-lg p-4 space-y-4\">\n            <h3 className=\"font-medium\">Add New Member</h3>\n            <div className=\"flex gap-2\">\n              <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                <SelectTrigger className=\"flex-1\">\n                  <SelectValue placeholder=\"Select user\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableUsers.map(user => (\n                    <SelectItem key={user.id} value={user.id.toString()}>\n                      {user.fullName} ({user.email})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={selectedRole} onValueChange={setSelectedRole}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"MEMBER\">Member</SelectItem>\n                  <SelectItem value=\"ADMIN\">Admin</SelectItem>\n                  <SelectItem value=\"VIEWER\">Viewer</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Button \n                onClick={handleAddMember}\n                disabled={!selectedUserId || addMemberMutation.isPending}\n              >\n                <UserPlus className=\"h-4 w-4 mr-1\" />\n                Add\n              </Button>\n            </div>\n          </div>\n\n          {/* Current members section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-medium\">Current Members ({teamMembers.length})</h3>\n            \n            {teamMembers.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Users className=\"h-12 w-12 mx-auto mb-2 text-gray-300\" />\n                <p>No team members yet</p>\n                <p className=\"text-sm\">Add members to start collaborating</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {teamMembers.map(member => (\n                  <div key={member.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={member.user.avatarUrl || undefined} />\n                        <AvatarFallback>\n                          {member.user.fullName.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium\">{member.user.fullName}</p>\n                        <p className=\"text-sm text-gray-500\">{member.user.email}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant=\"outline\">\n                        {member.role}\n                      </Badge>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleRemoveMember(member.userId)}\n                        disabled={removeMemberMutation.isPending}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <UserMinus className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex justify-end\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8152},"client/src/components/projects/create-project.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Team } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Define the form schema\nconst projectFormSchema = z.object({\n  name: z.string().min(3, { message: \"Project name must be at least 3 characters\" }).trim(),\n  key: z.string()\n        .min(2, { message: \"Project key must be at least 2 characters\" })\n        .max(10, { message: \"Project key must be at most 10 characters\" })\n        .refine(val => /^[A-Z0-9]+$/.test(val), { \n          message: \"Project key must contain only uppercase letters and numbers (A-Z, 0-9)\" \n        }),\n  description: z.string().optional(),\n  teamId: z.string().optional(),\n  status: z.enum([\"PLANNING\", \"ACTIVE\", \"COMPLETED\"]).default(\"ACTIVE\"),\n});\n\ntype ProjectFormValues = z.infer<typeof projectFormSchema>;\n\ninterface CreateProjectProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  teams: Team[];\n  userId: number;\n}\n\nexport function CreateProject({ \n  isOpen, \n  onClose, \n  onSuccess,\n  teams,\n  userId \n}: CreateProjectProps) {\n  const { toast } = useToast();\n  \n  // Set up the form\n  const form = useForm<ProjectFormValues>({\n    resolver: zodResolver(projectFormSchema),\n    defaultValues: {\n      name: \"\",\n      key: \"\",\n      description: \"\",\n      teamId: teams.length > 0 ? teams[0].id.toString() : \"none\",\n      status: \"ACTIVE\",\n    },\n  });\n  \n  // Handle form submission\n  const onSubmit = async (data: ProjectFormValues) => {\n    try {\n      const projectData = {\n        name: data.name,\n        key: data.key.toUpperCase(), // Ensure key is uppercase\n        description: data.description || \"\",\n        teamId: data.teamId && data.teamId !== \"none\" ? parseInt(data.teamId) : null, // Use null instead of undefined\n        status: data.status,\n        createdBy: userId,\n      };\n      \n      console.log(\"Submitting project data:\", projectData);\n      \n      const response = await apiRequest(\"POST\", \"/api/projects\", projectData);\n      \n      console.log(\"Project creation success:\", response);\n      \n      toast({\n        title: \"Project created\",\n        description: \"The project has been created successfully.\",\n      });\n      \n      onSuccess();\n      onClose();\n    } catch (error: any) {\n      console.error(\"Error creating project:\", error);\n      console.error(\"Error details:\", error?.response?.data);\n      \n      // Check if it's a validation or conflict error with field-specific errors\n      if (error?.response?.data?.errors) {\n        const apiErrors = error.response.data.errors;\n        \n        // Set field-specific errors\n        apiErrors.forEach((err: { path: string; message: string }) => {\n          if (err.path === 'key') {\n            form.setError('key', { message: err.message });\n          } else if (err.path === 'name') {\n            form.setError('name', { message: err.message });\n          } else if (err.path === 'teamId') {\n            form.setError('teamId', { message: err.message });\n          }\n        });\n        \n        toast({\n          title: \"Validation error\",\n          description: \"Please check the form fields and try again.\",\n          variant: \"destructive\",\n        });\n      } else {\n        // Generic error\n        toast({\n          title: \"Error\",\n          description: \"Could not create the project. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">Create New Project</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 py-2\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Project Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter project name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"key\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Project Key</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      placeholder=\"e.g. PROJ, CRM, HR\" \n                      maxLength={10} \n                      style={{ textTransform: 'uppercase' }}\n                      onChange={(e) => {\n                        // Convert to uppercase and only allow A-Z and 0-9\n                        const value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');\n                        console.log(\"Project key input:\", e.target.value, \"->\", value);\n                        field.onChange(value);\n                      }}\n                      value={field.value || ''}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Short uppercase key used for work item IDs (e.g., PROJ-123)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Enter project description\"\n                      value={field.value || \"\"}\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"teamId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Team (Optional)</FormLabel>\n                  <Select\n                    value={field.value}\n                    onValueChange={field.onChange}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select team\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"none\">No team</SelectItem>\n                      {teams.map(team => (\n                        <SelectItem key={team.id} value={team.id.toString()}>\n                          {team.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormDescription>\n                    You can assign a team to this project or leave it unassigned.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select\n                    value={field.value}\n                    onValueChange={field.onChange}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"ACTIVE\">Active</SelectItem>\n                      <SelectItem value=\"PLANNING\">Planning</SelectItem>\n                      <SelectItem value=\"COMPLETED\">Completed</SelectItem>\n                      <SelectItem value=\"ARCHIVED\">Archived</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <DialogFooter className=\"mt-6\">\n              <Button variant=\"outline\" type=\"button\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\">Create Project</Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9249},"client/src/components/projects/project-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { \n  Card, \n  CardContent, \n  CardFooter, \n  CardHeader, \n  CardTitle, \n  CardDescription \n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Layers, Users, CalendarDays } from \"lucide-react\";\nimport { Project, Team, User } from \"@shared/schema\";\n\ninterface ProjectCardProps {\n  project: Project;\n  creator?: User;\n  team?: Team;\n  stats?: {\n    epics: number;\n    features: number;\n    stories: number;\n    tasks: number;\n    bugs: number;\n  };\n}\n\nexport function ProjectCard({ \n  project, \n  creator, \n  team,\n  stats = { epics: 0, features: 0, stories: 0, tasks: 0, bugs: 0 }\n}: ProjectCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"ACTIVE\": return \"bg-amber-100 text-amber-800 border-amber-200\";\n      case \"COMPLETED\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"ARCHIVED\": return \"bg-gray-100 text-gray-800 border-gray-200\";\n      default: return \"bg-blue-100 text-blue-800 border-blue-200\";\n    }\n  };\n  \n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }).format(date);\n  };\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-md transition-shadow\">\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex justify-between items-start\">\n          <Badge variant=\"outline\" className={getStatusColor(project.status)}>\n            {project.status}\n          </Badge>\n          \n          {team && (\n            <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\n              <Users className=\"h-3 w-3 mr-1\" />\n              {team.name}\n            </Badge>\n          )}\n        </div>\n        <CardTitle className=\"text-lg font-semibold mt-2\">{project.name}</CardTitle>\n        <CardDescription className=\"line-clamp-2\">\n          {project.description || \"No description provided\"}\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"pb-2\">\n        <div className=\"flex justify-between text-sm text-neutral-600 mb-4\">\n          <div className=\"flex items-center\">\n            <CalendarDays className=\"h-4 w-4 mr-1\" />\n            {formatDate(new Date(project.createdAt))}\n          </div>\n          \n          {creator && (\n            <div className=\"flex items-center\">\n              <span className=\"mr-1\">Created by:</span>\n              <Avatar className=\"h-5 w-5 mr-1\">\n                <AvatarImage src={creator.avatarUrl || undefined} alt={creator.fullName} />\n                <AvatarFallback className=\"text-xs\">\n                  {creator.fullName.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              <span>{creator.fullName}</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"grid grid-cols-5 gap-2 text-xs\">\n          <div className=\"flex flex-col items-center p-2 bg-blue-50 rounded-md\">\n            <span className=\"font-semibold text-blue-700\">{stats.epics}</span>\n            <span className=\"text-neutral-600\">Epics</span>\n          </div>\n          <div className=\"flex flex-col items-center p-2 bg-purple-50 rounded-md\">\n            <span className=\"font-semibold text-purple-700\">{stats.features}</span>\n            <span className=\"text-neutral-600\">Features</span>\n          </div>\n          <div className=\"flex flex-col items-center p-2 bg-indigo-50 rounded-md\">\n            <span className=\"font-semibold text-indigo-700\">{stats.stories}</span>\n            <span className=\"text-neutral-600\">Stories</span>\n          </div>\n          <div className=\"flex flex-col items-center p-2 bg-green-50 rounded-md\">\n            <span className=\"font-semibold text-green-700\">{stats.tasks}</span>\n            <span className=\"text-neutral-600\">Tasks</span>\n          </div>\n          <div className=\"flex flex-col items-center p-2 bg-red-50 rounded-md\">\n            <span className=\"font-semibold text-red-700\">{stats.bugs}</span>\n            <span className=\"text-neutral-600\">Bugs</span>\n          </div>\n        </div>\n      </CardContent>\n      \n      <CardFooter className=\"pt-2\">\n        <Link href={`/projects/${project.id}`}>\n          <Button variant=\"default\" className=\"w-full\">\n            <Layers className=\"h-4 w-4 mr-2\" />\n            View Project\n          </Button>\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":4587},"client/src/components/teams/create-team.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Define the form schema\nconst teamFormSchema = z.object({\n  name: z.string().min(3, { message: \"Team name must be at least 3 characters\" }),\n  description: z.string().optional(),\n});\n\ntype TeamFormValues = z.infer<typeof teamFormSchema>;\n\ninterface CreateTeamProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: (team: any) => void;\n  userId: number;\n}\n\nexport function CreateTeam({ \n  isOpen, \n  onClose, \n  onSuccess,\n  userId \n}: CreateTeamProps) {\n  const { toast } = useToast();\n  \n  // Set up the form\n  const form = useForm<TeamFormValues>({\n    resolver: zodResolver(teamFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n  \n  // Handle form submission\n  const onSubmit = async (data: TeamFormValues) => {\n    try {\n      const teamData = {\n        name: data.name,\n        description: data.description || \"\",\n        createdBy: userId,\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/teams\", teamData);\n      const newTeam = await response.json();\n      \n      toast({\n        title: \"Team created\",\n        description: \"The team has been created successfully.\",\n      });\n      \n      onSuccess(newTeam);\n      onClose();\n    } catch (error) {\n      console.error(\"Error creating team:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Could not create the team. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">Create New Team</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 py-2\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Team Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Enter team name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Enter team description\"\n                      value={field.value || \"\"}\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <DialogFooter className=\"mt-6\">\n              <Button variant=\"outline\" type=\"button\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\">Create Team</Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3778},"client/src/components/teams/team-card.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { \n  Card, \n  CardContent, \n  CardFooter, \n  CardHeader, \n  CardTitle, \n  CardDescription \n} from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TeamMembersModal } from \"@/components/modals/team-members-modal\";\nimport { Users, CalendarDays, Settings } from \"lucide-react\";\nimport { Team, User } from \"@shared/schema\";\n\ninterface TeamCardProps {\n  team: Team;\n  creator?: User;\n  members?: User[];\n  projectCount?: number;\n  onMembersChange?: () => void;\n}\n\nexport function TeamCard({ \n  team, \n  creator,\n  members = [], \n  projectCount = 0,\n  onMembersChange\n}: TeamCardProps) {\n  const [showMembersModal, setShowMembersModal] = useState(false);\n  \n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }).format(date);\n  };\n  \n  // Display up to 5 members, with a \"+X more\" indicator if needed\n  const displayMembers = members.slice(0, 5);\n  const additionalMembers = Math.max(0, members.length - 5);\n\n  return (\n    <Card className=\"h-full flex flex-col overflow-hidden hover:shadow-md transition-shadow\">\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center text-sm font-medium text-primary flex-shrink-0\">\n            {team.name.split(' ').map(word => word[0]).join('').substring(0, 2)}\n          </div>\n          \n          <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 flex items-center flex-shrink-0 text-xs\">\n            <Users className=\"h-3 w-3 mr-1\" />\n            {members.length} {members.length === 1 ? 'Member' : 'Members'}\n          </Badge>\n        </div>\n        <CardTitle className=\"text-lg font-semibold\">{team.name}</CardTitle>\n        <CardDescription className=\"line-clamp-1 text-sm\">\n          {team.description || \"No description provided\"}\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 pb-2\">\n        <div className=\"flex justify-between items-center text-xs text-neutral-600 mb-3\">\n          <div className=\"flex items-center\">\n            <CalendarDays className=\"h-3 w-3 mr-1 flex-shrink-0\" />\n            <span>{formatDate(new Date(team.createdAt))}</span>\n          </div>\n          \n          {creator && (\n            <div className=\"flex items-center min-w-0\">\n              <span className=\"mr-1 text-xs\">By:</span>\n              <Avatar className=\"h-4 w-4 mr-1 flex-shrink-0\">\n                <AvatarImage src={creator.avatarUrl || undefined} alt={creator.fullName} />\n                <AvatarFallback className=\"text-xs\">\n                  {creator.fullName.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              <span className=\"truncate text-xs\">{creator.fullName}</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"border-t border-neutral-200 pt-2\">\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"min-w-0\">\n              <span className=\"text-xs text-neutral-500 block mb-1\">Members</span>\n              <div className=\"flex flex-wrap gap-1\">\n                {displayMembers.slice(0, 3).map((member, index) => (\n                  <Avatar key={index} className=\"h-5 w-5 border border-white\">\n                    <AvatarImage \n                      src={member.avatarUrl || undefined} \n                      alt={member.fullName} \n                    />\n                    <AvatarFallback className=\"text-xs font-medium\">\n                      {member.fullName.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                ))}\n                \n                {members.length > 3 && (\n                  <div className=\"h-5 w-5 rounded-full bg-neutral-100 border border-white flex items-center justify-center text-xs font-medium text-neutral-600\">\n                    +{members.length - 3}\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"text-center\">\n              <span className=\"text-xs text-neutral-500 block\">Projects</span>\n              <p className=\"text-xl font-semibold text-primary\">{projectCount}</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      \n      <CardFooter className=\"pt-2 flex gap-2 mt-auto\">\n        <Link href={`/teams/${team.id}`} className=\"flex-1\">\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n            <Users className=\"h-3 w-3 mr-1\" />\n            View\n          </Button>\n        </Link>\n        \n        <Button \n          variant=\"default\" \n          size=\"sm\"\n          className=\"flex-1\"\n          onClick={() => setShowMembersModal(true)}\n        >\n          <Settings className=\"h-3 w-3 mr-1\" />\n          Manage\n        </Button>\n      </CardFooter>\n\n      {/* Team Members Modal */}\n      <TeamMembersModal\n        isOpen={showMembersModal}\n        onClose={() => setShowMembersModal(false)}\n        team={team}\n        onMembersChange={onMembersChange}\n      />\n    </Card>\n  );\n}\n","size_bytes":5404},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/deadlines-view.tsx":{"content":"import React, { useMemo, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { WorkItem, User, Project } from \"@shared/schema\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { differenceInDays, isAfter, isBefore, isPast, addDays } from \"date-fns\";\nimport { formatDate, getUserById } from \"@/lib/data-utils\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface DeadlinesViewProps {\n  workItems: WorkItem[];\n  users?: User[];\n  projects?: Project[];\n  multiProject?: boolean;\n}\n\n// Calculate risk level based on end date and progress\nfunction calculateRiskLevel(item: WorkItem): \"high\" | \"medium\" | \"low\" {\n  // If no end date, default to low risk\n  if (!item.endDate) return \"low\";\n  \n  const endDate = new Date(item.endDate);\n  const today = new Date();\n  \n  // Get days remaining until end date\n  const daysRemaining = differenceInDays(endDate, today);\n  \n  // Past deadline = high risk\n  if (isPast(endDate) && item.status !== \"DONE\") {\n    return \"high\";\n  }\n  \n  // Calculate total timeline (original estimate)\n  let totalTimelineInDays = 30; // Default if no startDate\n  \n  if (item.startDate) {\n    const startDate = new Date(item.startDate);\n    totalTimelineInDays = differenceInDays(endDate, startDate);\n  }\n  \n  // If less than 20% of timeline remains and not DONE, it's high risk\n  if (daysRemaining < totalTimelineInDays * 0.2 && item.status !== \"DONE\") {\n    return \"high\";\n  }\n  \n  // If less than 40% of timeline remains and still in TODO, it's high risk\n  if (daysRemaining < totalTimelineInDays * 0.4 && item.status === \"TODO\") {\n    return \"high\";\n  }\n  \n  // If less than 40% of timeline remains and only in IN_PROGRESS, it's medium risk\n  if (daysRemaining < totalTimelineInDays * 0.4 && item.status === \"IN_PROGRESS\") {\n    return \"medium\";\n  }\n  \n  // If less than 60% of timeline remains, it's medium risk if not complete\n  if (daysRemaining < totalTimelineInDays * 0.6 && item.status !== \"DONE\") {\n    return \"medium\";\n  }\n  \n  // Otherwise, low risk\n  return \"low\";\n}\n\nexport function DeadlinesView({ \n  workItems, \n  users = [], \n  projects = [],\n  multiProject = false \n}: DeadlinesViewProps) {\n  const [sortOrder, setSortOrder] = useState<\"upcoming\" | \"risk\">(\"upcoming\");\n  \n  // Filter to items with deadlines (using endDate as targetDate for now)\n  const itemsWithDeadlines = useMemo(() => {\n    return workItems.filter(item => \n      // Only show Epics and Features with end dates\n      (item.type === \"EPIC\" || item.type === \"FEATURE\") && \n      item.endDate !== null\n    );\n  }, [workItems]);\n  \n  // Sort items based on selected sort order\n  const sortedItems = useMemo(() => {\n    if (sortOrder === \"upcoming\") {\n      // Sort by end date (ascending)\n      return [...itemsWithDeadlines].sort((a, b) => {\n        if (!a.endDate) return 1;\n        if (!b.endDate) return -1;\n        return new Date(a.endDate).getTime() - new Date(b.endDate).getTime();\n      });\n    } else {\n      // Sort by risk level (high to low) then by end date\n      return [...itemsWithDeadlines].sort((a, b) => {\n        const riskA = calculateRiskLevel(a);\n        const riskB = calculateRiskLevel(b);\n        \n        // Prioritize risk level\n        const riskOrder = { high: 0, medium: 1, low: 2 };\n        if (riskOrder[riskA] !== riskOrder[riskB]) {\n          return riskOrder[riskA] - riskOrder[riskB];\n        }\n        \n        // If same risk level, sort by date\n        if (!a.endDate) return 1;\n        if (!b.endDate) return -1;\n        return new Date(a.endDate).getTime() - new Date(b.endDate).getTime();\n      });\n    }\n  }, [itemsWithDeadlines, sortOrder]);\n  \n  // Generate risk badge based on risk level\n  const getRiskBadge = (item: WorkItem) => {\n    const risk = calculateRiskLevel(item);\n    const daysRemaining = item.endDate ? differenceInDays(new Date(item.endDate), new Date()) : null;\n    \n    if (risk === \"high\") {\n      if (daysRemaining !== null && daysRemaining <= 5 && item.status !== \"DONE\" && item.type === \"EPIC\") {\n        return (\n          <div className=\"flex items-center gap-1\">\n            <Badge className=\"bg-red-600 text-white hover:bg-red-700 animate-pulse\">Urgent</Badge>\n            <Badge variant=\"outline\" className=\"bg-red-50 text-red-600 border-red-200\">High Risk</Badge>\n          </div>\n        );\n      }\n      return <Badge variant=\"outline\" className=\"bg-red-50 text-red-600 border-red-200\">High Risk</Badge>;\n    } else if (risk === \"medium\") {\n      return <Badge variant=\"outline\" className=\"bg-amber-50 text-amber-600 border-amber-200\">Medium Risk</Badge>;\n    } else {\n      return <Badge variant=\"outline\" className=\"bg-green-50 text-green-600 border-green-200\">Low Risk</Badge>;\n    }\n  };\n  \n  // Get timeline progress\n  const getTimelineProgress = (item: WorkItem) => {\n    if (!item.startDate || !item.endDate) return 0;\n    \n    const startDate = new Date(item.startDate);\n    const endDate = new Date(item.endDate);\n    const today = new Date();\n    \n    // Total timeline duration\n    const totalDuration = differenceInDays(endDate, startDate) || 1; // Avoid division by zero\n    \n    // Time elapsed\n    let elapsed = differenceInDays(today, startDate);\n    \n    // Cap between 0-100%\n    elapsed = Math.max(0, Math.min(totalDuration, elapsed));\n    \n    return Math.round((elapsed / totalDuration) * 100);\n  };\n  \n  // Get days remaining or overdue text\n  const getTimeLeftText = (item: WorkItem) => {\n    if (!item.endDate) return \"No deadline\";\n    \n    const endDate = new Date(item.endDate);\n    const today = new Date();\n    const daysRemaining = differenceInDays(endDate, today);\n    \n    if (item.status === \"DONE\") {\n      return \"Completed\";\n    } else if (daysRemaining < 0) {\n      return `${Math.abs(daysRemaining)} days overdue`;\n    } else if (daysRemaining === 0) {\n      return \"Due today\";\n    } else if (daysRemaining === 1) {\n      return \"Due tomorrow\";\n    } else if (daysRemaining <= 5) {\n      // Special formatting for 5 or fewer days\n      return `⚠️ ${daysRemaining} days remaining`;\n    } else {\n      return `${daysRemaining} days remaining`;\n    }\n  };\n  \n  // Get project info for multi-project view\n  const getProjectInfo = (item: WorkItem) => {\n    if (!multiProject) return null;\n    \n    const project = projects.find(p => p.id === item.projectId);\n    if (!project) return null;\n    \n    return (\n      <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-600 border-blue-200 mr-2\">\n        {project.key}\n      </Badge>\n    );\n  };\n  \n  // Get the type badge for the item\n  const getTypeBadge = (type: string) => {\n    switch (type) {\n      case \"EPIC\":\n        return <Badge className=\"bg-purple-100 text-purple-800 hover:bg-purple-100\">Epic</Badge>;\n      case \"FEATURE\":\n        return <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-100\">Feature</Badge>;\n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <Card className=\"bg-white shadow-sm border border-neutral-200\">\n      <CardHeader className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">\n            Items with Deadlines ({sortedItems.length})\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-neutral-600\">Sort by:</span>\n            <Select\n              key={sortOrder}\n              value={sortOrder}\n              onValueChange={(value) => setSortOrder(value as \"upcoming\" | \"risk\")}\n            >\n              <SelectTrigger\n                className=\"bg-white border border-neutral-300 text-neutral-700 rounded-md h-8 w-40\"\n                value={sortOrder}\n                onValueChange={(value) => setSortOrder(value as \"upcoming\" | \"risk\")}\n              >\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"upcoming\">Upcoming Deadlines</SelectItem>\n                <SelectItem value=\"risk\">Risk Level</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6 pt-0\">\n        {sortedItems.length === 0 ? (\n          <div className=\"text-center py-12 text-neutral-500\">\n            No items with deadlines found.\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {sortedItems.map((item) => {\n              const timelineProgress = getTimelineProgress(item);\n              const assignee = item.assigneeId ? getUserById(users, item.assigneeId) : null;\n              \n              return (\n                <div \n                  key={item.id} \n                  className={`p-4 rounded-md border ${\n                    calculateRiskLevel(item) === \"high\" \n                      ? (differenceInDays(new Date(item.endDate || new Date()), new Date()) <= 5 && item.status !== \"DONE\" \n                          ? \"border-red-300 bg-red-50 shadow-md\" \n                          : \"border-red-200 bg-red-50\")\n                      : calculateRiskLevel(item) === \"medium\"\n                        ? \"border-amber-200 bg-amber-50\"\n                        : \"border-green-200 bg-green-50\"\n                  }`}\n                >\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div className=\"flex items-center flex-wrap gap-2\">\n                      {getProjectInfo(item)}\n                      {getTypeBadge(item.type)}\n                      <h3 className=\"font-medium\">{item.title}</h3>\n                    </div>\n                    {getRiskBadge(item)}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-3\">\n                    <div>\n                      <div className=\"flex justify-between\">\n                        <p className=\"text-xs text-neutral-500 mb-1\">\n                          {item.startDate ? `Start: ${formatDate(item.startDate)}` : \"Timeline\"}\n                        </p>\n                        <p className=\"text-xs text-neutral-500 mb-1\">{timelineProgress}% complete</p>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-full bg-neutral-200 rounded-full h-2 mr-2\">\n                          <div \n                            className={`h-2 rounded-full ${\n                              calculateRiskLevel(item) === \"high\" \n                                ? \"bg-red-500\" \n                                : calculateRiskLevel(item) === \"medium\" \n                                ? \"bg-amber-500\" \n                                : \"bg-green-500\"\n                            }`} \n                            style={{ width: `${timelineProgress}%` }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <p className=\"text-xs text-neutral-500 mb-1\">Deadline</p>\n                      <div className=\"flex items-center\">\n                        <TooltipProvider>\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <p className=\"text-sm font-medium\">\n                                {item.endDate ? formatDate(item.endDate) : \"No deadline\"}\n                              </p>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              <p>Status: {item.status}</p>\n                              {item.startDate && <p>Start: {formatDate(item.startDate)}</p>}\n                            </TooltipContent>\n                          </Tooltip>\n                        </TooltipProvider>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <p className=\"text-xs text-neutral-500 mb-1\">Time remaining</p>\n                        <p className={`text-sm font-medium ${\n                          calculateRiskLevel(item) === \"high\" ? \n                            (differenceInDays(new Date(item.endDate || new Date()), new Date()) <= 5 && item.status !== \"DONE\" ? \n                              \"text-red-600 bg-red-50 px-2 py-1 rounded-md border border-red-200 font-bold\" : \n                              \"text-red-600\") : \n                          calculateRiskLevel(item) === \"medium\" ? \"text-amber-600\" : \n                          \"text-green-600\"\n                        }`}>\n                          {getTimeLeftText(item)}\n                        </p>\n                      </div>\n                      \n                      {assignee && (\n                        <div className=\"flex items-center\">\n                          <Avatar className=\"h-6 w-6\">\n                            <AvatarFallback className=\"text-xs\">\n                              {assignee.fullName?.split(' ').map((n: string) => n[0]).join('') || \n                               assignee.username?.substring(0, 2)?.toUpperCase() || 'U'}\n                            </AvatarFallback>\n                          </Avatar>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13734},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/kanban-board.tsx":{"content":"import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckIcon, Clock, Flag, ListChecks, Bug, Lightbulb, Layers } from \"lucide-react\";\nimport { User, WorkItem } from \"@shared/schema\";\n\ninterface KanbanColumn {\n  id: string;\n  title: string;\n  items: WorkItem[];\n  color: string;\n}\n\ninterface KanbanBoardProps {\n  projectId?: number;  // Make projectId optional\n  workItems: WorkItem[];\n  users?: User[];      // Make users optional\n  onWorkItemsUpdate?: () => void;  // Make callback optional\n  onItemEdit?: (item: WorkItem) => void;\n  onItemDelete?: (item: WorkItem) => void;\n  onStatusChange?: (itemId: number, status: string) => void;\n  filter?: {\n    type?: string[];\n    featureId?: number;\n    assigneeIds?: number[];\n  };\n  showAllTypes?: boolean;\n}\n\nexport function KanbanBoard({ \n  projectId, \n  workItems, \n  users = [], \n  onWorkItemsUpdate,\n  onItemEdit,\n  onItemDelete,\n  onStatusChange,\n  filter,\n  showAllTypes = false\n}: KanbanBoardProps) {\n  const { toast } = useToast();\n  \n  // Filter work items based on criteria\n  const filteredItems = workItems.filter(item => {\n    // Filter by type if specified\n    if (filter?.type && filter.type.length > 0) {\n      if (!filter.type.includes(item.type)) {\n        return false;\n      }\n    }\n    \n    // Filter by assignee if specified\n    if (filter?.assigneeIds && filter.assigneeIds.length > 0) {\n      if (item.assigneeId === null && filter.assigneeIds.includes(-1)) {\n        // Show unassigned items when \"Unassigned\" is selected (-1 represents unassigned)\n        return true;\n      } else if (!item.assigneeId || !filter.assigneeIds.includes(item.assigneeId)) {\n        return false;\n      }\n    }\n    \n    // Filter by feature ID if specified\n    if (filter?.featureId !== undefined) {\n      // For stories, check direct parentId\n      if (item.type === 'STORY') {\n        return item.parentId === filter.featureId;\n      }\n      \n      // For tasks and bugs, find parent story and check if it belongs to the feature\n      if (item.type === 'TASK' || item.type === 'BUG') {\n        const parentStory = workItems.find(wi => wi.id === item.parentId);\n        return parentStory?.parentId === filter.featureId;\n      }\n      \n      return false;\n    }\n    \n    // By default, only show Stories, Tasks, and Bugs in Kanban\n    // If showAllTypes is true, then show all types\n    return showAllTypes || ['STORY', 'TASK', 'BUG'].includes(item.type);\n  });\n  \n  // Organize items by status\n  const columns: KanbanColumn[] = [\n    { \n      id: 'TODO', \n      title: 'To Do',\n      color: 'bg-blue-500',\n      items: filteredItems.filter(item => item.status === 'TODO')\n    },\n    { \n      id: 'IN_PROGRESS', \n      title: 'In Progress',\n      color: 'bg-orange-500',\n      items: filteredItems.filter(item => item.status === 'IN_PROGRESS')\n    },\n    { \n      id: 'DONE', \n      title: 'Done',\n      color: 'bg-green-500',\n      items: filteredItems.filter(item => item.status === 'DONE')\n    }\n  ];\n  \n  const handleDragEnd = async (result: DropResult) => {\n    const { source, destination, draggableId } = result;\n    \n    // Dropped outside a droppable area\n    if (!destination) return;\n    \n    // No change in position\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) return;\n    \n    // Find the work item that was dragged\n    const itemId = parseInt(draggableId.split('-')[1]);\n    const itemToMove = workItems.find(item => item.id === itemId);\n    \n    if (!itemToMove) return;\n    \n    // Determine the new status based on the destination column\n    const newStatus = destination.droppableId;\n    \n    try {\n      if (onStatusChange) {\n        // Use the passed-in status change handler\n        onStatusChange(itemId, newStatus);\n      } else {\n        // Default implementation\n        await apiRequest('PATCH', `/api/work-items/${itemId}/status`, { status: newStatus });\n      \n        // Refresh work items\n        if (onWorkItemsUpdate) {\n          onWorkItemsUpdate();\n        }\n      }\n      \n      toast({\n        title: \"Item moved\",\n        description: `${itemToMove.title} moved to ${destination.droppableId.replace('_', ' ')}`,\n      });\n    } catch (error) {\n      console.error('Error updating status:', error);\n      toast({\n        title: \"Error\",\n        description: \"Could not update item status. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  // Get user by ID\n  const getUserById = (userId: number | null | undefined) => {\n    if (!userId || !users || users.length === 0) return null;\n    return users.find(user => user.id === userId);\n  };\n  \n  // Get parent item for a given work item\n  const getParentItem = (parentId: number | null | undefined) => {\n    if (!parentId) return null;\n    return workItems.find(item => item.id === parentId);\n  };\n  \n  // Get child items for a given work item\n  const getChildItems = (workItemId: number) => {\n    return workItems.filter(item => item.parentId === workItemId);\n  };\n  \n  // Get completion ratio for a story or feature\n  const getCompletionRatio = (workItemId: number) => {\n    const children = getChildItems(workItemId);\n    if (children.length === 0) return \"0/0\";\n    \n    const completed = children.filter(child => child.status === 'DONE').length;\n    return `${completed}/${children.length}`;\n  };\n  \n  const getItemTypeIcon = (type: string) => {\n    switch(type) {\n      case 'STORY':\n        return <Lightbulb className=\"h-3 w-3 mr-1\" />;\n      case 'TASK':\n        return <CheckIcon className=\"h-3 w-3 mr-1\" />;\n      case 'BUG':\n        return <Bug className=\"h-3 w-3 mr-1\" />;\n      default:\n        return <Layers className=\"h-3 w-3 mr-1\" />;\n    }\n  };\n  \n  const getItemTypeBadgeStyles = (type: string) => {\n    switch(type) {\n      case 'STORY':\n        return \"bg-blue-100 text-blue-800\";\n      case 'TASK':\n        return \"bg-green-100 text-green-800\";\n      case 'BUG':\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n  \n  const getPriorityBadgeStyles = (priority: string) => {\n    switch(priority) {\n      case 'LOW':\n        return \"bg-gray-100 text-gray-800\";\n      case 'MEDIUM':\n        return \"bg-yellow-100 text-yellow-800\";\n      case 'HIGH':\n        return \"bg-orange-100 text-orange-800\";\n      case 'CRITICAL':\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n  \n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 overflow-x-auto\">\n        {columns.map(column => (\n          <div key={column.id}>\n            <div className=\"bg-neutral-100 p-3 rounded-t-lg border border-neutral-200 border-b-0 flex items-center justify-between\">\n              <h3 className=\"font-medium flex items-center\">\n                <span className={`w-3 h-3 rounded-full ${column.color} mr-2`}></span>\n                {column.title}\n              </h3>\n              <Badge variant=\"outline\" className=\"bg-neutral-200 text-neutral-700\">\n                {column.items.length}\n              </Badge>\n            </div>\n            \n            <Droppable droppableId={column.id}>\n              {(provided) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  className=\"kanban-column p-3 bg-neutral-50 rounded-b-lg border border-neutral-200 space-y-3 min-h-[calc(100vh-240px)]\"\n                >\n                  {column.items.map((item, index) => {\n                    const assignee = getUserById(item.assigneeId);\n                    const parent = getParentItem(item.parentId);\n                    \n                    return (\n                      <Draggable \n                        key={`item-${item.id}`} \n                        draggableId={`item-${item.id}`} \n                        index={index}\n                      >\n                        {(provided) => (\n                          <Card\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            className=\"bg-white cursor-move hover:shadow-md\"\n                          >\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <Badge className={getItemTypeBadgeStyles(item.type)}>\n                                  <span className=\"flex items-center text-xs font-medium\">\n                                    {getItemTypeIcon(item.type)}\n                                    {item.type.charAt(0) + item.type.slice(1).toLowerCase()}\n                                  </span>\n                                </Badge>\n                                <span className=\"text-xs text-neutral-500\">{item.externalId}</span>\n                              </div>\n                              \n                              <h4 className=\"font-medium mb-2\">{item.title}</h4>\n                              \n                              {item.description && (\n                                <p className=\"text-sm text-neutral-600 mb-3 line-clamp-2\">\n                                  {item.description}\n                                </p>\n                              )}\n                              \n                              <div className=\"flex items-center justify-between text-xs\">\n                                {parent && (\n                                  <div className=\"flex items-center\">\n                                    <span className=\"text-neutral-500 mr-2\">\n                                      {parent.type === 'FEATURE' ? 'Feature:' : 'Story:'}\n                                    </span>\n                                    <span className=\"font-medium\">{parent.externalId}</span>\n                                  </div>\n                                )}\n                                \n                                {item.estimate && (\n                                  <div>\n                                    <span className=\"text-neutral-500\">\n                                      {item.type === 'STORY' ? 'Points:' : 'Est:'}\n                                    </span>\n                                    <span className=\"font-medium ml-1\">{item.estimate}</span>\n                                  </div>\n                                )}\n                              </div>\n                              \n                              <div className=\"mt-3 pt-3 border-t border-neutral-100 flex items-center justify-between\">\n                                <div className=\"flex -space-x-2\">\n                                  {assignee && (\n                                    <Avatar className=\"h-6 w-6 border-2 border-white\">\n                                      <AvatarImage \n                                        src={assignee.avatarUrl || undefined} \n                                        alt={assignee.fullName} \n                                      />\n                                      <AvatarFallback className=\"text-xs\">\n                                        {assignee.fullName.split(' ').map(n => n[0]).join('')}\n                                      </AvatarFallback>\n                                    </Avatar>\n                                  )}\n                                </div>\n                                \n                                {item.type === 'STORY' ? (\n                                  <div className=\"flex items-center text-neutral-500 text-xs\">\n                                    <ListChecks className=\"h-3 w-3 mr-1\" />\n                                    <span>{getCompletionRatio(item.id)}</span>\n                                  </div>\n                                ) : (\n                                  item.priority && (\n                                    <Badge className={getPriorityBadgeStyles(item.priority)}>\n                                      <Flag className=\"h-3 w-3 mr-1\" />\n                                      <span className=\"text-xs\">{item.priority.charAt(0) + item.priority.slice(1).toLowerCase()}</span>\n                                    </Badge>\n                                  )\n                                )}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        )}\n                      </Draggable>\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n        ))}\n      </div>\n    </DragDropContext>\n  );\n}\n","size_bytes":13173},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport { type ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":313},"client/src/components/ui/timeline-view.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { WorkItem, Project } from \"@shared/schema\";\n\ntype TimeUnit = \"Quarter\" | \"Month\" | \"Week\";\n\ninterface TimelineViewProps {\n  projectId?: number;\n  workItems: WorkItem[];\n  timeUnit?: TimeUnit;\n  onTimeUnitChange?: (unit: TimeUnit) => void;\n  projects?: Project[];\n  multiProject?: boolean;\n}\n\nexport function TimelineView({ \n  projectId, \n  workItems,\n  timeUnit = \"Quarter\",\n  onTimeUnitChange,\n  projects = [],\n  multiProject = false\n}: TimelineViewProps) {\n  // Filter to get only Epics and Features\n  const epics = workItems.filter(item => item.type === 'EPIC');\n  const features = workItems.filter(item => item.type === 'FEATURE');\n  \n  // Get formatted time periods based on selected unit\n  const timePeriods = getTimePeriods(timeUnit);\n  \n  // Get features under an epic\n  const getFeaturesForEpic = (epicId: number) => {\n    return features.filter(feature => feature.parentId === epicId);\n  };\n  \n  // Helper to get project name if in multi-project view\n  const getProjectName = (projectId: number | null) => {\n    if (!projectId || !multiProject) return null;\n    const project = projects.find(p => p.id === projectId);\n    return project ? project.name : null;\n  };\n  \n  // Get the position and span of an item on the timeline\n  const getTimelinePosition = (item: WorkItem) => {\n    // If no start/end dates, position in first column with span of 1\n    if (!item.startDate || !item.endDate) {\n      return { start: 0, span: 1 };\n    }\n    \n    const startDate = new Date(item.startDate);\n    const endDate = new Date(item.endDate);\n    \n    let start = 0;\n    let span = 1;\n    \n    if (timeUnit === \"Quarter\") {\n      // Calculate quarter position (0-3 for Q1-Q4)\n      const startQuarter = Math.floor(startDate.getMonth() / 3);\n      const endQuarter = Math.floor(endDate.getMonth() / 3);\n      const startYear = startDate.getFullYear();\n      const endYear = endDate.getFullYear();\n      \n      // Calculate position based on relative quarters from the first time period\n      const firstYear = parseInt(timePeriods[0].split(' ')[1]);\n      start = (startYear - firstYear) * 4 + startQuarter;\n      span = (endYear - startYear) * 4 + (endQuarter - startQuarter) + 1;\n    } else if (timeUnit === \"Month\") {\n      // Calculate month position (0-11 for Jan-Dec)\n      const startMonth = startDate.getMonth();\n      const endMonth = endDate.getMonth();\n      const startYear = startDate.getFullYear();\n      const endYear = endDate.getFullYear();\n      \n      // Calculate position based on relative months from the first time period\n      const [firstMonth, firstYear] = getMonthYearFromPeriod(timePeriods[0]);\n      start = (startYear - firstYear) * 12 + (startMonth - firstMonth);\n      span = (endYear - startYear) * 12 + (endMonth - startMonth) + 1;\n    } else if (timeUnit === \"Week\") {\n      // For simplicity, just show current and next 3 weeks\n      // In a real app, this would be more sophisticated\n      start = 0;\n      span = 1;\n    }\n    \n    // Ensure start and span are valid\n    if (start < 0) start = 0;\n    if (span < 1) span = 1;\n    if (start >= timePeriods.length) start = 0;\n    if (start + span > timePeriods.length) span = timePeriods.length - start;\n    \n    return { start, span };\n  };\n  \n  // Helper to get month/year from a period string\n  function getMonthYearFromPeriod(period: string): [number, number] {\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const [month, year] = period.split(' ');\n    return [months.indexOf(month), parseInt(year)];\n  }\n  \n  // Handle time unit change\n  const handleTimeUnitChange = (value: string) => {\n    onTimeUnitChange?.(value as TimeUnit);\n  };\n\n  return (\n    <Card className=\"bg-white shadow-sm border border-neutral-200\">\n      <CardHeader className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Epics & Features Timeline</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-neutral-600\">View by:</span>\n            <Select value={timeUnit} onValueChange={handleTimeUnitChange}>\n              <SelectTrigger className=\"bg-white border border-neutral-300 text-neutral-700 rounded-md h-8 w-32\">\n                <SelectValue placeholder=\"Quarter\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Quarter\">Quarter</SelectItem>\n                <SelectItem value=\"Month\">Month</SelectItem>\n                <SelectItem value=\"Week\">Week</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6 pt-0\">\n        <div className=\"overflow-x-auto pb-2\">\n          {/* Timeline header */}\n          <div className=\"flex min-w-max border-b border-neutral-200 pb-3\">\n            <div className=\"w-64 flex-shrink-0\"></div>\n            <div className=\"flex-1 grid\" style={{ gridTemplateColumns: `repeat(${timePeriods.length}, minmax(100px, 1fr))` }}>\n              {timePeriods.map((period, index) => (\n                <div key={index} className=\"text-sm font-medium text-neutral-500\">\n                  {period}\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          {/* Timeline content */}\n          <div className=\"min-w-max pt-4\">\n            {epics.map(epic => {\n              const epicFeatures = getFeaturesForEpic(epic.id);\n              const epicPosition = getTimelinePosition(epic);\n              \n              return (\n                <div key={epic.id} className=\"mb-8\">\n                  {/* Epic header */}\n                  <div className=\"flex items-start mb-3\">\n                    <div className=\"w-64 flex-shrink-0 pr-4\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-6 h-6 rounded-full bg-primary flex items-center justify-center text-white text-xs font-bold mr-2\">\n                          E\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium\">{epic.title}</h3>\n                          <div className=\"flex items-center space-x-1\">\n                            <p className=\"text-xs text-neutral-500\">{epic.externalId}</p>\n                            {multiProject && epic.projectId && (\n                              <Badge variant=\"outline\" className=\"text-xs bg-neutral-100 text-neutral-700 px-1 py-0\">\n                                {getProjectName(epic.projectId)}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div \n                      className=\"flex-1 grid\" \n                      style={{ gridTemplateColumns: `repeat(${timePeriods.length}, minmax(100px, 1fr))` }}\n                    >\n                      <div \n                        className={`col-span-${epicPosition.span} col-start-${epicPosition.start + 1} bg-primary/10 rounded-md p-2 border-l-4 border-primary`}\n                        style={{ \n                          gridColumn: `${epicPosition.start + 1} / span ${epicPosition.span}` \n                        }}\n                      >\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium\">{epic.title}</span>\n                          <Badge \n                            variant=\"outline\" \n                            className={`text-xs ${\n                              epic.status === 'TODO' ? 'bg-blue-100 text-blue-800' : \n                              epic.status === 'IN_PROGRESS' ? 'bg-orange-100 text-orange-800' : \n                              'bg-green-100 text-green-800'\n                            }`}\n                          >\n                            {epic.status === 'TODO' \n                              ? 'To Do' \n                              : epic.status === 'IN_PROGRESS' \n                                ? 'In Progress' \n                                : 'Done'\n                            }\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Features under Epic */}\n                  <div className=\"pl-8\">\n                    {epicFeatures.map(feature => {\n                      const featurePosition = getTimelinePosition(feature);\n                      \n                      return (\n                        <div key={feature.id} className=\"flex items-start mb-2\">\n                          <div className=\"w-64 flex-shrink-0 pr-4\">\n                            <div className=\"flex items-center\">\n                              <div className=\"w-5 h-5 rounded-md bg-neutral-200 flex items-center justify-center text-neutral-700 text-xs font-bold mr-2\">\n                                F\n                              </div>\n                              <div>\n                                <h4 className=\"text-sm font-medium\">{feature.title}</h4>\n                                <div className=\"flex items-center space-x-1\">\n                                  <p className=\"text-xs text-neutral-500\">{feature.externalId}</p>\n                                  {multiProject && feature.projectId && (\n                                    <Badge variant=\"outline\" className=\"text-xs bg-neutral-100 text-neutral-700 px-1 py-0\">\n                                      {getProjectName(feature.projectId)}\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div \n                            className=\"flex-1 grid\" \n                            style={{ gridTemplateColumns: `repeat(${timePeriods.length}, minmax(100px, 1fr))` }}\n                          >\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <div \n                                    className=\"bg-neutral-100 rounded-md p-2 h-10\"\n                                    style={{ \n                                      gridColumn: `${featurePosition.start + 1} / span ${featurePosition.span}` \n                                    }}\n                                  >\n                                    <div className=\"truncate text-xs font-medium text-neutral-700\">\n                                      {feature.title}\n                                    </div>\n                                  </div>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <div className=\"text-sm font-medium\">{feature.title}</div>\n                                  <div className=\"text-xs text-neutral-500\">{feature.externalId}</div>\n                                  {feature.description && (\n                                    <div className=\"text-xs mt-1 max-w-xs\">{feature.description}</div>\n                                  )}\n                                  <div className=\"text-xs mt-1\">\n                                    Status: {feature.status.replace('_', ' ')}\n                                  </div>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Generate time periods based on the selected unit\nfunction getTimePeriods(unit: TimeUnit): string[] {\n  const today = new Date();\n  \n  if (unit === \"Quarter\") {\n    const currentYear = today.getFullYear();\n    return [\n      `Q1 ${currentYear}`,\n      `Q2 ${currentYear}`,\n      `Q3 ${currentYear}`,\n      `Q4 ${currentYear}`,\n      `Q1 ${currentYear + 1}`,\n      `Q2 ${currentYear + 1}`,\n      `Q3 ${currentYear + 1}`,\n      `Q4 ${currentYear + 1}`,\n    ];\n  }\n  \n  if (unit === \"Month\") {\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const currentMonth = today.getMonth();\n    const currentYear = today.getFullYear();\n    \n    let periods = [];\n    for (let i = 0; i < 12; i++) {\n      const month = (currentMonth + i) % 12;\n      const year = currentYear + Math.floor((currentMonth + i) / 12);\n      periods.push(`${months[month]} ${year}`);\n    }\n    return periods;\n  }\n  \n  if (unit === \"Week\") {\n    // Simple implementation showing next few weeks\n    // In a real app, this would be more sophisticated\n    return [\n      \"Week 1\",\n      \"Week 2\",\n      \"Week 3\",\n      \"Week 4\",\n      \"Week 5\",\n      \"Week 6\",\n      \"Week 7\",\n      \"Week 8\",\n    ];\n  }\n  \n  return [];\n}\n","size_bytes":13581},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"start-php-server.sh":{"content":"#!/bin/bash\ncd api\nphp -S localhost:8080 index.php","size_bytes":50},"api/index.php":{"content":"<?php\n// Simple PHP router for the API\nrequire_once 'config/cors.php';\n\n$requestUri = $_SERVER['REQUEST_URI'];\n$scriptName = $_SERVER['SCRIPT_NAME'];\n\n// Remove the script name from the URI to get the path\n$path = str_replace(dirname($scriptName), '', $requestUri);\n$path = str_replace('/api', '', $path);\n\n// Route requests to appropriate files\nif (strpos($path, '/auth') === 0) {\n    include 'auth.php';\n} elseif (strpos($path, '/users') === 0) {\n    include 'users.php';\n} elseif (strpos($path, '/teams') === 0) {\n    include 'teams.php';\n} elseif (strpos($path, '/projects') === 0) {\n    include 'projects.php';\n} else {\n    http_response_code(404);\n    echo json_encode(['message' => 'API endpoint not found']);\n}\n?>","size_bytes":721},"server/php-api-routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\nexport function registerPhpApiRoutes(app: Express) {\n  const apiPath = path.resolve(process.cwd(), 'api');\n\n  // Helper function to execute PHP scripts\n  async function executePhpScript(scriptName: string, req: Request, res: Response) {\n    try {\n      // Prepare environment variables for PHP\n      const env: Record<string, string> = {\n        ...process.env,\n        REQUEST_METHOD: req.method,\n        REQUEST_URI: req.originalUrl,\n        QUERY_STRING: req.url.split('?')[1] || '',\n        CONTENT_TYPE: 'application/json',\n        HTTP_ORIGIN: req.get('origin') || 'http://localhost:5000'\n      };\n\n      // Prepare input data for PHP\n      const inputData = req.body ? JSON.stringify(req.body) : '';\n      const phpScript = path.join(apiPath, scriptName);\n      \n      // Set additional environment variables for PHP to read the request body\n      if (inputData) {\n        env.HTTP_CONTENT_LENGTH = Buffer.byteLength(inputData, 'utf8').toString();\n        env.CONTENT_LENGTH = env.HTTP_CONTENT_LENGTH;\n      }\n      \n      // Execute PHP script\n      const command = inputData \n        ? `echo '${inputData.replace(/'/g, \"'\\\\''\")}' | php -f \"${phpScript}\"`\n        : `php -f \"${phpScript}\"`;\n      \n      const { stdout, stderr } = await execAsync(command, { \n        env,\n        cwd: apiPath,\n        timeout: 10000 // 10 second timeout\n      });\n\n      if (stderr) {\n        console.error('PHP Error:', stderr);\n        res.status(500).json({ error: 'PHP execution error', details: stderr });\n        return;\n      }\n\n      // Try to parse JSON response\n      try {\n        const result = JSON.parse(stdout || '{}');\n        res.json(result);\n      } catch (parseError) {\n        // If not JSON, send as text\n        res.send(stdout);\n      }\n    } catch (error) {\n      console.error('PHP Execution Error:', error);\n      res.status(500).json({ error: 'Failed to execute PHP script' });\n    }\n  }\n\n  // Auth routes\n  app.post('/api/php/auth/login', (req, res) => executePhpScript('auth.php', req, res));\n  app.post('/api/php/auth/logout', (req, res) => executePhpScript('auth.php', req, res));\n  app.get('/api/php/auth/status', (req, res) => executePhpScript('auth.php', req, res));\n  app.get('/api/php/auth/user', (req, res) => executePhpScript('auth.php', req, res));\n\n  // User routes\n  app.get('/api/php/users', (req, res) => executePhpScript('users.php', req, res));\n  app.get('/api/php/users/:id', (req, res) => executePhpScript('users.php', req, res));\n  app.post('/api/php/users', (req, res) => executePhpScript('users.php', req, res));\n\n  // Team routes\n  app.get('/api/php/teams', (req, res) => executePhpScript('teams.php', req, res));\n  app.get('/api/php/teams/:id', (req, res) => executePhpScript('teams.php', req, res));\n  app.get('/api/php/teams/:id/members', (req, res) => executePhpScript('teams.php', req, res));\n  app.post('/api/php/teams', (req, res) => executePhpScript('teams.php', req, res));\n  app.post('/api/php/teams/:id/members', (req, res) => executePhpScript('teams.php', req, res));\n\n  // Project routes\n  app.get('/api/php/projects', (req, res) => executePhpScript('projects.php', req, res));\n  app.get('/api/php/projects/:id', (req, res) => executePhpScript('projects.php', req, res));\n  app.get('/api/php/projects/:id/work-items', (req, res) => executePhpScript('projects.php', req, res));\n  app.post('/api/php/projects', (req, res) => executePhpScript('projects.php', req, res));\n  app.patch('/api/php/projects/:id', (req, res) => executePhpScript('projects.php', req, res));\n  app.delete('/api/php/projects/:id', (req, res) => executePhpScript('projects.php', req, res));\n\n  // Test route to verify PHP is working\n  app.get('/api/php/test', async (req, res) => {\n    try {\n      const { stdout } = await execAsync('php -r \"echo json_encode([\\'message\\' => \\'PHP backend is working\\', \\'version\\' => PHP_VERSION]);\"');\n      res.json(JSON.parse(stdout));\n    } catch (error) {\n      res.status(500).json({ error: 'PHP not available' });\n    }\n  });\n\n  // Database test route that matches the specific path structure\n  app.get('/Agile/agilephp%20(4)/agilephp/api/test-db', async (req, res) => {\n    try {\n      // Test MySQL database connection\n      const mysql = await import('mysql2/promise');\n      \n      // Use your provided MySQL credentials\n      const connectionConfig = {\n        host: 'localhost',\n        port: 3306,\n        user: 'cybaemtech_Agile',\n        password: 'Agile@9090$',\n        database: 'cybaemtech_Agile'\n      };\n      \n      console.log('Testing MySQL connection with config:', {\n        host: connectionConfig.host,\n        port: connectionConfig.port,\n        user: connectionConfig.user,\n        database: connectionConfig.database\n      });\n      \n      const connection = await mysql.createConnection(connectionConfig);\n      \n      // Test the connection with a simple query\n      const [rows] = await connection.execute('SELECT 1 as test, NOW() as current_time, DATABASE() as db_name');\n      \n      await connection.end();\n      \n      res.json({\n        success: true,\n        message: 'MySQL database connection successful!',\n        database: connectionConfig.database,\n        test_result: rows[0],\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Database connection error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Database connection failed',\n        error: error.message,\n        code: error.code,\n        errno: error.errno,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Also add decoded version and a simple test route\n  app.get('/Agile/agilephp (4)/agilephp/api/test-db', async (req, res) => {\n    // This handles the URL-decoded version of the path\n    try {\n      const mysql = await import('mysql2/promise');\n      \n      const connectionConfig = {\n        host: 'localhost',\n        port: 3306,\n        user: 'cybaemtech_Agile',\n        password: 'Agile@9090$',\n        database: 'cybaemtech_Agile'\n      };\n      \n      console.log('Testing MySQL connection with config:', {\n        host: connectionConfig.host,\n        port: connectionConfig.port,\n        user: connectionConfig.user,\n        database: connectionConfig.database\n      });\n      \n      const connection = await mysql.createConnection(connectionConfig);\n      const [rows] = await connection.execute('SELECT 1 as test, NOW() as current_time, DATABASE() as db_name');\n      await connection.end();\n      \n      res.json({\n        success: true,\n        message: 'MySQL database connection successful!',\n        database: connectionConfig.database,\n        test_result: rows[0],\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Database connection error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Database connection failed',\n        error: error.message,\n        code: error.code,\n        errno: error.errno,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Simple test-db route for easier access\n  app.get('/api/test-db', async (req, res) => {\n    try {\n      const mysql = await import('mysql2/promise');\n      \n      const connectionConfig = {\n        host: 'localhost',\n        port: 3306,\n        user: 'cybaemtech_Agile',\n        password: 'Agile@9090$',\n        database: 'cybaemtech_Agile'\n      };\n      \n      console.log('Testing MySQL connection with config:', {\n        host: connectionConfig.host,\n        port: connectionConfig.port,\n        user: connectionConfig.user,\n        database: connectionConfig.database\n      });\n      \n      const connection = await mysql.createConnection(connectionConfig);\n      const [rows] = await connection.execute('SELECT 1 as test, NOW() as current_time, DATABASE() as db_name, VERSION() as mysql_version');\n      await connection.end();\n      \n      res.json({\n        success: true,\n        message: 'MySQL database connection successful!',\n        database: connectionConfig.database,\n        test_result: rows[0],\n        connection_info: {\n          host: connectionConfig.host,\n          port: connectionConfig.port,\n          database: connectionConfig.database,\n          user: connectionConfig.user\n        },\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Database connection error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Database connection failed',\n        error: error.message,\n        code: error.code,\n        errno: error.errno,\n        connection_attempted: {\n          host: 'localhost',\n          port: 3306,\n          database: 'cybaemtech_Agile',\n          user: 'cybaemtech_Agile'\n        },\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n}","size_bytes":9026},"server/php-bridge.ts":{"content":"import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\nexport class PhpBridge {\n  private apiPath: string;\n\n  constructor() {\n    this.apiPath = path.resolve(process.cwd(), 'api');\n  }\n\n  async executePhp(scriptPath: string, requestData: any = {}): Promise<any> {\n    try {\n      // Set environment variables for the PHP script\n      const env = {\n        ...process.env,\n        REQUEST_METHOD: requestData.method || 'GET',\n        REQUEST_URI: requestData.uri || '/',\n        QUERY_STRING: requestData.query || '',\n        CONTENT_TYPE: 'application/json',\n        HTTP_ORIGIN: 'http://localhost:5000'\n      };\n\n      // Prepare the PHP command\n      const phpScript = path.join(this.apiPath, scriptPath);\n      const inputData = requestData.body ? JSON.stringify(requestData.body) : '';\n      \n      const command = `echo '${inputData}' | php -f \"${phpScript}\"`;\n      \n      const { stdout, stderr } = await execAsync(command, { \n        env,\n        cwd: this.apiPath \n      });\n\n      if (stderr) {\n        console.error('PHP Error:', stderr);\n        throw new Error(stderr);\n      }\n\n      return JSON.parse(stdout || '{}');\n    } catch (error) {\n      console.error('PHP Bridge Error:', error);\n      throw error;\n    }\n  }\n\n  // Auth endpoints\n  async login(email: string, password: string) {\n    return this.executePhp('auth.php', {\n      method: 'POST',\n      uri: '/auth/login',\n      body: { email, password }\n    });\n  }\n\n  async logout() {\n    return this.executePhp('auth.php', {\n      method: 'POST',\n      uri: '/auth/logout'\n    });\n  }\n\n  async getAuthStatus() {\n    return this.executePhp('auth.php', {\n      method: 'GET',\n      uri: '/auth/status'\n    });\n  }\n\n  async getCurrentUser() {\n    return this.executePhp('auth.php', {\n      method: 'GET',\n      uri: '/auth/user'\n    });\n  }\n\n  // Project endpoints\n  async getProjects() {\n    return this.executePhp('projects.php', {\n      method: 'GET',\n      uri: '/projects'\n    });\n  }\n\n  async getProject(id: number) {\n    return this.executePhp('projects.php', {\n      method: 'GET',\n      uri: `/projects/${id}`\n    });\n  }\n\n  async createProject(projectData: any) {\n    return this.executePhp('projects.php', {\n      method: 'POST',\n      uri: '/projects',\n      body: projectData\n    });\n  }\n\n  async getWorkItems(projectId: number) {\n    return this.executePhp('projects.php', {\n      method: 'GET',\n      uri: `/projects/${projectId}/work-items`\n    });\n  }\n\n  // User endpoints\n  async getUsers() {\n    return this.executePhp('users.php', {\n      method: 'GET',\n      uri: '/users'\n    });\n  }\n\n  async getUser(id: number) {\n    return this.executePhp('users.php', {\n      method: 'GET',\n      uri: `/users/${id}`\n    });\n  }\n\n  // Team endpoints\n  async getTeams() {\n    return this.executePhp('teams.php', {\n      method: 'GET',\n      uri: '/teams'\n    });\n  }\n\n  async getTeam(id: number) {\n    return this.executePhp('teams.php', {\n      method: 'GET',\n      uri: `/teams/${id}`\n    });\n  }\n\n  async getTeamMembers(teamId: number) {\n    return this.executePhp('teams.php', {\n      method: 'GET',\n      uri: `/teams/${teamId}/members`\n    });\n  }\n}","size_bytes":3211},"client/src/lib/api-config.ts":{"content":"// API Configuration for PHP Backend\nexport const API_BASE_URL = '/api/php';\n\nexport const apiRequest = async (\n  method: string,\n  endpoint: string,\n  data?: unknown\n): Promise<Response> => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n\n  return res;\n};\n\nexport const apiGet = async (endpoint: string) => {\n  const res = await apiRequest('GET', endpoint);\n  return res.json();\n};\n\nexport const apiPost = async (endpoint: string, data: unknown) => {\n  const res = await apiRequest('POST', endpoint, data);\n  return res.json();\n};\n\nexport const apiPatch = async (endpoint: string, data: unknown) => {\n  const res = await apiRequest('PATCH', endpoint, data);\n  return res.json();\n};\n\nexport const apiDelete = async (endpoint: string) => {\n  const res = await apiRequest('DELETE', endpoint);\n  return res.status === 204 ? null : res.json();\n};","size_bytes":1162}},"version":1}